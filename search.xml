<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android面试总结(一)]]></title>
      <url>/2018/09/20/Android%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><h5 id="Q-Android中提供哪些数据持久存储的方法？"><a href="#Q-Android中提供哪些数据持久存储的方法？" class="headerlink" title="Q:Android中提供哪些数据持久存储的方法？"></a>Q:Android中提供哪些数据持久存储的方法？</h5><ul>
<li>SharePreference</li>
<li>SQLite</li>
<li>File</li>
<li>Content provider</li>
<li>网络<h5 id="Q-Java中的I-O流读写怎么做？"><a href="#Q-Java中的I-O流读写怎么做？" class="headerlink" title="Q:Java中的I/O流读写怎么做？"></a>Q:Java中的I/O流读写怎么做？</h5></li>
</ul>
<h5 id="Q-SharePreferences适用情形？使用中需要注意什么？"><a href="#Q-SharePreferences适用情形？使用中需要注意什么？" class="headerlink" title="Q:SharePreferences适用情形？使用中需要注意什么？"></a>Q:SharePreferences适用情形？使用中需要注意什么？</h5><p>少量的配置类标记数据，避免复杂的前置操作</p>
<h5 id="Q-了解SQLite中的事务处理吗？是如何做的？"><a href="#Q-了解SQLite中的事务处理吗？是如何做的？" class="headerlink" title="Q:了解SQLite中的事务处理吗？是如何做的？"></a>Q:了解SQLite中的事务处理吗？是如何做的？</h5><p>使用SQLiteDatabase的<code>beginTransaction()</code>方法可以以独占模式开启一个事务，程序执行到<code>endTransaction()</code>方法时会检查事务的标志是否为成功，如果之前调用了<code>setTransactionSuccessful()</code>方法设置事务的标志为成功则提交事务，否则回滚事务。多用于大量数据操作时，能明显减少耗时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SQLiteDatabase db = helper.getWritableDatabase(); db.beginTransaction();//开启事务 try &#123;</div><div class="line">    db.execSQL();</div><div class="line">  db.setTransactionSuccessful();//事务正确结束，如果此方法不执行，则所有的数据增删改操作都会回滚 &#125; catch (Exception e) &#123;</div><div class="line">    //处理异常 &#125; finally &#123;</div><div class="line">    db.endTransaction();//关闭事务 &#125;</div></pre></td></tr></table></figure></p>
<h5 id="Q-使用SQLite做批量操作有什么好的方法吗？"><a href="#Q-使用SQLite做批量操作有什么好的方法吗？" class="headerlink" title="Q:使用SQLite做批量操作有什么好的方法吗？"></a>Q:使用SQLite做批量操作有什么好的方法吗？</h5><p>用事务处理进行优化。在数据库操作时，如果当前没有显式事务，SQLite会默认启动一个隐式事务。隐式事务只持续在数据库操作的持续时间内，然后结束。如果数据库操作成功，则提交其更改。在批量操作的时候不开启事务会创建许多隐式事务，非常耗时。</p>
<h5 id="Q-如果现在要删除SQLite中表的一个字段如何做？"><a href="#Q-如果现在要删除SQLite中表的一个字段如何做？" class="headerlink" title="Q:如果现在要删除SQLite中表的一个字段如何做？"></a>Q:如果现在要删除SQLite中表的一个字段如何做？</h5><p>SQLite不支持<code>drop column</code>。<br>步骤</p>
<ol>
<li>创建删除了某个字段的临时表</li>
<li>迁移数据</li>
<li>删除旧表</li>
</ol>
<h5 id="Q-使用SQLite时会有哪些优化操作"><a href="#Q-使用SQLite时会有哪些优化操作" class="headerlink" title="Q:使用SQLite时会有哪些优化操作?"></a>Q:使用SQLite时会有哪些优化操作?</h5><ul>
<li>批量操作时使用事务</li>
</ul>
<h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><h5 id="Q-Android中进程和线程的关系？区别？"><a href="#Q-Android中进程和线程的关系？区别？" class="headerlink" title="Q:Android中进程和线程的关系？区别？"></a>Q:Android中进程和线程的关系？区别？</h5><p>线程是CPU调度的最小单元，同时也是一种有限的系统资源。进程一般指一个执行单元，在Android中指一个应用。一个进程可以包含多个线程，因此进程和线程是包含和被包含的关系。</p>
<h5 id="Q-为何需要进行IPC？多进程通信可能会出现什么问题？"><a href="#Q-为何需要进行IPC？多进程通信可能会出现什么问题？" class="headerlink" title="Q:为何需要进行IPC？多进程通信可能会出现什么问题？"></a>Q:为何需要进行IPC？多进程通信可能会出现什么问题？</h5><ul>
<li>一个进程Android分配的内存有限,早些Android版本一个进程只分配16M,如果一个应用太大,那么一个进程就无法满足。</li>
<li>守护进程:防止进程被kill</li>
<li>当前应用需要向其他应用获取数据。由于是两个应用,即两个进程。</li>
</ul>
<p>可能出现的问题</p>
<ol>
<li>静态成员和单例模式完全失效</li>
<li>线程同步机制完全失效</li>
<li>SharedPreference的可靠性下降</li>
<li>Application会多次创建</li>
</ol>
<h5 id="Q-什么是序列化？Serializable接口和Parcelable接口的区别？为何推荐使用后者？"><a href="#Q-什么是序列化？Serializable接口和Parcelable接口的区别？为何推荐使用后者？" class="headerlink" title="Q:什么是序列化？Serializable接口和Parcelable接口的区别？为何推荐使用后者？"></a>Q:什么是序列化？Serializable接口和Parcelable接口的区别？为何推荐使用后者？</h5><p>序列化是将对象持久化到存储设备上或者通过网络传输给其它客户端。</p>
<p>Serializable &amp; Parcelable</p>
<ul>
<li>相同点：<ul>
<li>两者都可以进行序列化与反序列化；</li>
</ul>
</li>
<li>不同点：<ul>
<li>Serializable 的数据最后是存放在硬盘上的，那么读的时候也是 I/O 操作，而 Parcelabe 是存放在内存中的。这就导致了下面的一点</li>
<li>Parcelable 的读写速度比 Serializable 在数据量大的时候，快很多</li>
<li>Serializable 的实现十分简单，而 Parcelable 的代码量却比较多</li>
</ul>
</li>
</ul>
<p>Parcelable接口是Android特有功能，效率比实现Serializable接口高效，可用于Intent数据传递，也可以用于进程间通信（IPC）</p>
<h5 id="Q-Android中为何新增Binder来作为主要的IPC方式？"><a href="#Q-Android中为何新增Binder来作为主要的IPC方式？" class="headerlink" title="Q:Android中为何新增Binder来作为主要的IPC方式？"></a>Q:Android中为何新增Binder来作为主要的IPC方式？</h5><h5 id="Q-使用Binder进行数据传输的具体过程？"><a href="#Q-使用Binder进行数据传输的具体过程？" class="headerlink" title="Q:使用Binder进行数据传输的具体过程？"></a>Q:使用Binder进行数据传输的具体过程？</h5><h5 id="Q-Binder框架中ServiceManager的作用？"><a href="#Q-Binder框架中ServiceManager的作用？" class="headerlink" title="Q:Binder框架中ServiceManager的作用？"></a>Q:Binder框架中ServiceManager的作用？</h5><h5 id="Q-是否了解AIDL？原理是什么？如何优化多模块都使用AIDL的情况？"><a href="#Q-是否了解AIDL？原理是什么？如何优化多模块都使用AIDL的情况？" class="headerlink" title="Q:是否了解AIDL？原理是什么？如何优化多模块都使用AIDL的情况？"></a>Q:是否了解AIDL？原理是什么？如何优化多模块都使用AIDL的情况？</h5><h5 id="Q-IPC方式的优缺点和适用场景"><a href="#Q-IPC方式的优缺点和适用场景" class="headerlink" title="Q:IPC方式的优缺点和适用场景"></a>Q:IPC方式的优缺点和适用场景</h5><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">优点</th>
<th style="text-align:center">缺点</th>
<th style="text-align:center">适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Bundle</td>
<td style="text-align:center">简单易用</td>
<td style="text-align:center">只能传输Bundle支持的数据类型</td>
<td style="text-align:center">四大组件间的进程通信</td>
</tr>
<tr>
<td style="text-align:center">文件共享</td>
<td style="text-align:center">简单易用</td>
<td style="text-align:center">不适合高并发场景，并且无法做到进程间的通信</td>
<td style="text-align:center">无并访问情形，交换简单的数据实时性不高的场景</td>
</tr>
<tr>
<td style="text-align:center">AIDL</td>
<td style="text-align:center">功能强大，支持一对多并发通信，支持实时通信</td>
<td style="text-align:center">使用稍复杂，需要处理好线程同步</td>
<td style="text-align:center">一对多通信且有RPC需求</td>
</tr>
<tr>
<td style="text-align:center">Messenger</td>
<td style="text-align:center">功能一般，支持一对多串行通信，支持实时通信</td>
<td style="text-align:center">不能很好的处理高并发情形，不支持RPC，数据通过Message进行传输，因此只能传输Bundle支持的数据类型</td>
<td style="text-align:center">低并发的一对多即时通信，无RPC需求，或者无须返回结果的RPC需求</td>
</tr>
<tr>
<td style="text-align:center">ContentProvider</td>
<td style="text-align:center">在数据源访问方面功能强大，支持一对多并发数据共享</td>
<td style="text-align:center">可以理解闭为受约束的AIDL，主要提供数据源的CRUD操作</td>
<td style="text-align:center">一对多的进程间的数据共享</td>
</tr>
<tr>
<td style="text-align:center">Socket</td>
<td style="text-align:center">功能强大，可以通过网络传输字节流，支持一对多并发实时通信</td>
<td style="text-align:center">实现细节稍微有点烦琐，不支持直接的RPC</td>
<td style="text-align:center">网络数据交换</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Broadcast Receiver知识梳理]]></title>
      <url>/2018/09/20/Broadcast-Receiver%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="Q-广播种类"><a href="#Q-广播种类" class="headerlink" title="Q:广播种类"></a>Q:广播种类</h4><p>分类</p>
<ul>
<li>普通广播（Normal Broadcast）</li>
<li>系统广播（System Broadcast）</li>
<li>有序广播（Ordered Broadcast）</li>
<li>粘性广播（Sticky Broadcast）(在Android5.0 &amp; API 21中已经失效，不建议使用)</li>
<li>App应用内广播（Local Broadcast）</li>
</ul>
<h4 id="Q-广播的两种注册形式？区别在哪？"><a href="#Q-广播的两种注册形式？区别在哪？" class="headerlink" title="Q:广播的两种注册形式？区别在哪？"></a>Q:广播的两种注册形式？区别在哪？</h4><h5 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h5><ul>
<li>在AndroidMainfest中通过<receiver>标签声明</receiver></li>
<li>不受任何组件生命周期的影响</li>
<li>耗电、占内存</li>
<li>需要时刻监听广播</li>
</ul>
<h5 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h5><ul>
<li>在代码中调用Context.registerReveiver方法</li>
<li>非常驻，灵活，跟随组件的生命周期变化</li>
<li>需要特定时刻监听广播</li>
<li>动态注册的广播永远要快于静态注册的广播,不管静态注册的优先级设置的多高,不管动态注册的优先级有多低</li>
</ul>
<p><a href="https://www.jianshu.com/p/ca3d87a4cdf3" target="_blank" rel="external">参考</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Broadcast Receiver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Service知识梳理]]></title>
      <url>/2018/09/17/Service%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="startService"><a href="#startService" class="headerlink" title="startService"></a>startService</h4><p>startService第一次启动会调用<code>onCreate</code>,<code>onCreate</code>只会在创建的时候调用一次，之后多次启动会多次调用<code>onStartCommand</code>。<code>stopService</code>会停止Service，多次调用<code>stopService</code>不会报错。</p>
<h4 id="bindService"><a href="#bindService" class="headerlink" title="bindService"></a>bindService</h4><p>bindService第一次启动会依次调用<code>onCreate</code>-&gt;<code>onBind</code>-&gt;<code>onServiceConnected</code>。多次调用<code>bindService</code>， <code>onBind</code>和<code>onServiceConnected</code>都不会多次回调。多次调用<code>unBindService</code>会报错。</p>
<h4 id="startCommand"><a href="#startCommand" class="headerlink" title="startCommand"></a>startCommand</h4><p>onStartCommand() 方法必须返回整型数。整型数是一个值，用于描述系统应该如何在服务终止的情况下继续运行服务（如上所述，IntentService 的默认实现将为您处理这种情况，不过您可以对其进行修改）。从 onStartCommand() 返回的值必须是以下常量之一：</p>
<ul>
<li>START_NOT_STICKY<br>如果系统在 onStartCommand() 返回后终止服务，则除非有挂起 Intent 要传递，否则系统不会重建服务。这是最安全的选项，可以避免在不必要时以及应用能够轻松重启所有未完成的作业时运行服务。</li>
<li>START_STICKY<br>如果系统在 onStartCommand() 返回后终止服务，则会重建服务并调用 onStartCommand()，但不会重新传递最后一个 Intent。相反，除非有挂起 Intent 要启动服务（在这种情况下，将传递这些 Intent ），否则系统会通过空 Intent 调用 onStartCommand()。这适用于不执行命令、但无限期运行并等待作业的媒体播放器（或类似服务）。</li>
<li>START_REDELIVER_INTENT<br>如果系统在 onStartCommand() 返回后终止服务，则会重建服务，并通过传递给服务的最后一个 Intent 调用 onStartCommand()。任何挂起 Intent 均依次传递。这适用于主动执行应该立即恢复的作业（例如下载文件）的服务。</li>
</ul>
<p>服务在其托管进程的主线程中运行的</p>
<h4 id="Q-谈一谈Service的生命周期？"><a href="#Q-谈一谈Service的生命周期？" class="headerlink" title="Q:谈一谈Service的生命周期？"></a>Q:谈一谈Service的生命周期？</h4><p><img src="http://p97o4wfou.bkt.clouddn.com//20180917123329.png" alt=""></p>
<h4 id="Q-Service的两种启动方式？区别在哪？"><a href="#Q-Service的两种启动方式？区别在哪？" class="headerlink" title="Q:Service的两种启动方式？区别在哪？"></a>Q:Service的两种启动方式？区别在哪？</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><ul>
<li>开启服务的组件退出之后，服务还是可以在后台长期运行的。其他组件可以调用stopService(Intent)或者自身调用stopSelf停止</li>
<li>组件不能调用服务里面的方法</li>
</ul>
<h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h5><ul>
<li>组件销毁后服务自动被销毁，如果一个Service被多个组件绑定，只有所有的组件被销毁这个服务才会销毁</li>
<li>组件可以调用服务里面的方法</li>
</ul>
<h4 id="Q-一个Activty先start一个Service后，再bind时会回调什么方法？此时如何做才能回调Service的destory-方法？"><a href="#Q-一个Activty先start一个Service后，再bind时会回调什么方法？此时如何做才能回调Service的destory-方法？" class="headerlink" title="Q:一个Activty先start一个Service后，再bind时会回调什么方法？此时如何做才能回调Service的destory()方法？"></a>Q:一个Activty先start一个Service后，再bind时会回调什么方法？此时如何做才能回调Service的destory()方法？</h4><p>同时调用<code>stopService</code>和<code>unbindService</code>才可以回调<code>onDestory</code></p>
<h4 id="Q-Service如何和Activity进行通信？"><a href="#Q-Service如何和Activity进行通信？" class="headerlink" title="Q:Service如何和Activity进行通信？"></a>Q:Service如何和Activity进行通信？</h4><ul>
<li>使用<code>Intent</code>，<code>onStartCommand</code>时候传入的<code>Intent</code></li>
<li><code>BroadcastReceiver</code>,Service发送，Activity接收</li>
<li>接口回调</li>
<li>共享硬盘存储，共享内存</li>
<li><code>ServiceConnection</code></li>
</ul>
<h4 id="Q-用过哪些系统Service？"><a href="#Q-用过哪些系统Service？" class="headerlink" title="Q:用过哪些系统Service？"></a>Q:用过哪些系统Service？</h4><p>获取系统Service一般用<code>getSystemService</code>方法。常见的Service有</p>
<ul>
<li>LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);</li>
<li>ActivityManagerService</li>
<li>PackageManagerService</li>
<li>WindowManagerService<br>参考<a href="https://blog.csdn.net/dongxianfei/article/details/53290643" target="_blank" rel="external">这里</a></li>
</ul>
<h4 id="Q-是否能在Service进行耗时操作？如果非要可以怎么做？"><a href="#Q-是否能在Service进行耗时操作？如果非要可以怎么做？" class="headerlink" title="Q:是否能在Service进行耗时操作？如果非要可以怎么做？"></a>Q:是否能在Service进行耗时操作？如果非要可以怎么做？</h4><p>不能。因为服务在其托管进程的主线程中运行，它既<strong>不</strong>创建自己的线程，也<strong>不</strong>在单独的进程中运行（除非另行指定）。它不可以做密集耗时的操作。如果非要做的话，可以启动一个新的线程来工作。</p>
<h4 id="Q-前台服务是什么？和普通服务的不同？如何去开启一个前台服务？"><a href="#Q-前台服务是什么？和普通服务的不同？如何去开启一个前台服务？" class="headerlink" title="Q:前台服务是什么？和普通服务的不同？如何去开启一个前台服务？"></a>Q:前台服务是什么？和普通服务的不同？如何去开启一个前台服务？</h4><ul>
<li>前台服务被认为是用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止。 前台服务必须为状态栏提供通知，放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。</li>
<li>要请求让服务运行于前台，请调用 <code>startForeground()</code>。此方法采用两个参数：唯一标识通知的整型数和状态栏的 Notification。</li>
</ul>
<h4 id="Q-AlarmManager能实现定时的原理？"><a href="#Q-AlarmManager能实现定时的原理？" class="headerlink" title="Q:AlarmManager能实现定时的原理？"></a>Q:AlarmManager能实现定时的原理？</h4><h4 id="Q-是否了解ActivityManagerService，谈谈它发挥什么作用？"><a href="#Q-是否了解ActivityManagerService，谈谈它发挥什么作用？" class="headerlink" title="Q:是否了解ActivityManagerService，谈谈它发挥什么作用？"></a>Q:是否了解ActivityManagerService，谈谈它发挥什么作用？</h4><h4 id="Q-如何保证Service不被杀死？"><a href="#Q-如何保证Service不被杀死？" class="headerlink" title="Q:如何保证Service不被杀死？"></a>Q:如何保证Service不被杀死？</h4><ul>
<li>相互唤起，需要借助其他APP</li>
<li>service 相互使用广播唤起 (鸡肋)</li>
<li>和手机商合作 (最高效)</li>
<li>设置 service 等级，priority (鸡肋)</li>
<li>onStartCommand方法，返回 START_STICKY，内存充足的时候会重启 (鸡肋)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity知识梳理]]></title>
      <url>/2018/09/16/Activity%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="Activity知识梳理"><a href="#Activity知识梳理" class="headerlink" title="Activity知识梳理"></a>Activity知识梳理</h1><h2 id="1-Activity生命周期"><a href="#1-Activity生命周期" class="headerlink" title="1.  Activity生命周期"></a>1.  Activity生命周期</h2><p>大部分Copy总结自<a href="https://www.cnblogs.com/lwbqqyumidi/p/3769113.html" target="_blank" rel="external">这个博客</a>和<a href="https://developer.android.com/reference/android/app/Activity" target="_blank" rel="external">官方</a></p>
<p>Activity是由Activity栈进管理，当启动一个新的Activity后，此Activity将被加入到Activity栈顶并处于运行状态，之前的Activity在栈中位于此Activity底部并且不会出现在前台除非新Activity退出。Acitivity一般意义上有四种状态：</p>
<ol>
<li>当Activity位于栈顶时，此时正好处于屏幕最前方，此时处于<code>运行状态</code>；</li>
<li>当Activity失去了焦点但仍然对用于可见<code>（如栈顶的Activity是透明的或者栈顶Activity并不是铺满整个手机屏幕）</code>，此时处于<code>暂停状态</code>。这个状态的Activity仍然存活，当系统的内存极低的时候它会被杀死。</li>
<li>当Activity被其他Activity<code>完全遮挡</code>，此时此Activity对用户不可见，此时处于<code>停止状态</code>。这个时候它仍然保留着所有的状态和成员信息，然而，它对用户来说<code>不再可见</code>，所以它的窗口被隐藏，当需要在其他地方使用内存时，它常常被系统杀死。</li>
<li>当Activity由于人为或系统原因（如低内存等）被销毁，此时处于<code>销毁状态</code>;</li>
</ol>
<h4 id="官方图"><a href="#官方图" class="headerlink" title="官方图"></a>官方图</h4><p><img src="http://p97o4wfou.bkt.clouddn.com/2018091315368294235616.png" alt="2018091315368294235616.png"></p>
<p>图中需要注意一下几点：</p>
<p>1.Activity实例是由系统自动创建，并在不同的状态期间回调相应的方法。一个最简单的完整的Activity生命周期会按照如下顺序回调：onCreate -&gt; onStart -&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestroy。称之为<code>entire lifetime</code>。</p>
<p>2.当执行onStart回调方法时，Activity开始被用户所见（也就是说，onCreate时用户是看不到此Activity的，那用户看到的是哪个？当然是此Activity之前的那个Activity），一直到onStop之前，此阶段Activity都是被用户可见，称之为<code>visible lifetime</code>。</p>
<p>3.当执行到onResume回调方法时，Activity可以响应用户交互，一直到onPause方法之前，此阶段Activity称之为<code>foreground lifetime</code>。</p>
<h3 id="示例与QA"><a href="#示例与QA" class="headerlink" title="示例与QA"></a>示例与QA</h3><p>假设有两个Activity，A和B。</p>
<h4 id="情况一-AB都不是透明的"><a href="#情况一-AB都不是透明的" class="headerlink" title="情况一 AB都不是透明的"></a>情况一 AB都不是透明的</h4><p>启动A，开始时，A被实例化，执行的回调有A:onCreate -&gt; A:onStart -&gt; A:onResume。</p>
<p>当用户点击A中按钮来到B时，假设B全部遮挡住了A，将依次执行A:onPause -&gt; B:onCreate -&gt; B:onStart -&gt; B:onResume -&gt; A:onStop。<br>此时如果点击Back键，将依次执行B:onPause -&gt; A:onRestart -&gt; A:onStart -&gt; A:onResume -&gt; B:onStop -&gt; B:onDestroy。</p>
<h4 id="情况二-B不是透明的"><a href="#情况二-B不是透明的" class="headerlink" title="情况二 B不是透明的"></a>情况二 B不是透明的</h4><p>启动A，开始时，A被实例化，执行的回调有A:onCreate -&gt; A:onStart -&gt; A:onResume。<br>当用户点击A中按钮来到B时，，将依次执行A:onPause -&gt; B:onCreate -&gt; B:onStart -&gt; B:onResume 。<br>此时如果点击Back键，将依次执行B:onPause -&gt; A:onResume -&gt; B:onStop -&gt; B:onDestroy。</p>
<h4 id="情况三-在A已经位于栈顶的时候弹出Dialog"><a href="#情况三-在A已经位于栈顶的时候弹出Dialog" class="headerlink" title="情况三 在A已经位于栈顶的时候弹出Dialog"></a>情况三 在A已经位于栈顶的时候弹出Dialog</h4><ol>
<li>启动Dialog的主题是默认的。<br>启动A，A被实例化，执行的回调有A:onCreate -&gt; A:onStart -&gt; A:onResume。当在A是中弹出Dialog时，A的生命周期不会有任何变化。</li>
<li>启动Dialog的主题是Activity的。 待测</li>
</ol>
<h4 id="情况四-在A已经位于栈顶的时候弹出PopWindow"><a href="#情况四-在A已经位于栈顶的时候弹出PopWindow" class="headerlink" title="情况四 在A已经位于栈顶的时候弹出PopWindow"></a>情况四 在A已经位于栈顶的时候弹出PopWindow</h4><p>没任何影响</p>
<h4 id="情况五-横竖屏切换时候的生命周期"><a href="#情况五-横竖屏切换时候的生命周期" class="headerlink" title="情况五 横竖屏切换时候的生命周期"></a>情况五 横竖屏切换时候的生命周期</h4><p><img src="http://p97o4wfou.bkt.clouddn.com//20180915205621.png" alt=""><br>此处必须设置<code>screenSize</code>的原文在<a href="https://developer.android.com/guide/topics/resources/runtime-changes?hl=zh-cn" target="_blank" rel="external">这里</a></p>
<h4 id="Q-onSaveInstanceState何时会调用？"><a href="#Q-onSaveInstanceState何时会调用？" class="headerlink" title="Q:onSaveInstanceState何时会调用？"></a>Q:onSaveInstanceState何时会调用？</h4><p>只有在Activity异常终止的时候才会调用，也可以说是Activity即将被销毁并且有机会重新显示的情况下才会调用。</p>
<h5 id="会触发的情况"><a href="#会触发的情况" class="headerlink" title="会触发的情况"></a>会触发的情况</h5><ul>
<li>Activity启动一个新的Activity的时候</li>
<li>Home键</li>
<li>Menu键</li>
<li>锁屏</li>
<li>用户旋转屏幕(<code>API&gt;13且没有设置orientation|screenSize</code>)。</li>
</ul>
<h5 id="不会触发的情况"><a href="#不会触发的情况" class="headerlink" title="不会触发的情况"></a>不会触发的情况</h5><ul>
<li>用户按Back键不会触发，</li>
</ul>
<p><code>onRestoreInstanceState</code>不一定会和<code>onSaveInstanceState</code>成对出现。</p>
<h4 id="Q-如何避免配置改变时Activity重建？"><a href="#Q-如何避免配置改变时Activity重建？" class="headerlink" title="Q:如何避免配置改变时Activity重建？"></a>Q:如何避免配置改变时Activity重建？</h4><ul>
<li>API&lt;13设置configChanges=”orientation”或configChanges=”orientation|keyboardHidden”</li>
<li>API&gt;13设置configChanges=”orientation|screenSize”</li>
</ul>
<h4 id="Q-优先级低的Activity在内存不足被回收后怎样做可以恢复到销毁前状态？"><a href="#Q-优先级低的Activity在内存不足被回收后怎样做可以恢复到销毁前状态？" class="headerlink" title="Q:优先级低的Activity在内存不足被回收后怎样做可以恢复到销毁前状态？"></a>Q:优先级低的Activity在内存不足被回收后怎样做可以恢复到销毁前状态？</h4><p>A: Activity被回收后可以在onCreate中的Bundle中判断是否有值来恢复数据。也可以在onRestoreInstanceState中恢复。</p>
<h4 id="Q-说下Activity的四种启动模式？"><a href="#Q-说下Activity的四种启动模式？" class="headerlink" title="Q:说下Activity的四种启动模式？"></a>Q:说下Activity的四种启动模式？</h4><p>(adb shell dumpsys activity 可以查看栈中的Activity)</p>
<h4 id="Q-谈谈singleTop和singleTask的区别以及应用场景"><a href="#Q-谈谈singleTop和singleTask的区别以及应用场景" class="headerlink" title="Q:谈谈singleTop和singleTask的区别以及应用场景"></a>Q:谈谈singleTop和singleTask的区别以及应用场景</h4><h5 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h5><ul>
<li>处理通知</li>
</ul>
<h5 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h5><ul>
<li>浏览器</li>
<li>微信小程序</li>
</ul>
<h4 id="Q-onNewIntent-调用时机？"><a href="#Q-onNewIntent-调用时机？" class="headerlink" title="Q:onNewIntent()调用时机？"></a>Q:onNewIntent()调用时机？</h4><ul>
<li>启动一个SingleTop且位于栈顶的Activity的时候</li>
<li>启动一个SingleTask且位于栈内的Activity的时候</li>
</ul>
<h4 id="Q-了解哪些Activity启动模式的标记位？"><a href="#Q-了解哪些Activity启动模式的标记位？" class="headerlink" title="Q:了解哪些Activity启动模式的标记位？"></a>Q:了解哪些Activity启动模式的标记位？</h4><h5 id="设定Activity启动模式的标记位"><a href="#设定Activity启动模式的标记位" class="headerlink" title="设定Activity启动模式的标记位"></a>设定Activity启动模式的标记位</h5><ul>
<li><a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_SINGLE_TOP" target="_blank" rel="external">FLAG_ACTIVITY_SINGLE_TOP</a></li>
<li><a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK" target="_blank" rel="external">FLAG_ACTIVITY_NEW_TASK</a></li>
</ul>
<h5 id="设定Activity运行状态的标记位"><a href="#设定Activity运行状态的标记位" class="headerlink" title="设定Activity运行状态的标记位"></a>设定Activity运行状态的标记位</h5><ul>
<li><a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP" target="_blank" rel="external">FLAG_ACTIVITY_CLEAR_TOP</a></li>
</ul>
<h4 id="Q-如何启动其他应用的Activity？"><a href="#Q-如何启动其他应用的Activity？" class="headerlink" title="Q:如何启动其他应用的Activity？"></a>Q:如何启动其他应用的Activity？</h4><p>用隐式意图启动Activity</p>
<h4 id="Q-Activity的启动过程？"><a href="#Q-Activity的启动过程？" class="headerlink" title="Q:Activity的启动过程？"></a>Q:Activity的启动过程？</h4><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://developer.android.com/guide/components/tasks-and-back-stack" target="_blank" rel="external">https://developer.android.com/guide/components/tasks-and-back-stack</a></li>
<li><a href="https://developer.android.com/guide/topics/manifest/activity-element" target="_blank" rel="external">https://developer.android.com/guide/topics/manifest/activity-element</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Activity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中图片大小知识总结]]></title>
      <url>/2018/09/06/Android%E4%B8%AD%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="Android中屏幕密度的相关概念"><a href="#Android中屏幕密度的相关概念" class="headerlink" title="Android中屏幕密度的相关概念"></a>Android中屏幕密度的相关概念</h3><ul>
<li><p><strong>density</strong>：The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5”x2” screen), providing the baseline of the system’s display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.<br>This value does not exactly follow the real screen size (as given by xdpi and ydpi, but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8”, 1.3”, etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5”x2” then the density would be increased (probably to 1.5).</p>
</li>
<li><p><strong>densityDpi</strong>：The screen density expressed as dots-per-inch.</p>
</li>
</ul>
<p>简单来说，可以理解为 density 的数值是 1dp=density  px；densityDpi 是屏幕每英寸对应多少个点（不是像素点），在 DisplayMetrics 当中，这两个的关系是线性的：</p>
<table>
<thead>
<tr>
<th><strong>density</strong></th>
<th style="text-align:center">1</th>
<th style="text-align:center">1.5</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">3.5</th>
<th style="text-align:center">4</th>
</tr>
</thead>
<tbody>
<tr>
<td>densityDpi</td>
<td style="text-align:center">160</td>
<td style="text-align:center">240</td>
<td style="text-align:center">320</td>
<td style="text-align:center">480</td>
<td style="text-align:center">560</td>
<td style="text-align:center">640</td>
</tr>
</tbody>
</table>
<h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><ol>
<li>加载一张640 * 427  310KB的png图片，图片放drawable-hdpi目录下。<br>模拟器参数<br>density: 2.625<br>densityDpi: 420<br>byteCount: 3346560<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bitmap qingye = BitmapFactory.decodeResource(getResources(), R.drawable.friend_small);</div><div class="line">Log.e(TAG, &quot;getByteCount= &quot; + qingye.getByteCount());</div></pre></td></tr></table></figure>
</li>
</ol>
<p>打印日志，<code>getByteCount= 3346560</code>约等于3M</p>
<ol>
<li>查看<code>getByteCount</code>方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public final int getByteCount() &#123;</div><div class="line">    if (mRecycled) &#123;</div><div class="line">        Log.w(TAG, &quot;Called getByteCount() on a recycle()&apos;d bitmap! &quot;</div><div class="line">  + &quot;This is undefined behavior!&quot;);</div><div class="line"> return 0;</div><div class="line">  &#125;</div><div class="line">    // int result permits bitmaps up to 46,340 x 46,340</div><div class="line">  return getRowBytes() * getHeight(); &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看出总大小和<code>getRowBytes()</code>以及图片的高度有关<br>进而查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public final int getRowBytes() &#123;</div><div class="line">    if (mRecycled) &#123;</div><div class="line">        Log.w(TAG, &quot;Called getRowBytes() on a recycle()&apos;d bitmap! This is undefined behavior!&quot;);</div><div class="line">  &#125;</div><div class="line">    return nativeRowBytes(mNativePtr); &#125;</div></pre></td></tr></table></figure></p>
<p>发现这是一个naive方法<br><code>private static native int nativeRowBytes(long nativeBitmap);</code></p>
<p>在<code>SkBitmap.h</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/** Return the number of bytes between subsequent rows of the bitmap. */</div><div class="line">size_t rowBytes() const &#123; return fRowBytes; &#125;</div></pre></td></tr></table></figure></p>
<p>在<code>SkBitmap.cpp</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">size_t SkBitmap::ComputeRowBytes(Config c, int width) &#123; return SkColorTypeMinRowBytes(SkBitmapConfigToColorType(c), width); &#125;</div></pre></td></tr></table></figure></p>
<p>在<code>SkImageInfo.h</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">static int SkColorTypeBytesPerPixel(SkColorType ct) &#123;</div><div class="line">    static const uint8_t gSize[] = &#123;</div><div class="line">        0,  // Unknown</div><div class="line">        1,  // Alpha_8</div><div class="line">        2,  // RGB_565</div><div class="line">        2,  // ARGB_4444</div><div class="line">        4,  // RGBA_8888</div><div class="line">        4,  // BGRA_8888</div><div class="line">        1,  // kIndex_8</div><div class="line">    &#125;;</div><div class="line">    SK_COMPILE_ASSERT(SK_ARRAY_COUNT(gSize) == (size_t)(kLastEnum_SkColorType + 1),</div><div class="line">                      size_mismatch_with_SkColorType_enum);</div><div class="line"></div><div class="line">    SkASSERT((size_t)ct &lt; SK_ARRAY_COUNT(gSize));</div><div class="line">    return gSize[ct];</div><div class="line">&#125;</div><div class="line"></div><div class="line">static inline size_t SkColorTypeMinRowBytes(SkColorType ct, int width) &#123;</div><div class="line">    return width * SkColorTypeBytesPerPixel(ct);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到argb_8888格式的一个像素占用4个字节</p>
<ol>
<li>求得公式<br>公式= 图片长<em>宽</em>4，对吗？<br>640 * 427 * 4 = 1093120 不等于 3346560</li>
</ol>
<p>在<strong>BitmapFactory.java</strong>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeResourceStream</span><span class="params">(Resources res, TypedValue value,</span></span></div><div class="line"><span class="function"><span class="params">  InputStream is, Rect pad, Options opts)</span> </span>&#123;</div><div class="line">    validate(opts);</div><div class="line"> <span class="keyword">if</span> (opts == <span class="keyword">null</span>) &#123;</div><div class="line">        opts = <span class="keyword">new</span> Options();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (opts.inDensity == <span class="number">0</span> &amp;&amp; value != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> density = value.density;</div><div class="line"> <span class="keyword">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</div><div class="line">            opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (density != TypedValue.DENSITY_NONE) &#123;</div><div class="line">            opts.inDensity = density;<span class="comment">//这里density的值如果对应资源目录为hdpi的话，就是240</span></div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (opts.inTargetDensity == <span class="number">0</span> &amp;&amp; res != <span class="keyword">null</span>) &#123;</div><div class="line">        opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</div><div class="line"><span class="comment">//这个inTargetDensity是当前屏幕的densityDpi，我的模拟器是420</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> decodeStream(is, pad, opts); &#125;</div></pre></td></tr></table></figure></p>
<p>我们最应该关心的是什么呢？是 inDensity 和 inTargetDensity，这两个值与下面 cpp 文件里面的 density 和 targetDensity 相对应。重复一下，inDensity 就是原始资源的 density，inTargetDensity 就是屏幕的 density。</p>
<p>在<code>BitmapFactory.cpp</code>的<code>doDecode</code>方法中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">if (env - &gt; GetBooleanField(options, gOptions_scaledFieldID)) &#123;</div><div class="line">    const int density = env - &gt; GetIntField(options, gOptions_densityFieldID);</div><div class="line">    const int targetDensity = env - &gt; GetIntField(options, gOptions_targetDensityFieldID);</div><div class="line">    const int screenDensity = env - &gt; GetIntField(options, gOptions_screenDensityFieldID);</div><div class="line">    if (density != 0 &amp;&amp; targetDensity != 0 &amp;&amp; density != screenDensity) &#123;</div><div class="line">        scale = (float) targetDensity / density;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">//这里这个deodingBitmap就是解码出来的bitmap，大小是图片原始的大小</div><div class="line"> int scaledWidth = decodingBitmap.width();</div><div class="line"> int scaledHeight = decodingBitmap.height();</div><div class="line"></div><div class="line"> if (willScale &amp;&amp; decodeMode != SkImageDecoder::kDecodeBounds_Mode) &#123;</div><div class="line">     scaledWidth = int(scaledWidth * scale + 0.5 f);</div><div class="line">     scaledHeight = int(scaledHeight * scale + 0.5 f);</div><div class="line"> &#125;</div><div class="line">...</div><div class="line">if (willScale) &#123;</div><div class="line">    // This is weird so let me explain: we could use the scale parameter</div><div class="line">    // directly, but for historical reasons this is how the corresponding</div><div class="line">    // Dalvik code has always behaved. We simply recreate the behavior here.</div><div class="line">    // The result is slightly different from simply using scale because of</div><div class="line">    // the 0.5f rounding bias applied when computing the target image size</div><div class="line">    const float sx = scaledWidth / float(decodingBitmap.width());</div><div class="line">    const float sy = scaledHeight / float(decodingBitmap.height());</div><div class="line"></div><div class="line">    // TODO: avoid copying when scaled size equals decodingBitmap size</div><div class="line">    SkColorType colorType = colorTypeForScaledOutput(decodingBitmap.colorType());</div><div class="line">    // FIXME: If the alphaType is kUnpremul and the image has alpha, the</div><div class="line">    // colors may not be correct, since Skia does not yet support drawing</div><div class="line">    // to/from unpremultiplied bitmaps.</div><div class="line">    outputBitmap - &gt; setInfo(SkImageInfo::Make(scaledWidth, scaledHeight,</div><div class="line">        colorType, decodingBitmap.alphaType()));</div><div class="line">    if (!outputBitmap - &gt; allocPixels(outputAllocator, NULL)) &#123;</div><div class="line">        return nullObjectReturn(&quot;allocation failed for scaled bitmap&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // If outputBitmap&apos;s pixels are newly allocated by Java, there is no need</div><div class="line">    // to erase to 0, since the pixels were initialized to 0.</div><div class="line">    if (outputAllocator != &amp; javaAllocator) &#123;</div><div class="line">        outputBitmap - &gt; eraseColor(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SkPaint paint;</div><div class="line">    paint.setFilterLevel(SkPaint::kLow_FilterLevel);</div><div class="line"></div><div class="line">    SkCanvas canvas( * outputBitmap);</div><div class="line">    canvas.scale(sx, sy);</div><div class="line">    canvas.drawBitmap(decodingBitmap, 0.0 f, 0.0 f, &amp; paint);</div><div class="line">&#125; else &#123;</div><div class="line">    outputBitmap - &gt; swap(decodingBitmap);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>scale = (float) targetDensity / density;<br>在这个例子中，scale = 420 / 240 = 1.75<br>所以byteCount = 640 * 427 * 1.75 * 1.75 * 4 = 3347680 约等于3346560<br>因为scaledWidth还有0.5f的精度，所以加上精度<br>640 * 1.75 + 0.5 = 1120<br>427 * 1.75 + 0.5 = 747<br>1120 * 747 * 4 = <strong>3346560</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Android加载一张图片的大小与下列情况有关</p>
<ul>
<li>色彩格式，如果是 ARGB8888 那么就是一个像素4个字节，如果是 RGB565 那就是2个字节</li>
<li>原始文件存放的资源目录hdpi还是其他</li>
<li>目标屏幕的密度</li>
</ul>
<p>总结转载自<a href="https://juejin.im/entry/56f23e001532bc00507e1c64" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin学习之类的继承]]></title>
      <url>/2018/06/23/Kotlin%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<h3 id="1-Kotlin使用了-来代替Jave中的extend和implements。Kotlin和java一样，单继承多接口。"><a href="#1-Kotlin使用了-来代替Jave中的extend和implements。Kotlin和java一样，单继承多接口。" class="headerlink" title="1. Kotlin使用了:来代替Jave中的extend和implements。Kotlin和java一样，单继承多接口。"></a>1. Kotlin使用了<code>:</code>来代替Jave中的<code>extend</code>和<code>implements</code>。Kotlin和java一样，单继承多接口。</h3><h3 id="2-Kotlin可以在接口中添加带默认实现的方法"><a href="#2-Kotlin可以在接口中添加带默认实现的方法" class="headerlink" title="2. Kotlin可以在接口中添加带默认实现的方法"></a>2. Kotlin可以在接口中添加带默认实现的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface Clickable &#123;</div><div class="line">    fun click()</div><div class="line">    fun showOff() = println(&quot;I&apos;m clickable!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现这个接口后可以重写出可以直接省略</p>
<h3 id="3-调用继承自接口方法的实现"><a href="#3-调用继承自接口方法的实现" class="headerlink" title="3. 调用继承自接口方法的实现"></a>3. 调用继承自接口方法的实现</h3><p>如果有两个接口有一个共同的方法，有一个类同时实现了这两个接口。那么这个方法默认不会调用任何接口的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface Focusable &#123;</div><div class="line">    fun setFocus(b: Boolean) = println(&quot;I $&#123;if (b) &quot;got&quot; else &quot;lose&quot;&#125; focus.&quot;)</div><div class="line">    fun showOff() = println(&quot;I&apos;m foucusable!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JetPack之lifecycles]]></title>
      <url>/2018/06/19/JetPack%E4%B9%8Blifecycles/</url>
      <content type="html"><![CDATA[<p> 一般写组件的时候，例如一个获取位置的小组件，我们会这么写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class MyActivity extends AppCompatActivity &#123;</div><div class="line">    private MyLocationListener myLocationListener;   public void onCreate(...) &#123;</div><div class="line">        myLocationListener = new MyLocationListener(this, location -&gt; &#123;</div><div class="line">            // update UI</div><div class="line">  &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">  Util.checkUserStatus(result -&gt; &#123;</div><div class="line">            // what if this callback is invoked AFTER activity is stopped?</div><div class="line">  if (result) &#123;</div><div class="line">                myLocationListener.start();</div><div class="line">  &#125;</div><div class="line">        &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onStop() &#123;</div><div class="line">        super.onStop();</div><div class="line">  myLocationListener.stop();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们会在<code>onStart</code>或<code>onResume</code>的时候注入监听，在<code>onPause</code>或<code>onDestory</code>的时候移除监听。如果我们有很多这样的小组件，维护起来很是麻烦。而且如果要在<br><code>onStart</code>的时候做配置回调，那么有可能<code>onStop</code>比<code>onStart</code>会提前结束。这样就更麻烦了。</p>
<h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><p>Lifecycle是一个持有其他组件(例如<code>activity</code>和<code>fragment</code>)的生命周期信息状态的一个类，它允许其他对象观察这个状态。</p>
<p>它有两个主要的成员和生命周期状态有联系。</p>
<ul>
<li><p><code>Event</code>。这个生命周期事件从<code>framework</code>和<code>Lifecycle</code>进行派发。这些事件对应<code>activity</code>和<code>fragment</code>中的生命周期回调。</p>
</li>
<li><p><code>State</code>。生命周期对象组件的当前状态。</p>
</li>
</ul>
<p><img src="http://p97o4wfou.bkt.clouddn.com//20180619154207.png" alt=""></p>
<p>一个类可以通过向其方法添加注解来监视组件的生命周期状态。然后，通过调用<code>Lifecycle</code>类的<code>addObserver()</code>方法来添加一个观察者。下面是示例代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MyObserver implements LifecycleObserver &#123;</div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</div><div class="line">    public void connectListener() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</div><div class="line">    public void disconnectListener() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">myLifecycleOwner.getLifecycle().addObserver(new MyObserver());</div></pre></td></tr></table></figure>
<p>在上面的示例中，<code>myLifecycleOwner</code>对象实现了<code>LifecycleOwner</code>接口。</p>
<h3 id="LifecycleOwner"><a href="#LifecycleOwner" class="headerlink" title="LifecycleOwner"></a>LifecycleOwner</h3><p>`Lifecycle``可以查看当前对象的生命周期。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if  (lifecycle.getCurrentState().isAtLeast(STARTED))  &#123; </div><div class="line"> // do something</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Fragment</code>和<code>Activitie</code>在<code>Support Library</code><strong>26.1.0</strong>之后就已经实现了<code>LifecycleOwner</code>接口。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Arch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的长按快捷方式实现]]></title>
      <url>/2018/06/15/Android%E4%B8%AD%E7%9A%84%E9%95%BF%E6%8C%89%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h4 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h4><blockquote>
<p> Android 7.1 (API level 25)以上才支持</p>
</blockquote>
<h3 id="1-三种类型"><a href="#1-三种类型" class="headerlink" title="1. 三种类型"></a>1. 三种类型</h3><ul>
<li>静态类型。这样实现的话当需要更新快捷方式的时候必须更新整个APP</li>
<li>动态类型。这样可以在APP运行的时候利用<code>ShortcutManager</code>进行添加、更新或移除</li>
<li>桌面类型。这种也是能在运行时添加，也是利用<code>ShortcutManager</code>进行操作。但是需要用户同意才行</li>
</ul>
<h3 id="2-静态快捷方式的使用"><a href="#2-静态快捷方式的使用" class="headerlink" title="2. 静态快捷方式的使用"></a>2. 静态快捷方式的使用</h3><h4 id="1-在AndroidManifest-xml中找到主Activity。即包含android-intent-action-MAIN和android-intent-category-LAUNCHER的。"><a href="#1-在AndroidManifest-xml中找到主Activity。即包含android-intent-action-MAIN和android-intent-category-LAUNCHER的。" class="headerlink" title="1. 在AndroidManifest.xml中找到主Activity。即包含android.intent.action.MAIN和android.intent.category.LAUNCHER的。"></a>1. 在<code>AndroidManifest.xml</code>中找到主<code>Activity</code>。即包含<code>android.intent.action.MAIN</code>和<code>android.intent.category.LAUNCHER</code>的。</h4><h4 id="2-添加-lt-meta-data-gt-节点"><a href="#2-添加-lt-meta-data-gt-节点" class="headerlink" title="2. 添加&lt;meta-data&gt;节点"></a>2. 添加<code>&lt;meta-data&gt;</code>节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  package=&quot;com.changqin.androidfuturejava&quot;&gt;   &lt;application  android:name=&quot;.App&quot;</div><div class="line">  android:allowBackup=&quot;true&quot;</div><div class="line">  android:icon=&quot;@mipmap/ic_launcher&quot;</div><div class="line">  android:label=&quot;@string/app_name&quot;</div><div class="line">  android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</div><div class="line">  android:supportsRtl=&quot;true&quot;</div><div class="line">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class="line"> &lt;activity android:name=&quot;.MainActivity&quot;&gt;</div><div class="line"> &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;   &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</div><div class="line"> &lt;/intent-filter&gt; &lt;meta-data android:name=&quot;android.app.shortcuts&quot;</div><div class="line">  android:resource=&quot;@xml/shortcuts&quot; /&gt;</div><div class="line"> &lt;/activity&gt; </div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<h4 id="3-创建res-xml-shortcuts-xml"><a href="#3-创建res-xml-shortcuts-xml" class="headerlink" title="3. 创建res/xml/shortcuts.xml"></a>3. 创建<code>res/xml/shortcuts.xml</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;shortcuts xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"> &lt;shortcut  android:shortcutId=&quot;compose&quot;</div><div class="line">  android:enabled=&quot;true&quot;</div><div class="line">  android:icon=&quot;@drawable/shortcuts_add&quot;</div><div class="line">  android:shortcutShortLabel=&quot;@string/test1&quot;</div><div class="line">  android:shortcutLongLabel=&quot;@string/test2&quot;</div><div class="line">  android:shortcutDisabledMessage=&quot;@string/test3&quot;&gt;</div><div class="line"> &lt;intent  android:action=&quot;android.intent.action.VIEW&quot;</div><div class="line">  android:targetPackage=&quot;com.changqin.androidfuturejava&quot;</div><div class="line">  android:targetClass=&quot;com.changqin.androidfuturejava.shortcut.ShortTestActivity&quot; /&gt;</div><div class="line">  &lt;!-- If your shortcut is associated with multiple intents, include them</div><div class="line"> here. The last intent in the list determines what the user sees when they launch this shortcut. --&gt;  &lt;categories android:name=&quot;android.shortcut.conversation&quot; /&gt;</div><div class="line"> &lt;/shortcut&gt;  </div><div class="line">&lt;!-- Specify more shortcuts here. --&gt; &lt;/shortcuts&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>shortcutShortLabel</code>指的是快捷方式的<code>简明短语</code>。</li>
<li><code>shortcutLongLabel</code>指的是<code>扩展短语</code>，如果有足够的空间，APP将显示这个值而不是<code>shortcutShortLabel</code>。</li>
<li><code>shortcutDisabledMessage</code>指的是当用户试图启动禁用的快捷方式时，APP中出现的消息。这个消息应该向用户解释为什么现在禁用了快捷方式。如果<code>android:enabled</code>是<code>true</code>，则该属性的值没有影响。</li>
<li><code>android:shortcutShortLabel</code>、<code>android:shortcutLongLabel</code>和<code>android:shortcutDisabledMessage</code>必须使用<code>@string/shortcut_short_label</code>格式</li>
</ul>
<p>正常显示的快捷方式<br><img src="http://p97o4wfou.bkt.clouddn.com//20180615144615.png" alt=""></p>
<h3 id="3-使用动态快捷方式"><a href="#3-使用动态快捷方式" class="headerlink" title="3. 使用动态快捷方式"></a>3. 使用动态快捷方式</h3><p>动态快捷方式应该为应用程序中特定的、上下文敏感的操作提供<code>actions</code>。这些<code>actions</code>可以在应用程序的使用之间进行更改，甚至在应用程序运行时也可以进行更改。<br><code>ShortcutManager</code>允许我们在动态快捷方式中做以下操作</p>
<ul>
<li><strong>添加</strong>: 使用<code>setDynamicShortcuts()</code>来重新添加整个快捷方列表</li>
<li><strong>更新</strong> 使用<code>updateShortcuts()</code>来更新</li>
<li><strong>移除</strong> 使用<code>removeDynamicShortcuts()</code>来移除一组，或者使用<code>removeAllDynamicShortcuts()</code>来移除所有的快捷方式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@TargetApi(Build.VERSION_CODES.N_MR1)</div><div class="line">public void addShort(View view) &#123;</div><div class="line">    ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);</div><div class="line">  ShortcutInfo shortcut = new ShortcutInfo.Builder(this, &quot;id1&quot;)</div><div class="line">            .setShortLabel(&quot;Web site&quot;)</div><div class="line">            .setLongLabel(&quot;Open the web site&quot;)</div><div class="line">            .setIcon(Icon.createWithResource(this, R.drawable.ic_add_white_24dp))</div><div class="line">            .setIntent(new Intent(Intent.ACTION_VIEW,</div><div class="line">  Uri.parse(&quot;https://changqin.win&quot;)))</div><div class="line">            .build();    shortcutManager.setDynamicShortcuts(Arrays.asList(shortcut));    Toast.makeText(this,&quot;add success&quot;,Toast.LENGTH_SHORT).show(); &#125;</div></pre></td></tr></table></figure>
<h3 id="4-使用桌面快捷方式"><a href="#4-使用桌面快捷方式" class="headerlink" title="4. 使用桌面快捷方式"></a>4. 使用桌面快捷方式</h3><p>在Android 8.0 (API level 26)或以上，我们可以创建桌面快捷方式。不同于前两者，桌面快捷方式允许有自己独立的icon。</p>
<p>创建步骤</p>
<ol>
<li>使用<code>isRequestPinShortcutSupported()</code>来验证设备是否支持在APP上创建快捷方式。</li>
<li>创建<code>ShortcutInfo</code>对象。<br> a. 如果对象已存在，只需创建包含<code>ID</code>的对象即可。系统自动查找与快捷方式相关的所有信息。<br> b. 如果是一个新的对象，那么创建的时候必须包含<code>ID</code>、<code>intent</code>和<code>short label</code></li>
<li>调用<code>requestPinShortcut()</code>请求添加桌面快捷方式。在此期间，可以通过<code>PendingIntent</code>对象来监听快捷方式是否添加成功。ps: 如果用户不允许添加，是不会收到回调的。当快捷方式添加成功后，可以用<code>updateShortcuts()</code>来更新。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@RequiresApi(api = Build.VERSION_CODES.O)</div><div class="line">public void addDesktopShort(View view) &#123;</div><div class="line">    if (mShortcutManager.isRequestPinShortcutSupported()) &#123;</div><div class="line">        // Assumes there&apos;s already a shortcut with the ID &quot;my-shortcut&quot;.</div><div class="line"> // The shortcut must be enabled.  ShortcutInfo pinShortcutInfo =</div><div class="line">                new ShortcutInfo.Builder(this, &quot;my-shortcut&quot;)</div><div class="line">                        .build();    // Create the PendingIntent object only if your app needs to be notified</div><div class="line"> // that the user allowed the shortcut to be pinned. Note that, if the // pinning operation fails, your app isn&apos;t notified. We assume here that the // app has implemented a method called createShortcutResultIntent() that // returns a broadcast intent.  Intent pinnedShortcutCallbackIntent =</div><div class="line">                mShortcutManager.createShortcutResultIntent(pinShortcutInfo);    // Configure the intent so that your app&apos;s broadcast receiver gets</div><div class="line"> // the callback successfully.  PendingIntent successCallback = PendingIntent.getBroadcast(this, 0,</div><div class="line">  pinnedShortcutCallbackIntent, 0);    mShortcutManager.requestPinShortcut(pinShortcutInfo,</div><div class="line">  successCallback.getIntentSender());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com//20180615153135.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android 快捷方式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的MultiDex]]></title>
      <url>/2018/06/12/Android%E4%B8%AD%E7%9A%84MultiDex/</url>
      <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>在安卓开发中，当开发到一定的版本，apk有可能会遇到64K方法问题。指的是Android中的可执行文件.dex中的Java方法引用超过65536。</p>
<h3 id="2-使用MultiDex解决64K限制问题"><a href="#2-使用MultiDex解决64K限制问题" class="headerlink" title="2. 使用MultiDex解决64K限制问题"></a>2. 使用MultiDex解决64K限制问题</h3><ul>
<li><p>Android5.0之前，系统使用的是Dalvik虚拟机来执行应用。默认情况下，Dalvik为每个apk只生成一个classes.dex文件，为了规避单个.dex文件方法个数超过64K的问题，我们需要拆分这个单一的dex文件，拆分后可能出现classes.dex,classes2.dex等多个.dex文件。应用启动的时候会先加载classes.dex文件，我们称之为主dex文件。</p>
</li>
<li><p>Android5.0之后，Android开始使用ART虚拟机来代替Dalvik虚拟机，ART天然支持从apk文件中加载多个.dex文件，在应用安装期间，它会执行一个预编译操作。将所有的dex编译成一个单一的.oat文件，在应用运行是去加载这个.oat文件，而不是一个一个的加载.dex文件。</p>
</li>
</ul>
<h3 id="3-规避方法"><a href="#3-规避方法" class="headerlink" title="3. 规避方法"></a>3. 规避方法</h3><ul>
<li>检查引用的依赖</li>
<li>使用Proguard，移除没有使用的类、字段、方法和属性</li>
</ul>
<h3 id="4-配置"><a href="#4-配置" class="headerlink" title="4. 配置"></a>4. 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  defaultConfig &#123;</div><div class="line">        multiDexEnabled true</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">  implementation &apos;com.android.support:multidex:1.0.3&apos; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引入MultiDexApplication</p>
<p>三种方法</p>
<ul>
<li>配置当前项目的清单文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line">  android:name=&quot;android.support.multidex.MultiDexApplication&quot;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>当前的Application继承MultiDexApplication</p>
</li>
<li><p>在attachBaseContext方法中初始化MultiDex</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override protected void attachBaseContext(Context base) &#123;</div><div class="line">    super.attachBaseContext(base);</div><div class="line">  MultiDex.install(this); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-局限性"><a href="#5-局限性" class="headerlink" title="5. 局限性"></a>5. 局限性</h3><p>前面我们说过, MultiDex Support Library只是一个不得已而为之的方案,它本身并不是完美的,因此将它集成到项目中,需要经过完整的测试才能上线,可能会出现应用性能下降等问题, MultiDex Support Library的局限性如下。</p>
<ul>
<li><p>应用首次启动时 Dalvik虚拟机会对所有的.dex文件执行 dexopt操作,生成ODEX文件,这个过程很复杂且非常耗时,如果应用的从dex文件太大,可能会导致出现ANR。</p>
</li>
<li><p>在 Android4.0( API level14)之前的系统上,由于 Dalvik linearalloc的bug(见Isse225861),使用 Multidex的应用可能启动失败。如果你的应用还支持低于 API level14的系统版本时,那么在上线之前需要针在这些低版本系统经过严格充分的测试,否则用户可能会在启动你的APP时出现错误。理论上,使用 Proguard的压缩功能可以减少或者消除这些潜在的问题。当然,目前低于 Android4.0的系统使用量已经很少了,建议直接将应用的 minSdkversion设置为14,这样问题也就不存在了。</p>
</li>
<li><p>由于 Dalvik的线性内存分配器 linearalloc的限制(见Isue7803532),使用 MultiDex的应用在出现很大的内存分配时,可能会导致应用崩溃。根本原因是 Dalvik虚拟机用来加载类的堆内存大小被硬编码了, Android2.3以下是5M, Android2.3是8M,这个内存<br>分配的限制在 Android4.0( API level14)已经增加到了16M,但是在 Android5.0(APIlevel21)之前的系统上运行的APP,还是有可能会超出这个限制,从而导致崩溃。当然 Android5.0开始由于使用了ART虚拟机,因此不再存在 linear Alloc的问题。当引入 Multidex机,时,必然会存在主dex文件和从dex文件,应用启动所需要的类必须放到主dex文件中，否则会出现NoClassDefFoundError的错误。Android构建工具自动帮我们]处理了Android系统相关的依赖,但对又于应用自己引入的第三方函数库,如果还依赖其他的一些东西,例如通过反射调用Java类,或者调用NDK层代码的Java方法,这些可能就不会被放到主dex文件中,如果在应用启动时需要用到,那么必然出现问题。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MultiDex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android原生的夜间模式]]></title>
      <url>/2018/06/08/Android%E5%8E%9F%E7%94%9F%E7%9A%84%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的简单国际化]]></title>
      <url>/2018/06/08/Android%E7%9A%84%E7%AE%80%E5%8D%95%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="1-新建资源文件夹"><a href="#1-新建资源文件夹" class="headerlink" title="1. 新建资源文件夹"></a>1. 新建资源文件夹</h3><p><img src="http://p97o4wfou.bkt.clouddn.com/20180608152844733060654.png" alt="20180608152844733060654.png"></p>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180608152844739744143.png" alt="20180608152844739744143.png"></p>
<h3 id="2-拷贝strings-xml到新的目录下"><a href="#2-拷贝strings-xml到新的目录下" class="headerlink" title="2. 拷贝strings.xml到新的目录下"></a>2. 拷贝<code>strings.xml</code>到新的目录下</h3><h3 id="3-编写不同的语言文件"><a href="#3-编写不同的语言文件" class="headerlink" title="3. 编写不同的语言文件"></a>3. 编写不同的语言文件</h3><h3 id="4-在Application中进行切换"><a href="#4-在Application中进行切换" class="headerlink" title="4. 在Application中进行切换"></a>4. 在<code>Application</code>中进行切换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleLanguage</span><span class="params">()</span> </span>&#123;</div><div class="line">    Resources resources = get().getResources();</div><div class="line">  Configuration configuration = resources.getConfiguration();</div><div class="line">  configuration.locale = Locale.getDefault();</div><div class="line">  resources.updateConfiguration(configuration, resources.getDisplayMetrics());<span class="comment">//更新配置 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> international </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由Dialog设置背景引发的思考]]></title>
      <url>/2018/05/30/%E7%94%B1Dialog%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>一般写Dialog的时候，都会设置宽度为屏幕的宽度<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Window window = getDialog().getWindow(); WindowManager.LayoutParams params = window.getAttributes();</div><div class="line">params.gravity = Gravity.BOTTOM;</div><div class="line">params.width = WindowManager.LayoutParams.MATCH_PARENT; window.setAttributes(params);</div></pre></td></tr></table></figure></p>
<p>但是有时候会出现一些奇怪的问题</p>
<p>layout</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout</div><div class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;wrap_content&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;&gt;   &lt;LinearLayout  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;wrap_content&quot;</div><div class="line">  android:orientation=&quot;vertical&quot;&gt;</div><div class="line"> &lt;TextView  android:id=&quot;@+id/menu1&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;50dp&quot;</div><div class="line">  android:gravity=&quot;center&quot;</div><div class="line">  android:padding=&quot;15dp&quot;</div><div class="line">  android:text=&quot;重新登录&quot;</div><div class="line">  android:textColor=&quot;#fa0000&quot;</div><div class="line">  android:background=&quot;@drawable/seletcor_top_bg&quot;</div><div class="line">  /&gt;</div><div class="line"> &lt;View  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;1dp&quot;</div><div class="line">  android:background=&quot;#f5f4f4&quot;/&gt;</div><div class="line"> &lt;TextView  android:id=&quot;@+id/menu2&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;50dp&quot;</div><div class="line">  android:gravity=&quot;center&quot;</div><div class="line">  android:padding=&quot;15dp&quot;</div><div class="line">  android:text=&quot;退出&quot;</div><div class="line">  android:textColor=&quot;#2763b6&quot;</div><div class="line">  android:background=&quot;@drawable/seletcor_bottom_bg&quot;</div><div class="line">  /&gt;</div><div class="line"> &lt;/LinearLayout&gt;   &lt;Button  android:id=&quot;@+id/btn_cancel&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot;</div><div class="line">  android:layout_height=&quot;50dp&quot;</div><div class="line">  android:layout_marginTop=&quot;15dp&quot;</div><div class="line">  android:background=&quot;@drawable/seletcor_round_bg&quot;</div><div class="line">  android:text=&quot;取消&quot;</div><div class="line">  /&gt; &lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>按照上面的代码写的时候，效果是这样的。</p>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180530152766370374459.png" alt="20180530152766370374459.png"></p>
<p>这不是我们想要的效果。</p>
<p>当我们多设置一步 <strong>A</strong><br><code>window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));</code><br>它会去除所有的<code>padding</code><br>效果是这样的。</p>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180530152766382094867.png" alt="20180530152766382094867.png"></p>
<p>这个也不是我们想要的效果</p>
<p>当我们多设置一步 <strong>B</strong><br><code>window.getDecorView().setBackground(new ColorDrawable(Color.TRANSPARENT));</code><br>效果是这样的。</p>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180530152766397087558.png" alt="20180530152766397087558.png"></p>
<p>看起来符合我们的要求，但是这个边距实际上是系统提供的，我们不能自己设置。</p>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul>
<li><code>window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));</code>为什么会去除<code>padding</code>?</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable drawable)</span></span>;</div></pre></td></tr></table></figure>
<p>这个方法是个抽象方法，它的唯一实现是<code>PhoneWindow</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setBackgroundDrawable</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (drawable != mBackgroundDrawable || mBackgroundResource != <span class="number">0</span>) &#123;</div><div class="line">        mBackgroundResource = <span class="number">0</span>;</div><div class="line">  mBackgroundDrawable = drawable;</div><div class="line"> <span class="keyword">if</span> (mDecor != <span class="keyword">null</span>) &#123;</div><div class="line">            mDecor.setWindowBackground(drawable);</div><div class="line">  &#125;</div><div class="line">        <span class="keyword">if</span> (mBackgroundFallbackResource != <span class="number">0</span>) &#123;</div><div class="line">            mDecor.setBackgroundFallback(drawable != <span class="keyword">null</span> ? <span class="number">0</span> : mBackgroundFallbackResource);</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里主要看<code>mDecor.setWindowBackground(drawable);</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWindowBackground</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (getBackground() != drawable) &#123;</div><div class="line">        setBackgroundDrawable(drawable);</div><div class="line"> <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">            mResizingBackgroundDrawable = enforceNonTranslucentBackground(drawable,</div><div class="line">  mWindow.isTranslucent() || mWindow.isShowingWallpaper());</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mResizingBackgroundDrawable = getResizingBackgroundDrawable(</div><div class="line">                    getContext(), <span class="number">0</span>, mWindow.mBackgroundFallbackResource,</div><div class="line">  mWindow.isTranslucent() || mWindow.isShowingWallpaper());</div><div class="line">  &#125;</div><div class="line">        <span class="keyword">if</span> (mResizingBackgroundDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">            mResizingBackgroundDrawable.getPadding(mBackgroundPadding);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mBackgroundPadding.setEmpty();</div><div class="line">  &#125;</div><div class="line">        drawableChanged();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>setBackgroundDrawable(drawable);</code>方法会进入<code>View</code>的<code>setBackgroundDrawable</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (background != <span class="keyword">null</span>) &#123;</div><div class="line">    Rect padding = sThreadLocal.get();</div><div class="line"> <span class="keyword">if</span> (padding == <span class="keyword">null</span>) &#123;</div><div class="line">        padding = <span class="keyword">new</span> Rect();</div><div class="line">  sThreadLocal.set(padding);</div><div class="line">  &#125;</div><div class="line">    resetResolvedDrawablesInternal();</div><div class="line">  background.setLayoutDirection(getLayoutDirection());</div><div class="line"> <span class="keyword">if</span> (background.getPadding(padding)) &#123;</div><div class="line">        resetResolvedPaddingInternal();</div><div class="line"> <span class="keyword">switch</span> (background.getLayoutDirection()) &#123;</div><div class="line">            <span class="keyword">case</span> LAYOUT_DIRECTION_RTL:</div><div class="line">                mUserPaddingLeftInitial = padding.right;</div><div class="line">  mUserPaddingRightInitial = padding.left;</div><div class="line">  internalSetPadding(padding.right, padding.top, padding.left, padding.bottom);</div><div class="line"> <span class="keyword">break</span>; <span class="keyword">case</span> LAYOUT_DIRECTION_LTR:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                mUserPaddingLeftInitial = padding.left;</div><div class="line">  mUserPaddingRightInitial = padding.right;</div><div class="line">  internalSetPadding(padding.left, padding.top, padding.right, padding.bottom);</div><div class="line">  &#125;</div><div class="line">        mLeftPaddingDefined = <span class="keyword">false</span>;</div><div class="line">  mRightPaddingDefined = <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>background.getPadding(padding)</code>这句话很有意思。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return in padding the insets suggested by this Drawable for placing * content inside the drawable's bounds. Positive values move toward the * center of the Drawable (set Rect.inset). * * <span class="doctag">@return</span> true if this drawable actually has a padding, else false. When false is returned,</span></div><div class="line"><span class="comment"> * the padding is always set to 0. */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getPadding</span><span class="params">(@NonNull Rect padding)</span> </span>&#123;</div><div class="line">    padding.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"> <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</div></pre></td></tr></table></figure>
<p>当它的参数有值的时候，返回的是true,当它返回false的时候，padding都会被设置为0。</p>
<p>因为我们传入的是<code>ColorDrawable</code>，它没有重写这个方法，所以它返回的永远是false。方法里面不执行。<br>回到<code>DecorView</code>的<code>setWindowBackground</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mResizingBackgroundDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">这句话会重置mBackgroundPadding为<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </div><div class="line">    mResizingBackgroundDrawable.getPadding(mBackgroundPadding); &#125; <span class="keyword">else</span> &#123;</div><div class="line">    mBackgroundPadding.setEmpty(); &#125;</div><div class="line">drawableChanged();</div></pre></td></tr></table></figure></p>
<p>而<code>drawableChanged</code>会重新设置<code>padding</code>，所以<code>window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));</code>会将默认的padding清0。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawableChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mChanging) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    setPadding(mFramePadding.left + mBackgroundPadding.left,</div><div class="line">  mFramePadding.top + mBackgroundPadding.top,</div><div class="line">  mFramePadding.right + mBackgroundPadding.right,</div><div class="line">  mFramePadding.bottom + mBackgroundPadding.bottom);</div><div class="line">  requestLayout();</div><div class="line">  invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>为什么<code>window.getDecorView().setBackground(new ColorDrawable(Color.TRANSPARENT));</code>会保留<code>padding</code>?</li>
</ul>
<p>也很好理解了。因为它实际上直接调用了<code>View</code>的<code>setBackgroundDrawable</code>方法。根据之前的逻辑，到了<code>if (background.getPadding(padding))</code>这一步它是不会重新设置<code>padding</code>的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当同时设置<code>View</code>的<code>padding</code>和<code>背景</code>的时候。调用顺序很重要。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析Android中的inflate]]></title>
      <url>/2018/05/30/%E6%B5%85%E6%9E%90Android%E4%B8%AD%E7%9A%84inflate/</url>
      <content type="html"><![CDATA[<p>部分转载自<a href="https://blog.csdn.net/yanbober/article/details/45970721" target="_blank" rel="external">这里</a></p>
<blockquote>
<p>LayoutInflater.from(context).inflate(layout, root,attachToRoot);</p>
</blockquote>
<p><code>LayoutInflater.inflate</code>一共有很多个重载。最终都会调用到以下这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span></span></div></pre></td></tr></table></figure></p>
<p>先看例子<br>textview_layout</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  android:layout_width=&quot;100dp&quot;</div><div class="line">  android:layout_height=&quot;40dp&quot;</div><div class="line">  android:text=&quot;Text Test&quot;</div><div class="line">  android:background=&quot;@color/colorAccent&quot;/&gt;</div></pre></td></tr></table></figure>
<p>textview_layout_parent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout</div><div class="line">  android:layout_height=&quot;wrap_content&quot;</div><div class="line">  android:layout_width=&quot;wrap_content&quot;</div><div class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;   &lt;TextView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  android:layout_width=&quot;100dp&quot;</div><div class="line">  android:layout_height=&quot;40dp&quot;</div><div class="line">  android:text=&quot;Text Test&quot;</div><div class="line">  android:background=&quot;@color/colorAccent&quot;/&gt;   &lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>activity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InflateAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> LayoutInflater mInflater = <span class="keyword">null</span>;   <span class="function"><span class="keyword">public</span> <span class="title">InflateAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mInflater = LayoutInflater.from(context);</div><div class="line">  &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">8</span>;</div><div class="line">  &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：这里是测试inflate方法参数代码，不再考虑性能优化等TAG处理</span></div><div class="line">  <span class="keyword">return</span> getXmlToView(convertView, position, parent);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">getXmlToView</span><span class="params">(View convertView, <span class="keyword">int</span> position, ViewGroup parent)</span> </span>&#123;</div><div class="line">        View[] viewList = &#123;</div><div class="line">                mInflater.inflate(R.layout.textview_layout, <span class="keyword">null</span>),</div><div class="line">  mInflater.inflate(R.layout.textview_layout, parent, <span class="keyword">false</span>),</div><div class="line">  <span class="comment">//mInflater.inflate(R.layout.textview_layout, parent, true),</span></div><div class="line">  mInflater.inflate(R.layout.textview_layout, <span class="keyword">null</span>, <span class="keyword">true</span>),</div><div class="line">  mInflater.inflate(R.layout.textview_layout, <span class="keyword">null</span>, <span class="keyword">false</span>),      mInflater.inflate(R.layout.textview_layout_parent, <span class="keyword">null</span>),</div><div class="line">  mInflater.inflate(R.layout.textview_layout_parent, parent, <span class="keyword">false</span>),</div><div class="line">  <span class="comment">//mInflater.inflate(R.layout.textview_layout_parent, parent, true),</span></div><div class="line">  mInflater.inflate(R.layout.textview_layout_parent, <span class="keyword">null</span>, <span class="keyword">true</span>),</div><div class="line">  mInflater.inflate(R.layout.textview_layout_parent, <span class="keyword">null</span>, <span class="keyword">false</span>),</div><div class="line">  &#125;;    <span class="comment">//会抛出Caused by: java.lang.UnsupportedOperationException: addView(View, LayoutParams) is not supported in AdapterView</span></div><div class="line">  convertView = viewList[position];   <span class="keyword">return</span> convertView;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>最终运行</p>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180530152765088467470.png" alt="20180530152765088467470.png"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> Context inflaterContext = mContext;				   				</div><div class="line">			<span class="comment">//这里是丛XML解析属性</span></div><div class="line">			<span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</div><div class="line">            Context lastContext = (Context) mConstructorArgs[<span class="number">0</span>];</div><div class="line">            mConstructorArgs[<span class="number">0</span>] = inflaterContext;</div><div class="line">            View result = root;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Look for the root node.</span></div><div class="line">                <span class="keyword">int</span> type;</div><div class="line">                <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</div><div class="line">                        type != XmlPullParser.END_DOCUMENT) &#123;</div><div class="line">                    <span class="comment">// Empty</span></div><div class="line">                &#125;				</div><div class="line">				<span class="comment">//如果不是根结点的话就抛出异常</span></div><div class="line">                <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</div><div class="line">                            + <span class="string">": No start tag found!"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String name = parser.getName();</div><div class="line">				<span class="comment">//这里判断的是Merge标签。用Merge的时候根布局不能为null且attachToRoot不能为false</span></div><div class="line">                <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</div><div class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></div><div class="line">                                + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    rInflate(parser, root, inflaterContext, attrs, <span class="keyword">false</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Temp is the root view that was found in the xml</span></div><div class="line">                    <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class="line"></div><div class="line">                    ViewGroup.LayoutParams params = <span class="keyword">null</span>;</div><div class="line">			</div><div class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (DEBUG) &#123;</div><div class="line">                            System.out.println(<span class="string">"Creating params from root: "</span> +</div><div class="line">                                    root);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// Create layout params that match root, if supplied</span></div><div class="line">                        params = root.generateLayoutParams(attrs);</div><div class="line">						<span class="comment">//这里可以看出只有root不为null且attachToRoot为false的时候，temp才会设置它自己的LayoutParams</span></div><div class="line">                        <span class="keyword">if</span> (!attachToRoot) &#123;</div><div class="line">                            <span class="comment">// Set the layout params for temp if we are not</span></div><div class="line">                            <span class="comment">// attaching. (If we are, we use addView, below)</span></div><div class="line">                            temp.setLayoutParams(params);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Inflate all children under temp against its context.</span></div><div class="line">                    rInflateChildren(parser, temp, attrs, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// We are supposed to attach all the views we found (int temp)</span></div><div class="line">                    <span class="comment">// to root. Do that now.</span></div><div class="line">					<span class="comment">//这里可以看出root不为null且attachToRoot为true的时候执行了一次addView</span></div><div class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</div><div class="line">                        root.addView(temp, params);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Decide whether to return the root that was passed in or the</span></div><div class="line">                    <span class="comment">// top view found in xml.</span></div><div class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">                        result = temp;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">			<span class="comment">//最终会把view返回</span></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面的源码分析我们可以看出inflate方法的参数含义：</p>
<ul>
<li><p>inflate(xmlId, null); 只创建temp的View，然后直接返回temp。</p>
</li>
<li><p>inflate(xmlId, parent); 创建temp的View，然后执行root.addView(temp, params);最后返回root。</p>
</li>
<li><p>inflate(xmlId, parent, false); 创建temp的View，然后执行temp.setLayoutParams(params);然后再返回temp。</p>
</li>
<li><p>inflate(xmlId, parent, true); 创建temp的View，然后执行root.addView(temp, params);最后返回root。</p>
</li>
<li><p>inflate(xmlId, null, false); 只创建temp的View，然后直接返回temp。</p>
</li>
<li><p>inflate(xmlId, null, true); 只创建temp的View，然后直接返回temp。</p>
</li>
<li><p><code>mInflater.inflate(R.layout.textview_layout, null)</code>不能正确处理我们设置的宽和高是因为layout_width，layout_height是相对了父级设置的，而此temp的getLayoutParams为null。</p>
</li>
<li><code>mInflater.inflate(R.layout.textview_layout, parent)</code>能正确显示我们设置的宽高是因为我们的View在设置setLayoutParams时<code>params = root.generateLayoutParams(attrs)</code>不为空。<br>Inflate(resId , parent,false ) 可以正确处理，因为temp.setLayoutParams(params);这个params正是root.generateLayoutParams(attrs);得到的。</li>
<li><code>mInflater.inflate(R.layout.textview_layout, null, true)</code>与<code>mInflater.inflate(R.layout.textview_layout, null, false)</code>不能正确处理我们设置的宽和高是因为layout_width，layout_height是相对了父级设置的，而此temp的getLayoutParams为null。</li>
<li><p>textview_layout_parent.xml作为item可以正确显示的原因是因为TextView具备上级ViewGroup，上级ViewGroup的layout_width，layout_height会失效，当前的TextView会有效而已。</p>
<p><code>inflate(xmlId, parent)</code>和 <code>inflate(xmlId, parent，true)</code>是会直接崩溃的。原因是AdapterView源码中调用了root.addView(temp, params);而此时的root是我们的ListView，ListView为AdapterView的子类，所以我们看下AdapterView抽象类中addView源码即可明白为啥了，如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * This method is not supported and throws an UnsupportedOperationException when called. * * <span class="doctag">@param</span> child Ignored.</span></div><div class="line"><span class="comment"> * * <span class="doctag">@throws</span> UnsupportedOperationException Every time this method is invoked.</span></div><div class="line"><span class="comment"> */</span> </div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"addView(View) is not supported in AdapterView"</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu常用命令]]></title>
      <url>/2018/05/29/ubuntu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ol>
<li>查看本地的端口开启情况<br><code>sudo</code> <code>ufw status</code></li>
<li>打开80端口<br><code>sudo</code> <code>ufw allow 80</code></li>
<li>防火墙开启<br><code>sudo</code> <code>ufw ``enable</code></li>
<li>防火墙重启<br><code>sudo</code> <code>ufw reload</code></li>
<li>改变文件夹的权限<br><code>sudo</code> <code>chown -R root:root sonatype-work</code></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中的Dialog总结]]></title>
      <url>/2018/05/28/Android%E4%B8%AD%E7%9A%84Dialog%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="1-简单的单按钮对话框"><a href="#1-简单的单按钮对话框" class="headerlink" title="1. 简单的单按钮对话框"></a>1. 简单的单按钮对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">new AlertDialog.Builder(getContext())</div><div class="line">        .setMessage(getString(R.string.main_dialog_simple_title))</div><div class="line">        .setPositiveButton(getString(R.string.dialog_ok), null)</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714803498814.png" alt="20180524152714803498814.png"></p>
<h2 id="2-简单的多按钮对话框"><a href="#2-简单的多按钮对话框" class="headerlink" title="2. 简单的多按钮对话框"></a>2. 简单的多按钮对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">new AlertDialog.Builder(getContext())</div><div class="line">        .setTitle(getString(R.string.main_dialog_simple_title))</div><div class="line">        .setMessage(getString(R.string.main_dialog_simple_message))</div><div class="line">        .setPositiveButton(getString(R.string.dialog_ok), null)</div><div class="line">        .setNegativeButton(getString(R.string.dialog_cancel), null)</div><div class="line">        .setNeutralButton(getString(R.string.dialog_neutral), null)</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714806024632.png" alt="20180524152714806024632.png"></p>
<h2 id="3-单选对话框"><a href="#3-单选对话框" class="headerlink" title="3. 单选对话框"></a>3. 单选对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String[] singleChoiceItems = getResources().getStringArray(R.array.dialog_choice_array); int itemSelected = 0; new AlertDialog.Builder(getContext())</div><div class="line">        .setTitle(getString(R.string.main_dialog_single_choice))</div><div class="line">        .setSingleChoiceItems(singleChoiceItems, itemSelected, new DialogInterface.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">  public void onClick(DialogInterface dialogInterface, int i) &#123;</div><div class="line">                dialogInterface.dismiss();</div><div class="line">  &#125;</div><div class="line">        &#125;)</div><div class="line">        .setNegativeButton(getString(R.string.dialog_cancel), null)</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714807770908.png" alt="20180524152714807770908.png"></p>
<h2 id="4-多选对话框"><a href="#4-多选对话框" class="headerlink" title="4. 多选对话框"></a>4. 多选对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String[] multiChoiceItems = getResources().getStringArray(R.array.dialog_choice_array); boolean[] checkedItems = &#123;true, false, false, false, false&#125;; new AlertDialog.Builder(getContext())</div><div class="line">        .setTitle(getString(R.string.main_dialog_multi_choice))</div><div class="line">        .setMultiChoiceItems(multiChoiceItems, checkedItems, </div><div class="line">![屏幕快照 2018-05-16 上午9.58.24]($res/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-16%20%E4%B8%8A%E5%8D%889.58.24.png)</div><div class="line">null)</div><div class="line">        .setPositiveButton(getString(R.string.dialog_ok), null)</div><div class="line">        .setNegativeButton(getString(R.string.dialog_cancel), null)</div><div class="line">        .show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714810264023.png" alt="20180524152714810264023.png"></p>
<h2 id="5-进度条对话框1"><a href="#5-进度条对话框1" class="headerlink" title="5. 进度条对话框1"></a>5. 进度条对话框1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProgressDialog progressDialog = new ProgressDialog(getContext()); progressDialog.setMessage(getString(R.string.main_dialog_progress_title)); progressDialog.show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714811979490.png" alt="20180524152714811979490.png"></p>
<h2 id="6-进度条对话框2"><a href="#6-进度条对话框2" class="headerlink" title="6. 进度条对话框2"></a>6. 进度条对话框2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	final ProgressDialog horizontalProgressDialog = new ProgressDialog(getContext()); horizontalProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); horizontalProgressDialog.setMessage(getString(R.string.main_dialog_progress_title)); horizontalProgressDialog.setCancelable(false); horizontalProgressDialog.setMax(100); horizontalProgressDialog.show();   new Thread(new Runnable() &#123;</div><div class="line">    int progress = 0;    @Override</div><div class="line">  public void run() &#123;</div><div class="line">        while (progress &lt;= 100) &#123;</div><div class="line">            horizontalProgressDialog.setProgress(progress);</div><div class="line"> if (progress == 100) &#123;</div><div class="line">                horizontalProgressDialog.dismiss();</div><div class="line">  &#125;</div><div class="line">            try &#123;</div><div class="line">                Thread.sleep(35);</div><div class="line">  &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">  &#125;</div><div class="line">            progress++;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714814062038.png" alt="20180524152714814062038.png"></p>
<h2 id="7-日期选择对话框"><a href="#7-日期选择对话框" class="headerlink" title="7. 日期选择对话框"></a>7. 日期选择对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">DatePickerDialog datePickerDialog = new DatePickerDialog(getContext(), new DatePickerDialog.OnDateSetListener() &#123;</div><div class="line">    @Override</div><div class="line">  public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) &#123;</div><div class="line">        calendar.set(Calendar.YEAR, year);</div><div class="line">  calendar.set(Calendar.MONTH, monthOfYear);</div><div class="line">  calendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);</div><div class="line">  String date = DateFormat.getDateInstance(DateFormat.MEDIUM).format(calendar.getTime());</div><div class="line">  btn_dialog_7.setText(date);</div><div class="line">  &#125;</div><div class="line">&#125;, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH)); datePickerDialog.show();</div></pre></td></tr></table></figure>
<p><img src="$res/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-05-16%20%E4%B8%8A%E5%8D%889.58.54.png" alt="屏幕快照 2018-05-16 上午9.58.54"></p>
<h2 id="7-时间选择对话框"><a href="#7-时间选择对话框" class="headerlink" title="7. 时间选择对话框"></a>7. 时间选择对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">TimePickerDialog timePickerDialog = new TimePickerDialog(getContext(), new TimePickerDialog.OnTimeSetListener() &#123;</div><div class="line">    @Override</div><div class="line">  public void onTimeSet(TimePicker timePicker, int i, int i1) &#123;</div><div class="line">        calendar.set(Calendar.HOUR_OF_DAY, i);</div><div class="line">  calendar.set(Calendar.MINUTE, i1);</div><div class="line">  String time = DateFormat.getTimeInstance(DateFormat.SHORT).format(calendar.getTime());</div><div class="line">  btn_dialog_8.setText(time);</div><div class="line">  &#125;</div><div class="line">&#125;, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), true); timePickerDialog.show();</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714815685030.png" alt="20180524152714815685030.png"></p>
<h2 id="8-底部对话框-BottomSheet"><a href="#8-底部对话框-BottomSheet" class="headerlink" title="8. 底部对话框(BottomSheet)"></a>8. 底部对话框(BottomSheet)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">final BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(getContext()); View dialogView = getActivity().getLayoutInflater().inflate(R.layout.dialog_bottom_sheet, null); Button btn_dialog_bottom_sheet_ok = dialogView.findViewById(R.id.btn_dialog_bottom_sheet_ok); Button btn_dialog_bottom_sheet_cancel = dialogView.findViewById(R.id.btn_dialog_bottom_sheet_cancel); ImageView img_bottom_dialog = dialogView.findViewById(R.id.img_bottom_dialog); Glide.with(getContext()).load(R.drawable.bottom_dialog).into(img_bottom_dialog); mBottomSheetDialog.setContentView(dialogView);   btn_dialog_bottom_sheet_ok.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">  public void onClick(View v) &#123;</div><div class="line">        mBottomSheetDialog.dismiss();</div><div class="line">  &#125;</div><div class="line">&#125;); btn_dialog_bottom_sheet_cancel.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">  public void onClick(View v) &#123;</div><div class="line">        mBottomSheetDialog.dismiss();</div><div class="line">  &#125;</div><div class="line">&#125;); mBottomSheetDialog.show();</div></pre></td></tr></table></figure>
<h2 id="9-全屏对话框"><a href="#9-全屏对话框" class="headerlink" title="9. 全屏对话框"></a>9. 全屏对话框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">final Dialog fullscreenDialog = new Dialog(getContext(), R.style.DialogFullscreen); fullscreenDialog.setContentView(R.layout.dialog_fullscreen); ImageView img_full_screen_dialog = fullscreenDialog.findViewById(R.id.img_full_screen_dialog); Glide.with(getContext()).load(R.drawable.google_assistant).into(img_full_screen_dialog); ImageView img_dialog_fullscreen_close = fullscreenDialog.findViewById(R.id.img_dialog_fullscreen_close); img_dialog_fullscreen_close.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">  public void onClick(View v) &#123;</div><div class="line">        fullscreenDialog.dismiss();</div><div class="line">  &#125;</div><div class="line">&#125;); fullscreenDialog.show(); break;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;DialogFullscreen&quot; parent=&quot;@android:style/Theme.Material.Light.DialogWhenLarge&quot;&gt;</div><div class="line"> &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</div><div class="line"> &lt;item name=&quot;android:statusBarColor&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line"> &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@android:style/Animation.Dialog&lt;/item&gt; &lt;/style&gt;</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714817610818.png" alt="20180524152714817610818.png"></p>
<h2 id="10-PopupMenu"><a href="#10-PopupMenu" class="headerlink" title="10. PopupMenu"></a>10. PopupMenu</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PopupMenu popupMenu = new PopupMenu(getContext(), btn_dialog_11); popupMenu.getMenuInflater().inflate(R.menu.popup_menu_main, popupMenu.getMenu()); popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() &#123;</div><div class="line">    @Override</div><div class="line">  public boolean onMenuItemClick(MenuItem item) &#123;</div><div class="line">        return false;</div><div class="line">  &#125;</div><div class="line">&#125;); popupMenu.show();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">  tools:context=&quot;com.eajy.materialdesigndemo.activity.MainActivity&quot;&gt;   &lt;item  android:id=&quot;@+id/popup_menu_action_1&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;action 1&quot;</div><div class="line">  app:showAsAction=&quot;never&quot; /&gt;   &lt;item  android:id=&quot;@+id/popup_menu_action_2&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;action 2&quot;</div><div class="line">  app:showAsAction=&quot;never&quot; /&gt;   &lt;item  android:id=&quot;@+id/popup_menu_action_3&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;action 3&quot;</div><div class="line">  app:showAsAction=&quot;never&quot;&gt;   &lt;menu&gt; &lt;item  android:id=&quot;@+id/popup_menu_action_4&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;item 1&quot;</div><div class="line">  app:showAsAction=&quot;never&quot; /&gt;</div><div class="line"> &lt;item  android:id=&quot;@+id/popup_menu_action_5&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;item 2&quot;</div><div class="line">  app:showAsAction=&quot;never&quot; /&gt;</div><div class="line"> &lt;item  android:id=&quot;@+id/popup_menu_action_6&quot;</div><div class="line">  android:orderInCategory=&quot;100&quot;</div><div class="line">  android:title=&quot;item 3&quot;</div><div class="line">  app:showAsAction=&quot;never&quot; /&gt;</div><div class="line"> &lt;/menu&gt;   &lt;/item&gt; &lt;/menu&gt;</div></pre></td></tr></table></figure>
<p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152714819159925.png" alt="20180524152714819159925.png"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Dialog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava(一)基本流程源码浅析]]></title>
      <url>/2018/05/28/RxJava-%E4%B8%80-%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="RxJava-一-基本流程源码浅析"><a href="#RxJava-一-基本流程源码浅析" class="headerlink" title="RxJava(一)基本流程源码浅析"></a>RxJava(一)基本流程源码浅析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">  public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</div><div class="line">        System.out.println(&quot;bbb&quot;);</div><div class="line">  e.onNext(1);</div><div class="line">  e.onNext(2);</div><div class="line">  e.onComplete();</div><div class="line">  &#125;</div><div class="line">&#125;).subscribe(new Observer&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">  public void onSubscribe(Disposable d) &#123;</div><div class="line">        System.out.println(&quot;aaa&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onNext(Integer integer) &#123;</div><div class="line">        System.out.println(String.valueOf(integer));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onError(Throwable e) &#123;&#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onComplete() &#123;&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">等价于</div><div class="line"></div><div class="line">ObservableOnSubscribe&lt;Integer&gt; A = new ObservableOnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">  public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</div><div class="line">        System.out.println(&quot;bbb&quot;);</div><div class="line">  e.onNext(1);</div><div class="line">  e.onNext(2);</div><div class="line">  e.onComplete();</div><div class="line">  &#125;</div><div class="line">&#125;; </div><div class="line">Observer&lt;Integer&gt; B = new Observer&lt;Integer&gt;() &#123;</div><div class="line">    @Override</div><div class="line">  public void onSubscribe(Disposable d) &#123;</div><div class="line">        System.out.println(&quot;aaa&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onNext(Integer integer) &#123;</div><div class="line">        System.out.println(String.valueOf(integer));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onError(Throwable e) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  public void onComplete() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;; Observable.create(A).subscribe(B);</div></pre></td></tr></table></figure>
<p>上面是一段基本的<code>Rxjava</code>示例代码。用久了<code>Rxjava</code>之后就会有几个问题提出。</p>
<ol>
<li><code>ObservableEmitter</code>中的数据是怎么传递到下游的？</li>
<li>为什么<code>onError</code>和<code>onComplete</code>互斥？</li>
<li><code>onSubscribe</code>和其他方法的执行顺序是什么？</li>
<li>…</li>
</ol>
<h3 id="基本流程分析"><a href="#基本流程分析" class="headerlink" title="基本流程分析"></a>基本流程分析</h3><h4 id="1-Observable-create"><a href="#1-Observable-create" class="headerlink" title="1. Observable.create()"></a>1. Observable.create()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; Observable&lt;T&gt; create(ObservableOnSubscribe&lt;T&gt; source) &#123;</div><div class="line">    ObjectHelper.requireNonNull(source, &quot;source is null&quot;);</div><div class="line">    return RxJavaPlugins.onAssembly(new ObservableCreate&lt;T&gt;(source));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们执行这个代码的时候，创建了一个<strong>A</strong>对象。传入的是一个<code>ObservableOnSubscribe</code>匿名对象。<code>ObservableOnSubscribe</code>是一个接口，含有一个<code>subscribe</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface ObservableOnSubscribe&lt;T&gt; &#123;</div><div class="line">	void subscribe(@NonNull ObservableEmitter&lt;T&gt; emitter) throws Exception; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个<strong>A</strong>对象会传入<code>ObservableCreate</code>进行存储。</p>
<h4 id="2-subscribe"><a href="#2-subscribe" class="headerlink" title="2. subscribe"></a>2. subscribe</h4><p>当执行<code>subscribe</code>方法的时候，内部执行的是<code>Observable</code>的<code>subscribeActual</code>方法。这个方法在之前的<code>ObservableCreate</code>有定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;</div><div class="line">        try &#123;</div><div class="line">            ...</div><div class="line">            subscribeActual(observer);</div><div class="line">        &#125; </div><div class="line">		...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>所以我们执行<code>.subscribe</code>的时候实际上执行的是<code>ObservableCreate</code>的<code>subscribeActual</code>方法，即执行我们创建的<strong>A</strong>对象的<code>subscribe</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override protected void subscribeActual(Observer&lt;? super T&gt; observer) &#123;</div><div class="line">    CreateEmitter&lt;T&gt; parent = new CreateEmitter&lt;T&gt;(observer);</div><div class="line">  observer.onSubscribe(parent);   try &#123;</div><div class="line">        source.subscribe(parent);</div><div class="line">  &#125; catch (Throwable ex) &#123;</div><div class="line">        Exceptions.throwIfFatal(ex);</div><div class="line">  parent.onError(ex);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法首先用<code>.subscribe()</code>里的<strong>B</strong>对象实例化一个<code>CreateEmitter</code>对象。然后调用了<strong>B</strong>对象的<code>onSubscribe</code>方法。所以在上面的流程中，<code>onSubscribe</code>会最先调用。<br>这个<code>source.subscribe(parent);</code>中的<code>source</code>就是我们传入的<strong>A</strong>对象。意思是到执行了这一步，实际是走的是<strong>A</strong>对象的<code>subscribe</code>方法了。即我们写的这段代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;bbb&quot;);</div><div class="line">  e.onNext(1);</div><div class="line">  e.onNext(2);</div><div class="line">  e.onComplete();</div></pre></td></tr></table></figure>
<p>那<code>e.onNext(1);</code>发送的数据去哪了？是什么时候跑到了下面的流程执行的？</p>
<h4 id="3-CreateEmitter"><a href="#3-CreateEmitter" class="headerlink" title="3. CreateEmitter"></a>3. CreateEmitter</h4><p>在执行了<code>subscribe</code>调用了<code>ObservableCreate</code>的<code>subscribeActual</code>之后。利用下面流程的<strong>B</strong>对象创建了<code>CreateEmitter</code>对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CreateEmitter(Observer&lt;? super T&gt; observer) &#123;</div><div class="line">    this.observer = observer; &#125;</div></pre></td></tr></table></figure>
<p>当<code>e.onNext(1);</code>调用的时候，实际上执行的是<code>CreateEmitter</code>的<code>onNext</code>方法。这个方法会执行<strong>B</strong>对象的<code>onNext</code>方法。所以到了这，大致流程已经可以理通了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Override public void onComplete() &#123;</div><div class="line">    if (!isDisposed()) &#123;</div><div class="line">        try &#123;</div><div class="line">            observer.onComplete();</div><div class="line">  &#125; finally &#123;</div><div class="line">            dispose();</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@Override public void onError(Throwable t) &#123;</div><div class="line">    if (!tryOnError(t)) &#123;</div><div class="line">        RxJavaPlugins.onError(t);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override public boolean tryOnError(Throwable t) &#123;</div><div class="line">    if (t == null) &#123;</div><div class="line">        t = new NullPointerException(&quot;onError called with null. Null values are generally not allowed in 2.x operators and sources.&quot;);</div><div class="line">  &#125;</div><div class="line">    if (!isDisposed()) &#123;</div><div class="line">        try &#123;</div><div class="line">            observer.onError(t);</div><div class="line">  &#125; finally &#123;</div><div class="line">            dispose();</div><div class="line">  &#125;</div><div class="line">        return true;</div><div class="line">  &#125;</div><div class="line">    return false; &#125;</div></pre></td></tr></table></figure>
<p>查看上面的代码可以很容易看出，<code>onComplete</code>和<code>onError</code>互斥的原因。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android Rxjava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[某狐视频去广告破解]]></title>
      <url>/2018/05/24/%E6%9F%90%E7%8B%90%E8%A7%86%E9%A2%91%E5%8E%BB%E5%B9%BF%E5%91%8A%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="某狐视频去广告破解"><a href="#某狐视频去广告破解" class="headerlink" title="某狐视频去广告破解"></a>某狐视频去广告破解</h1><h1 id="所提供的内容仅供学习交流使用-严禁用于商业用途-请于下载后24小时内删除"><a href="#所提供的内容仅供学习交流使用-严禁用于商业用途-请于下载后24小时内删除" class="headerlink" title="所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除"></a>所提供的内容仅供学习交流使用,严禁用于商业用途,请于下载后24小时内删除</h1><p>新手破解，请多指教。</p>
<h3 id="1、去官网下载最新的apk，折包后重新打包，安装。发现闪崩，推测是做了签名认证。到这里爆破签名后，重新反编译打包安装，发现没有问题。"><a href="#1、去官网下载最新的apk，折包后重新打包，安装。发现闪崩，推测是做了签名认证。到这里爆破签名后，重新反编译打包安装，发现没有问题。" class="headerlink" title="1、去官网下载最新的apk，折包后重新打包，安装。发现闪崩，推测是做了签名认证。到这里爆破签名后，重新反编译打包安装，发现没有问题。"></a>1、去官网下载最新的apk，折包后重新打包，安装。发现闪崩，推测是做了签名认证。到<a href="https://github.com/L-JINBIN/ApkSignatureKiller" target="_blank" rel="external">这里</a>爆破签名后，重新反编译打包安装，发现没有问题。</h3><h3 id="2、去除多余权限和开屏的广告。"><a href="#2、去除多余权限和开屏的广告。" class="headerlink" title="2、去除多余权限和开屏的广告。"></a>2、去除多余权限和开屏的广告。</h3><p>apktool打开后AndroidManifest.xml中删除多余的权限，例如读取短信，定位，快捷方式。主Avtivity换成MainAvtivity。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:icon=&quot;@drawable/launcher_sohu&quot; android:name=&quot;com.sohu.sohuvideo.FirstNavigationActivityGroup&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@style/Theme.AppStartTheme&quot;&gt;</div><div class="line">            &lt;meta-data android:name=&quot;android.app.shortcuts&quot; android:resource=&quot;@xml/shortcuts&quot;/&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line">&lt;activity android:configChanges=&quot;keyboardHidden|navigation|orientation|screenLayout|screenSize|smallestScreenSize&quot; android:launchMode=&quot;singleTask&quot; android:name=&quot;com.sohu.sohuvideo.ui.homepage.MainActivity&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@style/Theme.MainRecommendActivity&quot; android:windowSoftInputMode=&quot;adjustPan&quot;&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=&quot;com.sohu.sohuvideo.MAINACTIVITY&quot;/&gt;</div><div class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</div><div class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<h3 id="3-去除播放视频的广告"><a href="#3-去除播放视频的广告" class="headerlink" title="3. 去除播放视频的广告"></a>3. 去除播放视频的广告</h3><p>a. 安装抓包软件。 我是用Mac上的<code>Charles</code>抓包的，Win上有<code>Fiddler</code>。手机安装证书，不会的可以参考<a href="https://www.52pojie.cn/thread-718208-1-1.html" target="_blank" rel="external">这里</a>。</p>
<p>b. 手机设置好代理后，点击播放视频,开始抓包。<br><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713643629981.png" alt="20180524152713643629981.png"></p>
<p>c. 我一眼就喵到有个纯IP的地址，点进去一看，复制地址到Chrome<br><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713659575403.png" alt="20180524152713659575403.png"><br>果然，这个就是我们要找的地址，找这个广告的地址太简单了<br>然后<code>Charles</code>里全局搜索这个地址。<br><img src="http://p97o4wfou.bkt.clouddn.com/2018052415271367096815.png" alt="2018052415271367096815.png"><br>发现它是从data.void那个地址跳转的，然后全局搜索那个地址。<br><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713681155042.png" alt="20180524152713681155042.png"><br>最终发现所有的源头指向<code>http://agn.aty.sohu.com</code></p>
<p>d. 全局Sublime搜索上面的地址，发现在<code>Const</code>中有定义<br><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713695029161.png" alt="20180524152713695029161.png"><br>全局替换所有<code>Smail</code>中的这个地址为任意无效地址。打包，重新安装。(ps:一开始我只改了Const的无效，发现一些SDK中依然有这个地址)</p>
<h3 id="4-去除我的Tab页面的广告"><a href="#4-去除我的Tab页面的广告" class="headerlink" title="4. 去除我的Tab页面的广告"></a>4. 去除我的Tab页面的广告</h3><p>很容易定位到<code>MainMineFragment</code>。<br>能发现里面有一些方法太显眼了，例如<code>updateAdvertState</code>、<code>updateMvmsAdState</code>、<code>loadAdvert</code>、<code>showAdvert</code>、<code>sendMvmsAdRequest</code>。这些方法有的是请求广告的，有的是加载广告的，我这里的做法是注释掉调用的地方。就去掉了Tab页面的广告。</p>
<h3 id="5-去除上方滑动分类的部分广告"><a href="#5-去除上方滑动分类的部分广告" class="headerlink" title="5. 去除上方滑动分类的部分广告"></a>5. 去除上方滑动分类的部分广告</h3><p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713752598096.png" alt="20180524152713752598096.png"></p>
<p>这个Fragment是<code>ChannelColumnDataFragment</code>，它的类型是由<code>ChannelTemplateListAdapter</code>控制。我把<code>getView</code>Smail文件的Switch语法改成了其他的View。结果是去掉了一部分广告，这块的去除不是很完美。</p>
<h3 id="6-去除搜索详情的广告"><a href="#6-去除搜索详情的广告" class="headerlink" title="6. 去除搜索详情的广告"></a>6. 去除搜索详情的广告</h3><p><img src="http://p97o4wfou.bkt.clouddn.com/20180524152713775884116.png" alt="20180524152713775884116.png"><br>同上，这个Fragment是<code>SearchTemplateResultFragment</code>，它的类型是由<code>SearchTemplateListAdapter</code>控制。<br>我把<code>getView</code>Smail文件的Switch语法改成了某个Title的View，最终那块地方就留下了空白。</p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><p>有个<code>kw</code>包下的<code>t</code>文件，这个好像是播放页面的广告。具体的有<code>ADBanner2ViewHolder</code>、<code>ADBannerViewHolder</code>和<code>GameViewHolder</code>。改的时候总是崩溃就没改这里了，有空的话好好研究一个。<br>还有<code>MainActivity</code>里有个<code>initADSDK</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">private void initADSDK() &#123;</div><div class="line">        try &#123;</div><div class="line">            if (ir.b.k()) &#123;</div><div class="line">                LogUtils.p(&quot;fyf-----------------紧急开关关闭所有广告&quot;);</div><div class="line">                SdkFactory.closeAdSwitch(-1);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            com.sohu.scadsdk.videosdk.a.a(getApplicationContext());</div><div class="line">            int c = ir.b.c();</div><div class="line">            SdkFactory.getInstance();</div><div class="line">            SdkFactory.setTimeOut(c);</div><div class="line">            SdkFactory.getInstance();</div><div class="line">            SdkFactory.setDeviceType(1);</div><div class="line">            if (SohuUserManager.getInstance().isLogin()) &#123;</div><div class="line">                SdkFactory.getInstance().TrackingPassportId(getApplicationContext(), SohuUserManager.getInstance().getUser().getPassport());</div><div class="line">            &#125;</div><div class="line">            if (ir.b.m()) &#123;</div><div class="line">                LogUtils.p(&quot;fyf-----------------紧急开关关闭框内广告&quot;);</div><div class="line">                SdkFactory.closeAdSwitch(2);</div><div class="line">            &#125;</div><div class="line">            if (ir.b.n()) &#123;</div><div class="line">                LogUtils.p(&quot;fyf-----------------紧急开关关闭框外广告&quot;);</div><div class="line">                SdkFactory.closeAdSwitch(5);</div><div class="line">            &#125;</div><div class="line">            if (ir.b.l()) &#123;</div><div class="line">                LogUtils.p(&quot;fyf-----------------紧急开关关闭启动图广告&quot;);</div><div class="line">                SdkFactory.closeAdSwitch(1);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Throwable th) &#123;</div><div class="line">            LogUtils.e(th);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>总觉得可以一键关闭所有的广告，但是试的时候都崩溃了，原因不明，后续研究。</p>
<p>下载地址<br>链接: <a href="https://pan.baidu.com/s/1s8XbVqt0-1rtQ6CSlvo-vQ" target="_blank" rel="external">https://pan.baidu.com/s/1s8XbVqt0-1rtQ6CSlvo-vQ</a> 密码: 16dg</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 反编译 </tag>
            
            <tag> 破解 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 动态调试Smail的方法]]></title>
      <url>/2018/05/09/Android-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95Smail%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<ol>
<li>反编译apk成smail，将<code>smail</code>文件夹复制一份到<code>test</code>文件夹并重命名<code>smail</code>为<code>src</code></li>
<li>找到apk的<code>包名</code>和<code>入口activity</code></li>
<li><code>AndroidManifest.xml</code>中<code>application</code>节点加入<code>android:debuggable=&quot;true&quot;</code></li>
<li>回编译apk，重新安装</li>
<li>shell 输入<code>adb shell am start -D -n 包名/入口类名</code>,如果操作正确，此时手机会进入<code>debug</code>状态</li>
<li>打开Android Device Monitor，查看进程前面有红包蜘蛛的三个端口  例如2568  8621/8700</li>
<li>shell 输入<code>adb forward tcp:8700 jdwp:2568</code> 转发8700 端口 (这里 jdwp是自己Android Device Monitor中要调试app的Online值 )</li>
<li>Android Studion导入<code>test</code>文件夹，一路next，并将根路径设置为<code>source root</code> </li>
<li>配置远程调试的选项，选择<code>Run--&gt;Edit Configurations</code>并增加一个Remote调试的调试选项，端口选择:8700</li>
<li>在Smali中下好断点，<code>Run--&gt;Debug&#39;smali&#39;</code>，这里的smali是我们之前配置好的调试选项</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[adb命令]]></title>
      <url>/2018/05/04/adb%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="查看Activity"><a href="#查看Activity" class="headerlink" title="查看Activity"></a>查看Activity</h4><p><code>1.  adb shell dumpsys activity activities | sed -En -e &#39;/Running activities/,/Run #0/p&#39;</code><br><code>2.  adb shell dumpsys activity | grep -i run</code><br><code>3.  adb shell dumpsys activity | grep &quot;mFoc&quot;</code></p>
<h4 id="ADB-Debugging"><a href="#ADB-Debugging" class="headerlink" title="ADB Debugging"></a>ADB Debugging</h4><ul>
<li><p>adb devices<br>主要是用于打印当前连接的所有模拟器或者设备。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/Sib26KFUYxcQd7bgAubibYvx6QdSlq6Tt6x8FZ46VFNiaGsd39h7omcbw1KoJKwyF8hWbH5bqtH1R7Lqffh1YibnSQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
</li>
<li><p>adb forward<br>端口映射，将 PC 端的某端口数据重定向到手机端的一个端口。</p>
</li>
</ul>
<blockquote>
<p>adb forward <local> <remote></remote></local></p>
</blockquote>
<ul>
<li>adb kill-server<br>终止 adb 进程。</li>
</ul>
<blockquote>
<p>adb kill-server</p>
</blockquote>
<h4 id="Wireless"><a href="#Wireless" class="headerlink" title="Wireless"></a>Wireless</h4><ul>
<li>adb connect<br>无限调试必备命令，需要保证设备和 PC 在同一局域网内，所以可通过远程桌面达到远程调试的结果。</li>
</ul>
<blockquote>
<p>adb connect <host>[:<port>]</port></host></p>
</blockquote>
<p>需要保证设备的 /system/build.prop 文件中有命令 <code>service.adb.tcp.port=5555</code>,否则会遭到拒绝。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/Sib26KFUYxcQd7bgAubibYvx6QdSlq6Tt6GibEH9YiaSibBMONUmdjjC5dhRP0QNPt7ibTdJfvMDiafeXjOKDNMEgNIdA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<blockquote>
<p>此处安利一下无限调试设置方法：</p>
<ol>
<li>打开设备的调试模式，允许 USB 以 MTP 模式传输，确保设备和 PC 能正常连接，可以通过<code>adb shell</code> 或者 <code>adb devices</code> 等进行验证。</li>
</ol>
<ol>
<li>确保已连接后，依次执行以下命令：<br><code>adb root</code><br><code>adb remount</code><br><code>adb pull /system/build.prop ./</code></li>
</ol>
<ol>
<li>在 adb 命令执行的文件夹下的 build.prop 中加入命令 <code>service.adb.tcp.port=5555</code></li>
</ol>
<ol>
<li>执行 <code>adb push ./build.prop /system/</code> 后重启设备<br>结束后断开 USB 连接线，输入 adb connect 设备IP:5555 确认可以正常连接。</li>
</ol>
</blockquote>
<ul>
<li>adb usb<br>设置设备以 USB 形式连接 PC。</li>
</ul>
<h4 id="Package-Manager"><a href="#Package-Manager" class="headerlink" title="Package Manager"></a>Package Manager</h4><ul>
<li>adb install<br>主要用于往 Android 设备 push 应用。</li>
</ul>
<blockquote>
<p>adb install [option] <path></path></p>
</blockquote>
<p>其中的 option 也是比较有讲究的，下面就只说最常用的。</p>
<blockquote>
<ul>
<li><code>adb install test.apk</code> <em>直接安装应用</em></li>
</ul>
<ul>
<li><code>adb install -r test.apk</code> <em>替代存在的应用，不会删除应用数据，用于更新应用特别方便。</em></li>
</ul>
</blockquote>
<p>其余的不是很常用的就不多提了，感兴趣的可以自行了解。</p>
<ul>
<li>adb uninstall<br>从设备或者模拟器卸载应用。</li>
</ul>
<blockquote>
<p>adb uninstall [options] <package></package></p>
</blockquote>
<p>两种情况，假设我们的应用 APP 包名是 com.example.application</p>
<blockquote>
<p><code>adb uninstall com.example.application</code> <em>直接删除应用和所有数据</em><br><code>adb uninstall -k com.example.application</code> <em>删除应用，但会保留应用数据和缓存数据。</em></p>
</blockquote>
<ul>
<li>adb shell pm list packages<br>打印设备下面的所有应用包名。</li>
</ul>
<blockquote>
<p>adb shell pm list packages [options] <filter></filter></p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/Sib26KFUYxcQd7bgAubibYvx6QdSlq6Tt6aCQicNhapqDQYfUltaVLUOeV1ibQJZvBK1ZJzyJr5m5GGfenn2bWXFAg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>其他的过滤方式和限定条件这里也不举例了。</p>
<ul>
<li>adb shell pm path<br>打印 apk 的路径。</li>
</ul>
<blockquote>
<p>adb shell pm path <package></package></p>
</blockquote>
<ul>
<li>adb shell pm clear<br>清除应用缓存。</li>
</ul>
<blockquote>
<p>adb shell pm clear <package></package></p>
</blockquote>
<h4 id="File-Manager"><a href="#File-Manager" class="headerlink" title="File Manager"></a>File Manager</h4><ul>
<li>adb pull<br>从 Android 设备下载文件到 PC。</li>
</ul>
<blockquote>
<p>adb pull <remote> [local]</remote></p>
</blockquote>
<p>其中 代表文件在设备中的地址，[local] 代表存放目录。</p>
<ul>
<li>adb push<br>把 PC 的文件存放到 Android 设备。</li>
</ul>
<blockquote>
<p>adb push <local> <remote></remote></local></p>
</blockquote>
<ul>
<li>adb shell ls<br>列出目录内容。</li>
</ul>
<blockquote>
<p>adb shell ls [options] <directory></directory></p>
</blockquote>
<ul>
<li>adb shell cd<br>和一般的 PC 的 <code>cd</code> 差不多，主要用于切换目录。</li>
</ul>
<blockquote>
<p>adb shell cd <directory></directory></p>
</blockquote>
<ul>
<li>adb shell rm<br>删除文件或者目录</li>
</ul>
<blockquote>
<p>adb shell rm [options] <file or="" directory=""></file></p>
</blockquote>
<ul>
<li>adb shell mkdir<br>创建一个文件夹</li>
</ul>
<blockquote>
<p>adb shell mkdir [options] <directory name=""></directory></p>
</blockquote>
<ul>
<li>adb shell touch<br>创建一个新文件或者改变文件修改时间</li>
</ul>
<blockquote>
<p>adb shell touch [options] <file></file></p>
</blockquote>
<ul>
<li>adb shell pwd<br>定位当前的操作位置</li>
</ul>
<blockquote>
<p>adb shell pwd</p>
</blockquote>
<ul>
<li>adb shell cp<br>字面意思，很好理解，复制。</li>
</ul>
<blockquote>
<p>adb shell cp [options] <source> <dest></dest></p>
</blockquote>
<ul>
<li>adb shell mv<br>移动或者更名文件</li>
</ul>
<blockquote>
<p>adb shell mv [options] <source> <dest></dest></p>
</blockquote>
<h4 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h4><ul>
<li><p>adb shell netstat<br>主要用于网络统计。</p>
</li>
<li><p>adb shell ping<br>没啥好说的，和 PC 的 ping 命令一样的。</p>
</li>
<li><p>adb shell netcfg<br>通过配置文件配置和管理网络连接。</p>
</li>
</ul>
<blockquote>
<p>adb shell netcfg [<interface> {dhcp|up|down}]</interface></p>
</blockquote>
<ul>
<li>adb shell ip<br>主要用于显示一些数据</li>
</ul>
<blockquote>
<p>adb shell ip [OPTIONS] OBJECT</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/Sib26KFUYxcQd7bgAubibYvx6QdSlq6Tt6qr51tsmXZHxuJqnmzpGPO31BofHicicBE1LWoGhfDeOIevbM4yjIdVfQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<h4 id="Logcat"><a href="#Logcat" class="headerlink" title="Logcat"></a>Logcat</h4><ul>
<li>adb logcat<br>打印日志文件。</li>
</ul>
<blockquote>
<p>adb logcat [options] [filter-specs]</p>
</blockquote>
<p>当然可以像 Android Studio 一样只打印固定的日志</p>
<blockquote>
<p><code>adb logcat *:V</code> <em>lowest priority, filter to only show Verbose level</em><br><code>adb logcat *:D</code> <em>filter to only show Debug level</em><br><code>adb logcat *:I</code> <em>filter to only show Info level</em><br><code>adb logcat *:W</code> <em>filter to only show Warning level</em><br><code>adb logcat *:E</code> <em>filter to only show Error level</em><br><code>adb logcat *:F</code> <em>filter to only show Fatal level</em><br><code>adb logcat *:S</code> <em>Silent, highest priority, on which nothing is ever printed</em></p>
</blockquote>
<p>adb logcat -b</p>
<blockquote>
<p><code>adb logcat -b radio</code> <em>View the buffer that contains radio/telephony related messages.</em><br><code>adb logcat -b event</code> <em>View the buffer containing events-related messages.</em><br><code>adb logcat -b main</code> <em>default</em><br><code>adb logcat -c</code> <em>Clears the entire log and exits.</em><br><code>adb logcat -d</code> <em>Dumps the log to the screen and exits.</em><br><code>adb logcat -f test.logs</code> <em>Writes log message output to test.logs .</em><br><code>adb logcat -g</code> <em>Prints the size of the specified log buffer and exits.</em><br><code>adb logcat -n &lt;count&gt;</code> <em>Sets the maximum number of rotated logs to . </em></p>
</blockquote>
<ul>
<li>adb shell dumpsys<br>获取系统数据。</li>
</ul>
<blockquote>
<p>adb shell dumpsys [options]</p>
</blockquote>
<p>其中有个非常好用的是，当你在新接触一个项目的时候，不熟悉项目流程，此时正好可以用这个直接定位到你的 Activity 位置。</p>
<p><code>adb shell dumpsys activity activities</code></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/Sib26KFUYxcQd7bgAubibYvx6QdSlq6Tt60GOOlfus8iaLFl2AN1CX42DGQHCfbbHicw2LqCXpyoO9tFEUGLbKnBxA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
<p>如图，直接在打印出来内容的后半段找到了当前 Activity 的定位，是 <code>NewLoginActivity</code>。</p>
<ul>
<li>adb shell dumpstate<br>和命令直译差不多，dumps state。</li>
</ul>
<h4 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h4><ul>
<li>adb shell screencap<br>一般的手机都有截图功能（一般下拉菜单中有），但不代表所有 Android 设备都在可视化中开启了这个功能，所以这时候这个 adb 命令就显得特别重要。</li>
</ul>
<blockquote>
<p>adb shell screencap <filename></filename></p>
</blockquote>
<p>结合前面的 pull 命令，就可以让我们轻松拿到屏幕截图。</p>
<blockquote>
<p><code>adb shell screencap /sdcard/test.png</code> <em>截图存放</em><br><code>adb pull /sdcard/test.png</code> <em>取到 PC 当前文件夹</em></p>
</blockquote>
<ul>
<li>adb shell screencord<br>有了屏幕截图，自然也得有屏幕录制，可惜这个必须在 Android 4.4 (API level 19) 以上才可使用。</li>
</ul>
<blockquote>
<p>adb shell screencord /sdcard/test.mp4</p>
</blockquote>
<p>这个还可以对大小 size 和 时间做限制，感兴趣的可以自行了解。</p>
<h4 id="System"><a href="#System" class="headerlink" title="System"></a>System</h4><ul>
<li><p>adb root<br>获取 root 权限。</p>
</li>
<li><p>adb sideload</p>
</li>
<li><p>adb shell ps<br>打印进程状态。</p>
</li>
<li><p>adb shell top<br>展现上层 CPU 进程信息。</p>
</li>
<li><p>adb shell getprop<br>获取 Android 系统服务属性</p>
</li>
<li><p>adb shell setprop<br>设置服务属性。<br>以上部分转载自<br><a href="https://mp.weixin.qq.com/s/JjFnWY6qCJfKVp4VsXml-g" target="_blank" rel="external">https://mp.weixin.qq.com/s/JjFnWY6qCJfKVp4VsXml-g</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> adb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)P12证书转BKS证书]]></title>
      <url>/2018/04/23/%E8%BD%AC-P12%E8%AF%81%E4%B9%A6%E8%BD%ACBKS%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<p><strong>1.请先下载第三方转换工具protecle，配置java环境</strong></p>
<p><strong>    下载链接：<a href="http://download.csdn.net/detail/zhangyong125/9376667" target="_blank" rel="external">http://download.csdn.net/detail/zhangyong125/9376667</a></strong></p>
<p><strong>2.点击运行protecle.jar</strong></p>
<p><img src="https://img-blog.csdn.net/20151225114818653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p><strong>2.新建BKSStore</strong></p>
<p><img src="https://img-blog.csdn.net/20151225115339966?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="https://img-blog.csdn.net/20151225115344183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> </p>
<p><strong>3.导入p12密钥对，包含公钥和私钥</strong> </p>
<p><img src="https://img-blog.csdn.net/20151225115411320?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="https://img-blog.csdn.net/20151225115415901?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> </p>
<p><strong>4.修改别名</strong> </p>
<p><img src="https://img-blog.csdn.net/20151225115444236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="https://img-blog.csdn.net/20151225115447723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> </p>
<p><strong>5.为客户端的私钥创建密码</strong> </p>
<p><img src="https://img-blog.csdn.net/20151225115527173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="https://img-blog.csdn.net/20151225115537280?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> </p>
<p>6.另存为BKS </p>
<p><img src="https://img-blog.csdn.net/20151225115555977?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><img src="https://img-blog.csdn.net/20151225115559489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>本文转自<a href="https://blog.csdn.net/zhangyong125/article/details/50402183" target="_blank" rel="external">https://blog.csdn.net/zhangyong125/article/details/50402183</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法之数组]]></title>
      <url>/2018/04/21/%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="1-从排序数组中删除重复项"><a href="#1-从排序数组中删除重复项" class="headerlink" title="1. 从排序数组中删除重复项"></a>1. 从排序数组中删除重复项</h2><p>给定一个排序数组，你需要在<strong><a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="external">原地</a></strong>删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在<strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" target="_blank" rel="external">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong></p>
<p>给定数组 <em>nums</em> = <strong>[1,1,2]</strong>, </p>
<p>函数应该返回新的长度 <strong>2</strong>, 并且原数组 <em>nums</em> 的前两个元素被修改为 <strong><code>1</code></strong>, <strong><code>2</code></strong>。 </p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>示例 2:</strong></p>
<p>给定 <em>nums</em> = <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,</p>
<p>函数应该返回新的长度 <strong>5</strong>, 并且原数组 <em>nums</em> 的前五个元素被修改为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong>。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">内部操作如下:</div><div class="line">int len = removeDuplicates(nums);</div><div class="line">// 在函数里修改输入数组对于调用者是可见的。</div><div class="line">// 根据你的函数返回的长度, 它会打印出数组中**该长度范围内**的所有元素。</div><div class="line">for (int i = 0; i &lt; len; i++) &#123;</div><div class="line">    print(nums[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static int removeDuplicates(int[] nums) &#123;</div><div class="line">    if (nums.length == 0)</div><div class="line">        return 0;</div><div class="line"> int index = 0;</div><div class="line"> for (int i=0; i &lt; nums.length ; i++) &#123;</div><div class="line">        if ( nums[i] != nums[index] ) &#123;</div><div class="line">            index++;</div><div class="line">  nums[index] = nums[i];</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    index+=1;</div><div class="line"> return index; &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go 如何交叉编译]]></title>
      <url>/2018/04/05/Go-%E5%A6%82%E4%BD%95%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<p>Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。</p>
<p>Mac 下编译 Linux 和 Windows 64位可执行程序</p>
<p>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go<br>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go<br>1<br>2<br>Linux 下编译 Mac 和 Windows 64位可执行程序</p>
<p>CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go<br>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go<br>1<br>2<br>Windows 下编译 Mac 和 Linux 64位可执行程序</p>
<p>SET CGO_ENABLED=0<br>SET GOOS=darwin<br>SET GOARCH=amd64<br>go build main.go</p>
<p>SET CGO_ENABLED=0<br>SET GOOS=linux<br>SET GOARCH=amd64<br>go build main.go</p>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SopHix接口说明]]></title>
      <url>/2018/03/29/SopHix%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="SopHix接口说明"><a href="#SopHix接口说明" class="headerlink" title="SopHix接口说明"></a>SopHix接口说明</h1><p>1  initialize方法</p>
<ul>
<li><p>initialize(): <strong>&lt;必选&gt;</strong></p>
<p>该方法主要做些必要的初始化工作以及如果本地有补丁的话会加载补丁, 但不会自动请求补丁。因此需要自行调用queryAndLoadNewPatch方法拉取补丁。这个方法调用需要尽可能的早, 必须在Application的attachBaseContext方法的最前面调用（在super.attachBaseContext之后，如果有Multidex，也需要在Multidex.install之后）, initialize()方法调用之前你需要先调用如下几个方法进行一些必要的参数设置, 方法调用说明如下:</p>
</li>
<li><p>setContext(application): <strong>&lt;必选&gt;</strong> 传入入口Application即可</p>
</li>
<li><p>setAppVersion(appVersion): <strong>&lt;必选&gt;</strong> 应用的版本号</p>
</li>
<li><p>setSecretMetaData(idSecret, appSecret, rsaSecret): <strong>&lt;可选，推荐使用&gt;</strong> 三个Secret分别对应AndroidManifest里面的三个，可以不在AndroidManifest设置而是用此函数来设置Secret。放到代码里面进行设置可以自定义混淆代码，更加安全，此函数的设置会覆盖AndroidManifest里面的设置，如果对应的值设为null，默认会在使用AndroidManifest里面的。</p>
</li>
<li><p>setEnableDebug(isEnabled): <strong>&lt;可选&gt;</strong> isEnabled默认为false, 是否调试模式, 调试模式下会输出日志以及不进行补丁签名校验. 线下调试此参数可以设置为true, 查看日志过滤TAG:Sophix, 同时强制不对补丁进行签名校验, 所有就算补丁未签名或者签名失败也发现可以加载成功. 但是正式发布该参数必须为false, false会对补丁做签名校验, 否则就可能存在安全漏洞风险</p>
</li>
<li><p>setAesKey(aesKey): <strong>&lt;可选&gt;</strong> 用户自定义aes秘钥, 会对补丁包采用对称加密。这个参数值必须是16位数字或字母的组合，是和补丁工具设置里面AES Key保持完全一致, 补丁才能正确被解密进而加载。此时平台无感知这个秘钥, 所以不用担心阿里云移动平台会利用你们的补丁做一些非法的事情。</p>
</li>
<li><p>setPatchLoadStatusStub(new PatchLoadStatusListener()): <strong>&lt;可选&gt;</strong> 设置patch加载状态监听器, 该方法参数需要实现PatchLoadStatusListener接口, 接口说明见1.3.2.2说明</p>
</li>
<li><p>setUnsupportedModel(modelName, sdkVersionInt):<strong>&lt;可选&gt;</strong> 把不支持的设备加入黑名单，加入后不会进行热修复。modelName为该机型上Build.MODEL的值，这个值也可以通过adb shell getprop | grep ro.product.model取得。sdkVersionInt就是该机型的Android版本，也就是Build.VERSION.SDK_INT，若设为0，则对应该机型所有安卓版本。目前控制台也可以直接设置机型黑名单，更加灵活。</p>
</li>
</ul>
<p>2 queryAndLoadNewPatch方法</p>
<p>该方法主要用于查询服务器是否有新的可用补丁. SDK内部限制连续两次queryAndLoadNewPatch()方法调用不能短于3s, 否则的话就会报code:19的错误码. 如果查询到可用的话, 首先下载补丁到本地, 然后</p>
<ul>
<li>应用原本没有补丁, 那么如果当前应用的补丁是热补丁, 那么会立刻加载(不管是冷补丁还是热补丁). 如果当前应用的补丁是冷补丁, 那么需要重启生效.</li>
<li><p><strong>应用已经存在一个补丁, 请求发现有新补丁后，本次不受影响。并且在下次启动时补丁文件删除, 下载并预加载新补丁。在下下次启动时应用新补丁。</strong></p>
<p>补丁在后台发布之后, 并不会主动下行推送到客户端, 需要手动调用queryAndLoadNewPatch方法查询后台补丁是否可用.</p>
</li>
<li><p>只会下载补丁版本号比当前应用存在的补丁版本号高的补丁, 比如当前应用已经下载了补丁版本号为5的补丁, 那么只有后台发布的补丁版本号&gt;5才会重新下载.</p>
</li>
</ul>
<p>同时1.4.0以上版本服务后台上线了“一键清除”补丁的功能, 所以如果后台点击了“一键清除”那么这个方法将会返回code:18的状态码. 此时本地补丁将会被强制清除, 同时不清除本地补丁版本号</p>
<p>3 killProcessSafely方法</p>
<p>可以在PatchLoadStatusListener监听到CODE_LOAD_RELAUNCH后在合适的时机，调用此方法杀死进程。注意，不可以直接Process.killProcess(Process.myPid())来杀进程，这样会扰乱Sophix的内部状态。因此如果需要杀死进程，建议使用这个方法，它在内部做一些适当处理后才杀死本进程。</p>
<p>4 cleanPatches()方法</p>
<p>清空本地补丁，并且不再拉取被清空的版本的补丁。正常情况下不需要开发者自己调用，因为Sophix内部会判断对补丁引发崩溃的情况进行自动清空。</p>
<p>5 PatchLoadStatusListener接口</p>
<p>该接口需要自行实现并传入initialize方法中, 补丁加载状态会回调给该接口, 参数说明如下:</p>
<ul>
<li>mode: 无实际意义, 为了兼容老版本, 默认始终为0</li>
<li>code: 补丁加载状态码, 详情查看PatchStatus类说明</li>
<li>info: 补丁加载详细说明</li>
<li>handlePatchVersion: 当前处理的补丁版本号, 0:无 -1:本地补丁 其它:后台补丁</li>
</ul>
<h3 id="常见状态码说明如下-一个补丁的加载一般分为三个阶段-查询-预加载-加载"><a href="#常见状态码说明如下-一个补丁的加载一般分为三个阶段-查询-预加载-加载" class="headerlink" title="常见状态码说明如下: 一个补丁的加载一般分为三个阶段: 查询/预加载/加载"></a><strong>常见状态码说明如下: 一个补丁的加载一般分为三个阶段: 查询/预加载/加载</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">//兼容老版本的code说明</div><div class="line">  int CODE_LOAD_SUCCESS = 1;//加载阶段, 成功</div><div class="line">  int CODE_ERR_INBLACKLIST = 4;//加载阶段, 失败设备不支持</div><div class="line">  int CODE_REQ_NOUPDATE = 6;//查询阶段, 没有发布新补丁</div><div class="line">  int CODE_REQ_NOTNEWEST = 7;//查询阶段, 补丁不是最新的 </div><div class="line">  int CODE_DOWNLOAD_SUCCESS = 9;//查询阶段, 补丁下载成功</div><div class="line">  int CODE_DOWNLOAD_BROKEN = 10;//查询阶段, 补丁文件损坏下载失败</div><div class="line">  int CODE_UNZIP_FAIL = 11;//查询阶段, 补丁解密失败</div><div class="line">  int CODE_LOAD_RELAUNCH = 12;//预加载阶段, 需要重启</div><div class="line">  int CODE_REQ_APPIDERR = 15;//查询阶段, appid异常</div><div class="line">  int CODE_REQ_SIGNERR = 16;//查询阶段, 签名异常</div><div class="line">  int CODE_REQ_UNAVAIABLE = 17;//查询阶段, 系统无效</div><div class="line">  int CODE_REQ_SYSTEMERR = 22;//查询阶段, 系统异常</div><div class="line">  int CODE_REQ_CLEARPATCH = 18;//查询阶段, 一键清除补丁</div><div class="line">  int CODE_PATCH_INVAILD = 20;//加载阶段, 补丁格式非法</div><div class="line">  //查询阶段的code说明</div><div class="line">  int CODE_QUERY_UNDEFINED = 31;//未定义异常</div><div class="line">  int CODE_QUERY_CONNECT = 32;//连接异常</div><div class="line">  int CODE_QUERY_STREAM = 33;//流异常</div><div class="line">  int CODE_QUERY_EMPTY = 34;//请求空异常</div><div class="line">  int CODE_QUERY_BROKEN = 35;//请求完整性校验失败异常</div><div class="line">  int CODE_QUERY_PARSE = 36;//请求解析异常</div><div class="line">  int CODE_QUERY_LACK = 37;//请求缺少必要参数异常</div><div class="line">  //预加载阶段的code说明</div><div class="line">  int CODE_PRELOAD_SUCCESS = 100;//预加载成功</div><div class="line">  int CODE_PRELOAD_UNDEFINED = 101;//未定义异常</div><div class="line">  int CODE_PRELOAD_HANDLE_DEX = 102;//dex加载异常</div><div class="line">  int CODE_PRELOAD_NOT_ZIP_FORMAT = 103;//基线dex非zip格式异常</div><div class="line">  int CODE_PRELOAD_REMOVE_BASEDEX = 105;//基线dex处理异常</div><div class="line">  //加载阶段的code说明 分三部分dex加载, resource加载, lib加载</div><div class="line">  //dex加载</div><div class="line">  int CODE_LOAD_UNDEFINED = 71;//未定义异常</div><div class="line">  int CODE_LOAD_AES_DECRYPT = 72;//aes对称解密异常</div><div class="line">  int CODE_LOAD_MFITEM = 73;//补丁SOPHIX.MF文件解析异常</div><div class="line">  int CODE_LOAD_COPY_FILE = 74;//补丁拷贝异常</div><div class="line">  int CODE_LOAD_SIGNATURE = 75;//补丁签名校验异常</div><div class="line">  int CODE_LOAD_SOPHIX_VERSION = 76;//补丁和补丁工具版本不一致异常</div><div class="line">  int CODE_LOAD_NOT_ZIP_FORMAT = 77;//补丁zip解析异常</div><div class="line">  int CODE_LOAD_DELETE_OPT = 80;//删除无效odex文件异常</div><div class="line">  int CODE_LOAD_HANDLE_DEX = 81;//加载dex异常</div><div class="line">  // 反射调用异常</div><div class="line">  int CODE_LOAD_FIND_CLASS = 82;</div><div class="line">  int CODE_LOAD_FIND_CONSTRUCTOR = 83;</div><div class="line">  int CODE_LOAD_FIND_METHOD = 84;</div><div class="line">  int CODE_LOAD_FIND_FIELD = 85;</div><div class="line">  int CODE_LOAD_ILLEGAL_ACCESS = 86;</div><div class="line">  //resource加载</div><div class="line">  public static final int CODE_LOAD_RES_ADDASSERTPATH = 123;//新增资源补丁包异常</div><div class="line">  //lib加载</div><div class="line">  int CODE_LOAD_LIB_UNDEFINED = 131;//未定义异常</div><div class="line">  int CODE_LOAD_LIB_CPUABIS = 132;//获取primaryCpuAbis异常</div><div class="line">  int CODE_LOAD_LIB_JSON = 133;//json格式异常</div><div class="line">  int CODE_LOAD_LIB_LOST = 134;//lib库不完整异常</div><div class="line">  int CODE_LOAD_LIB_UNZIP = 135;//解压异常</div><div class="line">  int CODE_LOAD_LIB_INJECT = 136;//注入异常</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> HotFix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SopHix初试]]></title>
      <url>/2018/03/29/SopHix%E5%88%9D%E8%AF%95/</url>
      <content type="html"><![CDATA[<h4 id="接入步骤"><a href="#接入步骤" class="headerlink" title="接入步骤"></a>接入步骤</h4><h3 id="一-基本配置"><a href="#一-基本配置" class="headerlink" title="一 基本配置"></a>一 基本配置</h3><p>1.1 申请开通阿里移动热修复<br>1.2 创建产品 &amp; 添加应用<br>1.3 Android Studio 项目<code>build.gradle</code>添加Mavel依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">maven &#123;</div><div class="line">    url &quot;http://maven.aliyun.com/nexus/content/repositories/releases&quot; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app module <code>build.gradle</code>添加依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.aliyun.ams:alicloud-android-hotfix:3.2.1&apos;</div></pre></td></tr></table></figure>
<p>1.4 添加权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;! -- 网络权限 --&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</div><div class="line">&lt;! -- 外部存储读权限，调试工具加载本地补丁需要 --&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>1.5 配置AndroidManifest文件<br>在<code>AndroidManifest.xml</code>中间的<code>application</code>节点下添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">android:name=&quot;com.taobao.android.hotfix.IDSECRET&quot;</div><div class="line">android:value=&quot;App ID&quot; /&gt;</div><div class="line">&lt;meta-data</div><div class="line">android:name=&quot;com.taobao.android.hotfix.APPSECRET&quot;</div><div class="line">android:value=&quot;App Secret&quot; /&gt;</div><div class="line">&lt;meta-data</div><div class="line">android:name=&quot;com.taobao.android.hotfix.RSASECRET&quot;</div><div class="line">android:value=&quot;RSA密钥&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>1.6 混淆配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#基线包使用，生成mapping.txt</div><div class="line">-printmapping mapping.txt</div><div class="line">#生成的mapping.txt在app/buidl/outputs/mapping/release路径下，移动到/app路径下</div><div class="line">#修复后的项目使用，保证混淆结果一致</div><div class="line">#-applymapping mapping.txt</div><div class="line">#hotfix</div><div class="line">-keep class com.taobao.sophix.**&#123;*;&#125;</div><div class="line">-keep class com.ta.utdid2.device.**&#123;*;&#125;</div><div class="line">#防止inline</div><div class="line">-dontoptimize</div></pre></td></tr></table></figure></p>
<h3 id="二-SDK接口使用"><a href="#二-SDK接口使用" class="headerlink" title="二 SDK接口使用"></a>二 SDK接口使用</h3><p>2.1 接入范例<br>initialize的调用应该尽可能的早，必须在<code>Application.attachBaseContext()</code>的最开始（在super.attachBaseContext之后，如果有Multidex，也需要在Multidex.install之后）进行SDK初始化操作，初始化之前不能用到其他自定义类，否则极有可能导致崩溃。而查询服务器是否有可用补丁的操作可以在后面的任意地方。不建议在<code>Application.onCreate()</code>中初始化，因为如果带有ContentProvider，就会使得Sophix初始化时机太迟从而引发问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// initialize必须放在attachBaseContext最前面，初始化代码直接写在Application类里面，切勿封装到其他类。</div><div class="line">SophixManager.getInstance().setContext(this)</div><div class="line">                .setAppVersion(appVersion)</div><div class="line">                .setAesKey(null)</div><div class="line">                .setEnableDebug(true)</div><div class="line">                .setPatchLoadStatusStub(new PatchLoadStatusListener() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void onLoad(final int mode, final int code, final String info, final int handlePatchVersion) &#123;</div><div class="line">                        // 补丁加载回调通知</div><div class="line">                        if (code == PatchStatus.CODE_LOAD_SUCCESS) &#123;</div><div class="line">                            // 表明补丁加载成功</div><div class="line">                        &#125; else if (code == PatchStatus.CODE_LOAD_RELAUNCH) &#123;</div><div class="line">                            // 表明新补丁生效需要重启. 开发者可提示用户或者强制重启;</div><div class="line">                            // 建议: 用户可以监听进入后台事件, 然后调用killProcessSafely自杀，以此加快应用补丁，详见1.3.2.3</div><div class="line">                        &#125; else &#123;</div><div class="line">                            // 其它错误信息, 查看PatchStatus类说明</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;).initialize();</div><div class="line">// queryAndLoadNewPatch不可放在attachBaseContext 中，否则无网络权限，建议放在后面任意时刻，如onCreate中</div><div class="line">SophixManager.getInstance().queryAndLoadNewPatch();</div></pre></td></tr></table></figure></p>
<h3 id="三-补丁包的生成"><a href="#三-补丁包的生成" class="headerlink" title="三 补丁包的生成"></a>三 补丁包的生成</h3><p>3.1 下载 SopHix补丁工具</p>
<ul>
<li><p>Mac版本打包工具地址：<a href="http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_macos.zip" target="_blank" rel="external">http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_macos.zip</a></p>
</li>
<li><p>Windows版本打包工具地址：<a href="http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_windows.zip" target="_blank" rel="external">http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_windows.zip</a></p>
</li>
<li><p>Linux版本打包工具地址：<a href="http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_linux.zip" target="_blank" rel="external">http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/SophixPatchTool_linux.zip</a></p>
</li>
<li><p>调试工具地址：<a href="http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/hotfix_debug_tool-release.apk" target="_blank" rel="external">http://ams-hotfix-repo.oss-cn-shanghai.aliyuncs.com/hotfix_debug_tool-release.apk</a></p>
</li>
</ul>
<p>3.2 生成补丁<br>打开补丁生成工具，利用新包旧包生成补丁包</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/3/29/16270ebaa7188a8b?w=471&amp;h=196&amp;f=png&amp;s=30463" alt=""></p>
<h3 id="四-补丁包的下发"><a href="#四-补丁包的下发" class="headerlink" title="四 补丁包的下发"></a>四 补丁包的下发</h3><p>4.1 打开热修复控制台，添加版本，上传补丁<br>4.2 测试补丁</p>
<ol>
<li>手机安装调试工具，adb shell input text packname 输入apk的包名<br>![](<a href="https://user-gold-cdn.xitu.io/2018/3/29/16270f139c0adaa1?w=1080&amp;h=2160&amp;f=png&amp;s=123" target="_blank" rel="external">https://user-gold-cdn.xitu.io/2018/3/29/16270f139c0adaa1?w=1080&amp;h=2160&amp;f=png&amp;s=123</a></li>
<li>扫码验证</li>
<li>adb push patch.jar 手机的任意绝对路径</li>
<li>手机输入jar路径，点击应用补丁</li>
</ol>
<blockquote>
<p>应用已经存在一个补丁, 请求发现有新补丁后，本次不受影响。并且在下次启动时补丁文件删除, 下载并预加载新补丁。在下下次启动时应用新补丁。<br>补丁在后台发布之后, 并不会主动下行推送到客户端, 需要手动调用queryAndLoadNewPatch方法查询后台补丁是否可用.</p>
</blockquote>
<p>4.3 测试无误后控制台选择新建发布进行灰度发布</p>
<blockquote>
<p>灰度测试，就是在某项产品或应用正式发布前，选择特定人群试用，逐步扩大其试用者数量，以便及时发现和纠正其中的问题。</p>
</blockquote>
<p>4.4 再次确认无误后，进行全量发布</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> HotFix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈Android中的音频焦点]]></title>
      <url>/2018/03/05/%E6%B5%85%E8%B0%88Android%E4%B8%AD%E7%9A%84%E9%9F%B3%E9%A2%91%E7%84%A6%E7%82%B9/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[curl命令详解(转)]]></title>
      <url>/2018/02/14/curl%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<p>本文转载自 <a href="http://www.linuxdiyf.com/linux/2800.html" target="_blank" rel="external">http://www.linuxdiyf.com/linux/2800.html</a></p>
<h2 id="命令：curl"><a href="#命令：curl" class="headerlink" title="命令：curl"></a>命令：curl</h2><p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p>
<p>语法：<code>curl [option] [url]</code></p>
<h3 id="常见参数："><a href="#常见参数：" class="headerlink" title="常见参数："></a>常见参数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器</div><div class="line">-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置</div><div class="line">-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中</div><div class="line">-C/--continue-at &lt;offset&gt;            断点续转</div><div class="line">-D/--dump-header &lt;file&gt;              把header信息写入到该文件中</div><div class="line">-e/--referer                                  来源网址</div><div class="line">-f/--fail                                          连接失败时不显示http错误</div><div class="line">-o/--output                                  把输出写到该文件中</div><div class="line">-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名</div><div class="line">-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围</div><div class="line">-s/--silent                                    静音模式。不输出任何东西</div><div class="line">-T/--upload-file &lt;file&gt;                  上传文件</div><div class="line">-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码</div><div class="line">-w/--write-out [format]                什么输出完成后</div><div class="line">-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理</div><div class="line">-#/--progress-bar                        进度条显示当前的传送状态</div></pre></td></tr></table></figure>
<p>例子：</p>
<h4 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://www.linux.com</div></pre></td></tr></table></figure>
<p>执行后，www.linux.com 的html就会显示在屏幕上了<br>Ps：由于安装linux的时候很多时候是没有安装桌面的，也意味着没有浏览器，因此这个方法也经常用于测试一台服务器是否可以到达一个网站</p>
<h4 id="2、保存访问的网页"><a href="#2、保存访问的网页" class="headerlink" title="2、保存访问的网页"></a>2、保存访问的网页</h4><h5 id="2-1-使用linux的重定向功能保存"><a href="#2-1-使用linux的重定向功能保存" class="headerlink" title="2.1:使用linux的重定向功能保存"></a>2.1:使用linux的重定向功能保存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl http://www.linux.com &gt;&gt; linux.html</div></pre></td></tr></table></figure>
<h5 id="2-2-可以使用curl的内置option-o-小写-保存网页"><a href="#2-2-可以使用curl的内置option-o-小写-保存网页" class="headerlink" title="2.2:可以使用curl的内置option:-o(小写)保存网页"></a>2.2:可以使用curl的内置option:-o(小写)保存网页</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -o linux.html http://www.linux.com</div></pre></td></tr></table></figure>
<p>执行完成后会显示如下界面，显示100%则表示保存成功</p>
<p>% Total    % Received % Xferd  Average Speed  Time    Time    Time  Current<br>                                Dload  Upload  Total  Spent    Left  Speed 100 79684    0 79684    0    0  3437k      0 –:–:– –:–:– –:–:– 7781k</p>
<h5 id="2-3-可以使用curl的内置option-O-大写-保存网页中的文件"><a href="#2-3-可以使用curl的内置option-O-大写-保存网页中的文件" class="headerlink" title="2.3:可以使用curl的内置option:-O(大写)保存网页中的文件"></a>2.3:可以使用curl的内置option:-O(大写)保存网页中的文件</h5><p>要注意这里后面的url要具体到某个文件，不然抓不下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O http://www.linux.com/hello.sh</div></pre></td></tr></table></figure></p>
<h4 id="3、测试网页返回值"><a href="#3、测试网页返回值" class="headerlink" title="3、测试网页返回值"></a>3、测试网页返回值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o /dev/null -s -w %&#123;http_code&#125; www.linux.com</div></pre></td></tr></table></figure>
<p>Ps:在脚本中，这是很常见的测试网站是否正常的用法</p>
<h4 id="4、指定proxy服务器以及其端口"><a href="#4、指定proxy服务器以及其端口" class="headerlink" title="4、指定proxy服务器以及其端口"></a>4、指定proxy服务器以及其端口</h4><p>很多时候上网需要用到代理服务器(比如是使用代理服务器上网或者因为使用curl别人网站而被别人屏蔽IP地址的时候)，幸运的是curl通过使用内置option：-x来支持设置代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -x 192.168.100.100:1080 http://www.linux.com</div></pre></td></tr></table></figure></p>
<h4 id="5、cookie"><a href="#5、cookie" class="headerlink" title="5、cookie"></a>5、cookie</h4><p>有些网站是使用cookie来记录session信息。对于chrome这样的浏览器，可以轻易处理cookie信息，但在curl中只要增加相关参数也是可以很容易的处理cookie</p>
<h5 id="5-1-保存http的response里面的cookie信息。内置option-c（小写）"><a href="#5-1-保存http的response里面的cookie信息。内置option-c（小写）" class="headerlink" title="5.1:保存http的response里面的cookie信息。内置option:-c（小写）"></a>5.1:保存http的response里面的cookie信息。内置option:-c（小写）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -c cookiec.txt  http://www.linux.com</div></pre></td></tr></table></figure>
<p>执行后cookie信息就被存到了cookiec.txt里面了</p>
<h5 id="5-2-保存http的response里面的header信息。内置option-D"><a href="#5-2-保存http的response里面的header信息。内置option-D" class="headerlink" title="5.2:保存http的response里面的header信息。内置option: -D"></a>5.2:保存http的response里面的header信息。内置option: -D</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -D cookied.txt http://www.linux.com</div></pre></td></tr></table></figure>
<p>执行后cookie信息就被存到了cookied.txt里面了</p>
<p>注意：-c(小写)产生的cookie和-D里面的cookie是不一样的。</p>
<h5 id="5-3-使用cookie"><a href="#5-3-使用cookie" class="headerlink" title="5.3:使用cookie"></a>5.3:使用cookie</h5><p>很多网站都是通过监视你的cookie信息来判断你是否按规矩访问他们的网站的，因此我们需要使用保存的cookie信息。内置option: -b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -b cookiec.txt http://www.linux.com</div></pre></td></tr></table></figure></p>
<h4 id="6、模仿浏览器"><a href="#6、模仿浏览器" class="headerlink" title="6、模仿浏览器"></a>6、模仿浏览器</h4><p>有些网站需要使用特定的浏览器去访问他们，有些还需要使用某些特定的版本。curl内置option:-A可以让我们指定浏览器去访问网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -A &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot; http://www.linux.com</div></pre></td></tr></table></figure></p>
<p>这样服务器端就会认为是使用IE8.0去访问的</p>
<h4 id="7、伪造referer（盗链）"><a href="#7、伪造referer（盗链）" class="headerlink" title="7、伪造referer（盗链）"></a>7、伪造referer（盗链）</h4><p>很多服务器会检查http访问的referer从而来控制访问。比如：你是先访问首页，然后再访问首页中的邮箱页面，这里访问邮箱的referer地址就是访问首页成功后的页面地址，如果服务器发现对邮箱页面访问的referer地址不是首页的地址，就断定那是个盗连了<br>curl中内置option：-e可以让我们设定referer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -e &quot;www.linux.com&quot; http://mail.linux.com</div></pre></td></tr></table></figure></p>
<p>这样就会让服务器其以为你是从www.linux.com点击某个链接过来的</p>
<h4 id="8、下载文件"><a href="#8、下载文件" class="headerlink" title="8、下载文件"></a>8、下载文件</h4><h5 id="8-1：利用curl下载文件。"><a href="#8-1：利用curl下载文件。" class="headerlink" title="8.1：利用curl下载文件。"></a>8.1：利用curl下载文件。</h5><p>使用内置option：-o(小写)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure></p>
<p>使用内置option：-O（大写)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O http://www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure></p>
<p>这样就会以服务器上的名称保存文件到本地</p>
<h5 id="8-2：循环下载"><a href="#8-2：循环下载" class="headerlink" title="8.2：循环下载"></a>8.2：循环下载</h5><p>有时候下载图片可以能是前面的部分名称是一样的，就最后的尾椎名不一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O http://www.linux.com/dodo[1-5].JPG</div></pre></td></tr></table></figure></p>
<p>这样就会把dodo1，dodo2，dodo3，dodo4，dodo5全部保存下来</p>
<h5 id="8-3：下载重命名"><a href="#8-3：下载重命名" class="headerlink" title="8.3：下载重命名"></a>8.3：下载重命名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</div></pre></td></tr></table></figure>
<p>由于下载的hello与bb中的文件名都是dodo1，dodo2，dodo3，dodo4，dodo5。因此第二次下载的会把第一次`下载的覆盖，这样就需要对文件进行重命名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</div></pre></td></tr></table></figure></p>
<p>这样在hello/dodo1.JPG的文件下载下来就会变成hello_dodo1.JPG,其他文件依此类推，从而有效的避免了文件被覆盖</p>
<h5 id="8-4：分块下载"><a href="#8-4：分块下载" class="headerlink" title="8.4：分块下载"></a>8.4：分块下载</h5><p>有时候下载的东西会比较大，这个时候我们可以分段下载。使用内置option：-r<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG</div><div class="line"># curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG</div><div class="line"># curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</div><div class="line"># cat dodo1_part* &gt; dodo1.JPG</div></pre></td></tr></table></figure></p>
<p>这样就可以查看dodo1.JPG的内容了</p>
<h5 id="8-5：通过ftp下载文件"><a href="#8-5：通过ftp下载文件" class="headerlink" title="8.5：通过ftp下载文件"></a>8.5：通过ftp下载文件</h5><p>curl可以通过ftp下载文件，curl提供两种从ftp中下载的语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</div><div class="line"># curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure></p>
<h5 id="8-6：显示下载进度条"><a href="#8-6：显示下载进度条" class="headerlink" title="8.6：显示下载进度条"></a>8.6：显示下载进度条</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -# -O http://www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure>
<h5 id="8-7：不会显示下载进度信息"><a href="#8-7：不会显示下载进度信息" class="headerlink" title="8.7：不会显示下载进度信息"></a>8.7：不会显示下载进度信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -s -O http://www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure>
<h4 id="9、断点续传"><a href="#9、断点续传" class="headerlink" title="9、断点续传"></a>9、断点续传</h4><p>在windows中，我们可以使用迅雷这样的软件进行断点续传。curl可以通过内置option:-C同样可以达到相同的效果<br>如果在下载dodo1.JPG的过程中突然掉线了，可以使用以下的方式续传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -C -O http://www.linux.com/dodo1.JPG</div></pre></td></tr></table></figure></p>
<h4 id="10、上传文件"><a href="#10、上传文件" class="headerlink" title="10、上传文件"></a>10、上传文件</h4><p>curl不仅仅可以下载文件，还可以上传文件。通过内置option:-T来实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -T dodo1.JPG -u 用户名:密码 ftp://www.linux.com/img/</div></pre></td></tr></table></figure></p>
<p>这样就向ftp服务器上传了文件dodo1.JPG</p>
<h4 id="11、显示抓取错误"><a href="#11、显示抓取错误" class="headerlink" title="11、显示抓取错误"></a>11、显示抓取错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -f http://www.linux.com/error</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> curl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlite在命令行的使用]]></title>
      <url>/2018/01/25/sqlite%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>一、基本简介</p>
<p>SQLite 是一个自持的（self-contained）、无服务器的、零配置的、事务型的关系型数据库引擎。因为他很小，所以也可以作为嵌入式数据库内建在你的应用程序中。SQLite 被应用在 Solaris 10操作系统、Mac OS 操作系统、iPhone 和 Skype 中。QT4 、Python 、 PHP 都默认支持 SQLite ，Firefox Amarok 等流行的应用程序在内部也使用了 SQLite.</p>
<p>SQLite   数据库引擎实现了主要的 SQL-92 标准，引擎本身只有一个文件，大小不到 300k ，但是并不作为一个独立的进程运行，而是动态或者静态的链接到其他应用程序中。它生成的数据库文件是一个普通的磁盘文件，可以放置在任何目录下。SQLite 本身是 C 语言开发的，开源也跨平台，并且被所有的主流编程语言支持。</p>
<p>相关资源</p>
<p>sqlite.org<br>wikipedia.org</p>
<p>二、下载安装<br>在 Windows 上安装 SQLite<br>请访问 SQLite 下载页面，从 Windows 区下载预编译的二进制文件。</p>
<p>您需要下载 sqlite-shell-win32-<em>.zip 和 sqlite-dll-win32-</em>.zip 压缩文件。</p>
<p>创建文件夹 C:\sqlite，并在此文件夹下解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件。</p>
<p>添加 C:\sqlite 到 PATH 环境变量，最后在命令提示符下，使用 sqlite3 命令，将显示如下结果。</p>
<p>1<br>2<br>3<br>4<br>5<br>C:>sqlite3<br>SQLite version 3.7.15.2 2013-01-09 11:53:05<br>Enter “.help” for instructions<br>Enter SQL statements terminated with a “;”<br>sqlite&gt;<br>在 Linux 上安装 SQLite<br>目前，几乎所有版本的 Linux 操作系统都附带 SQLite。所以，只要使用下面的命令来检查您的机器上是否已经安装了 SQLite。</p>
<p>1<br>2<br>3<br>4<br>5<br>$sqlite3<br>SQLite version 3.7.15.2 2013-01-09 11:53:05<br>Enter “.help” for instructions<br>Enter SQL statements terminated with a “;”<br>sqlite&gt;<br>如果没有看到上面的结果，那么就意味着没有在 Linux 机器上安装 SQLite。因此，让我们按照下面的步骤安装 SQLite：</p>
<p>请访问 SQLite 下载页面，从源代码区下载 sqlite-autoconf-*.tar.gz。</p>
<p>步骤如下：</p>
<p>1<br>2<br>3<br>4<br>5<br>$tar xvfz sqlite-autoconf-3071502.tar.gz<br>$cd sqlite-autoconf-3071502<br>$./configure –prefix=/usr/local<br>$make<br>$make install<br>上述步骤将在 Linux 机器上安装 SQLite，您可以按照上述讲解的进行验证。</p>
<p>在 Mac OS X 上安装 SQLite<br>最新版本的 Mac OS X 会预安装 SQLite，但是如果没有可用的安装，只需按照如下步骤进行：</p>
<p>请访问 SQLite 下载页面，从源代码区下载 sqlite-autoconf-*.tar.gz。</p>
<p>步骤如下：</p>
<p>1<br>2<br>3<br>4<br>5<br>$tar xvfz sqlite-autoconf-3071502.tar.gz<br>$cd sqlite-autoconf-3071502<br>$./configure –prefix=/usr/local<br>$make<br>$make install<br>上述步骤将在 Mac OS X 机器上安装 SQLite，您可以使用下列命令进行验证：</p>
<p>1<br>2<br>3<br>4<br>5<br>$sqlite3<br>SQLite version 3.7.15.2 2013-01-09 11:53:05<br>Enter “.help” for instructions<br>Enter SQL statements terminated with a “;”<br>sqlite&gt;<br>最后，在 SQLite 命令提示符下，使用 SQLite 命令做练习。</p>
<p>三、基本命令 </p>
<p>1、进入命令行环境：sqlite3<br>打开一个控制台窗口，输入 sqlite3 回车，这时你就进入了 SQLite 命令行环境，如图</p>
<p>它显示了版本号，并告诉你每一条 SQL 语句必须用分号 ； 结尾 </p>
<p>2、命令行帮助：.help<br>在命令行环境下输入 .help 回车，显示所有可使用的命令以及这些命令的帮助。注意：所有的命令开头都是一个点</p>
<p>3、退出命令行环境<br>.quit 或者 .exit  都可以退出</p>
<p>四、数据库和表的相关命令</p>
<p>1、创建一个新的数据库：sqlite3     文件名</p>
<p>先建立一个 Db 目录，并在 Db 目录中创建一个 test.db 数据库文件，打开控制台窗口，命令如下：</p>
<p>1<br>2<br>3<br>mkdir Db<br>cd Db<br>sqlite3 test.db<br>2、打开一个已经存在的数据库：sqlite3      已经存在的文件名</p>
<p>创建一个新数据库和打开一个已经存在的数据库命令是一模一样的，如果文件在当前目录下不存在，则新建；如果存在，则打开。</p>
<p>3、导入数据：.read     数据文件</p>
<p>打开记事本，并将下列 SQL 语句复制到记事本中，保存为 test.sql 到上面说到的 Db 目录下，在命令行环境中输入</p>
<p>1<br>.read   test.sql<br>即将所有的数据导入到 test.db 数据库中。</p>
<p>test.db 导入数据</p>
<p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>BEGIN TRANSACTION;<br>CREATE TABLE Cars(Id integer PRIMARY KEY, Name text, Cost integer);<br>INSERT INTO Cars VALUES(1,’Audi’,52642);<br>INSERT INTO Cars VALUES(2,’Mercedes’,57127);<br>INSERT INTO Cars VALUES(3,’Skoda’,9000);<br>INSERT INTO Cars VALUES(4,’Volvo’,29000);<br>INSERT INTO Cars VALUES(5,’Bentley’,350000);<br>INSERT INTO Cars VALUES(6,’Citroen’,21000);<br>INSERT INTO Cars VALUES(7,’Hummer’,41400);<br>INSERT INTO Cars VALUES(8,’Volkswagen’,21600);<br>COMMIT;</p>
<p>BEGIN TRANSACTION;<br>CREATE TABLE Orders(Id integer PRIMARY KEY, OrderPrice integer CHECK(OrderPrice&gt;0),<br>                    Customer text);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(1200, “Williamson”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(200, “Robertson”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(40, “Robertson”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(1640, “Smith”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(100, “Robertson”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(50, “Williamson”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(150, “Smith”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(250, “Smith”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(840, “Brown”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(440, “Black”);<br>INSERT INTO Orders(OrderPrice, Customer) VALUES(20, “Brown”);<br>COMMIT;</p>
<p>BEGIN TRANSACTION;<br>CREATE TABLE Friends(Id integer PRIMARY KEY, Name text UNIQUE NOT NULL,<br>                     Sex text CHECK(Sex IN (‘M’, ‘F’)));<br>INSERT INTO Friends VALUES(1,’Jane’, ‘F’);<br>INSERT INTO Friends VALUES(2,’Thomas’, ‘M’);<br>INSERT INTO Friends VALUES(3,’Franklin’, ‘M’);<br>INSERT INTO Friends VALUES(4,’Elisabeth’, ‘F’);<br>INSERT INTO Friends VALUES(5,’Mary’, ‘F’);<br>INSERT INTO Friends VALUES(6,’Lucy’, ‘F’);<br>INSERT INTO Friends VALUES(7,’Jack’, ‘M’);<br>COMMIT;</p>
<p>BEGIN TRANSACTION;<br>CREATE TABLE IF NOT EXISTS Customers(CustomerId integer PRIMARY KEY, Name text);<br>INSERT INTO Customers(Name) VALUES(‘Paul Novak’);<br>INSERT INTO Customers(Name) VALUES(‘Terry Neils’);<br>INSERT INTO Customers(Name) VALUES(‘Jack Fonda’);<br>INSERT INTO Customers(Name) VALUES(‘Tom Willis’);</p>
<p>CREATE TABLE IF NOT EXISTS Reservations(Id integer PRIMARY KEY,<br>                                        CustomerId integer, Day text);<br>INSERT INTO Reservations(CustomerId, Day) VALUES(1, ‘2009-22-11’);<br>INSERT INTO Reservations(CustomerId, Day) VALUES(2, ‘2009-28-11’);<br>INSERT INTO Reservations(CustomerId, Day) VALUES(2, ‘2009-29-11’);<br>INSERT INTO Reservations(CustomerId, Day) VALUES(1, ‘2009-29-11’);<br>INSERT INTO Reservations(CustomerId, Day) VALUES(3, ‘2009-02-12’);<br>COMMIT;</p>
<p>BEGIN TRANSACTION;<br>CREATE TABLE Names(Id integer, Name text);<br>INSERT INTO Names VALUES(1,’Tom’);<br>INSERT INTO Names VALUES(2,’Lucy’);<br>INSERT INTO Names VALUES(3,’Frank’);<br>INSERT INTO Names VALUES(4,’Jane’);<br>INSERT INTO Names VALUES(5,’Robert’);<br>COMMIT;</p>
<p>BEGIN TRANSACTION;<br>CREATE TABLE Books(Id integer PRIMARY KEY, Title text, Author text,<br>                   Isbn text default ‘not available’);<br>INSERT INTO Books VALUES(1,’War and Peace’,’Leo Tolstoy’,’978-0345472403’);<br>INSERT INTO Books VALUES(2,’The Brothers Karamazov’,<br>                         ‘Fyodor Dostoyevsky’,’978-0486437910’);<br>INSERT INTO Books VALUES(3,’Crime and Punishment’,<br>                         ‘Fyodor Dostoyevsky’,’978-1840224306’);<br>COMMIT<br>4、列出所有的数据表： .tables<br>完成上面所有的工作以后，我们就可以列出所有的数据表了</p>
<p>5、显示数据库结构：.schema</p>
<p>其实就是一些 SQL 语句，他们描述了数据库的结构，如图</p>
<p>6、显示表的结构：.schema    表名</p>
<p> 7、导出某个表的数据： .dump    表名</p>
<p>这时我们可以看到，整个表以 SQL 语句的形式为导出来了，但是只是显示在终端上，如何把它导出到文件中呢？</p>
<p>8、设置导出目标：<br>1<br>.output 文件名<br>或者<br>1<br>.output stdout<br>先运行 .output cars.sql ，然后再运行 .dump 命令试试看？如果要回复成导出到终端（标准输出），则运行 .output stdout </p>
<p>五、数据显示相关命令 </p>
<p>1、设置分隔符：.separator 分隔符<br>我们可以首先运行 SELECT <em> FROM Names； ，可以看到默认的分隔符是 |<br>运行.separator : 以后，再 SELECT </em> FROM Names；，可以看到分隔符已经变成 : 了 </p>
<p>2、设置显示模式：.mode    模式</p>
<p>有好几种显示模式，默认的是 list 显示模式，一般我们使用 column 显示模式，还有其他几种显示模式可以 .help 看 mode 相关内容。看看下面的图，和上面是不是显示的不一样了？</p>
<p>3、显示标题栏：.headers   on</p>
<p>看看，是不是又不太一样了？</p>
<p>4、设置每一列的显示宽度：.width     w1,w2,w3………</p>
<p>一些内容，默认的宽度显示不下，这个命令就有用了</p>
<p>5、设置 NULL 值显示成什么样子： .nullvalue     你想要的NULL值格式</p>
<p>默认情况下NULL值什么也不显示，你可以设置成你自己想要的样子</p>
<p>6、列出当前显示格式设置情况：.show</p>
<p>7、配置文件 .sqliterc</p>
<p>如果我们每次进入命令行都要重新设置显示格式，很麻烦，其实 .show 命令列出的所有设置项都可以保存到一个 .sqliterc 文件中，这样每次进入命令行就自动设置好了。.sqlterc 文件在 Linux 下保存在用户的 Home 目录下，在 Windows 下可以保存到任何目录下，但是需要设置环境变量让数据库引擎能找到它，感兴趣的可以看看帮助。 </p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> sqlite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android简单拍照]]></title>
      <url>/2018/01/17/Android%E7%AE%80%E5%8D%95%E6%8B%8D%E7%85%A7/</url>
      <content type="html"><![CDATA[<h1 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h1><h4 id="1、简单拍照"><a href="#1、简单拍照" class="headerlink" title="1、简单拍照"></a>1、简单拍照</h4><h3 id="1-1请求camera的feature"><a href="#1-1请求camera的feature" class="headerlink" title="1.1请求camera的feature"></a>1.1请求camera的feature</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt; </div><div class="line"> &lt;uses-feature  android:name=&quot;android.hardware.camera&quot;  android:required=&quot;true&quot;  /&gt; </div><div class="line">...</div><div class="line"> &lt;/manifest&gt;</div></pre></td></tr></table></figure>
<p>如果我们的app必须使用相机，required=”true”可以声明为true，这样做的话，Google Play不允许没有相机的设备下载此程度。如果我们没有声明，但是没有相机的用户下载了，我们可以使用 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#hasSystemFeature(java.lang.String" target="_blank" rel="external">hasSystemFeature(PackageManager.FEATURE_CAMERA)</a>).来判断。</p>
<h3 id="1-2使用相机来拍照"><a href="#1-2使用相机来拍照" class="headerlink" title="1.2使用相机来拍照"></a>1.2使用相机来拍照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static final int REQUEST_IMAGE_CAPTURE = 1;</div><div class="line"></div><div class="line">private void dispatchTakePictureIntent() &#123;</div><div class="line">    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">    if (takePictureIntent.resolveActivity(getPackageManager()) != null) &#123;</div><div class="line">        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <a href="https://developer.android.com/reference/android/content/Intent.html?hl=zh-cn#resolveActivity(android.content.pm.PackageManager" target="_blank" rel="external">resolveActivity()</a>)返回的是第一个可以处理这个inten的请求的activity，如果是null的话，证明没有activity可以被使用(不一定是不能用，有可能是占用)，所以做这个判断很有必要。</p>
<h4 id="1-3获取缩略图"><a href="#1-3获取缩略图" class="headerlink" title="1.3获取缩略图"></a>1.3获取缩略图</h4><p>使用intent系统内置的data可以获取缩略图，示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    if (requestCode == REQUEST_IMAGE_CAPTURE &amp;&amp; resultCode == RESULT_OK) &#123;</div><div class="line">        Bundle extras = data.getExtras();</div><div class="line">        Bitmap imageBitmap = (Bitmap) extras.get(&quot;data&quot;);</div><div class="line">        mImageView.setImageBitmap(imageBitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这样获取的只是缩略图，我们要取得原图的话还需要一点操作</p>
</blockquote>
<h4 id="1-4获取原图"><a href="#1-4获取原图" class="headerlink" title="1.4获取原图"></a>1.4获取原图</h4><p>如果想保存完整图片的话，我们应该提供一个完整的文件用来存储相机拍摄的图片<br>一般来说，用户用设备摄像头捕捉到的任何照片都应该保存在公共外部存储设备上，以便所有应用都能访问这些照片。我们选择 <a href="https://developer.android.com/reference/android/os/Environment.html?hl=zh-cn#getExternalStoragePublicDirectory(java.lang.String" target="_blank" rel="external">getExternalStoragePublicDirectory()</a>)、 <a href="https://developer.android.com/reference/android/os/Environment.html?hl=zh-cn#DIRECTORY_PICTURES" target="_blank" rel="external">DIRECTORY_PICTURES</a>提供的目录。<br>因为涉及存储，所以需要声明相关的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ...&gt;</div><div class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p>
<p>但是，如果我们希望照片只保留到您的应用程序中，则可以使用 <a href="https://developer.android.com/reference/android/content/Context.html?hl=zh-cn#getExternalFilesDir(java.lang.String" target="_blank" rel="external">getExternalFilesDir()</a>)提供的目录。在Android 4.3和更低的版本中，写到这个目录也需要写外部存储权限。从Android 4.4开始，不再需要权限，因为其他应用程序无法访问该目录，我们可以通过添加maxSdkVersion属性来声明仅在较低版本的Android上只请求允许的权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ...&gt;</div><div class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</div><div class="line">                     android:maxSdkVersion=&quot;18&quot; /&gt;</div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们通过 <a href="https://developer.android.com/reference/android/content/Context.html?hl=zh-cn#getExternalFilesDir(java.lang.String" target="_blank" rel="external">getExternalFilesDir()</a>) 或者 <a href="https://developer.android.com/reference/android/content/Context.html?hl=zh-cn#getFilesDir(" target="_blank" rel="external">getFilesDir()</a>)存储的文件会随着app卸载被一起删除</p>
</blockquote>
<p>一旦确定了该文件的目录，就需要创建一个唯一的文件名，我们使用时间戳。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">String mCurrentPhotoPath;</div><div class="line"></div><div class="line">private File createImageFile() throws IOException &#123;</div><div class="line">    // Create an image file name</div><div class="line">    String timeStamp = new SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;).format(new Date());</div><div class="line">    String imageFileName = &quot;JPEG_&quot; + timeStamp + &quot;_&quot;;</div><div class="line">    File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);</div><div class="line">    File image = File.createTempFile(</div><div class="line">        imageFileName,  /* prefix */</div><div class="line">        &quot;.jpg&quot;,         /* suffix */</div><div class="line">        storageDir      /* directory */</div><div class="line">    );</div><div class="line"></div><div class="line">    // Save a file: path for use with ACTION_VIEW intents</div><div class="line">    mCurrentPhotoPath = image.getAbsolutePath();</div><div class="line">    return image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的流程如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">static final int REQUEST_TAKE_PHOTO = 1;</div><div class="line"></div><div class="line">private void dispatchTakePictureIntent() &#123;</div><div class="line">    Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">    // Ensure that there&apos;s a camera activity to handle the intent</div><div class="line">    if (takePictureIntent.resolveActivity(getPackageManager()) != null) &#123;</div><div class="line">        // Create the File where the photo should go</div><div class="line">        File photoFile = null;</div><div class="line">        try &#123;</div><div class="line">            photoFile = createImageFile();</div><div class="line">        &#125; catch (IOException ex) &#123;</div><div class="line">            // Error occurred while creating the File</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        // Continue only if the File was successfully created</div><div class="line">        if (photoFile != null) &#123;</div><div class="line">            Uri photoURI = FileProvider.getUriForFile(this,</div><div class="line">                                                  &quot;com.example.android.fileprovider&quot;,</div><div class="line">                                                  photoFile);</div><div class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);</div><div class="line">            startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于7.0或者更高,我们需要使用<code>getUriForFile(Context, String, File)</code>,如果用的是这样的 <code>file://</code> URI ，则会返回一个<code>FileUriExposedException</code>异常。因此，我们要使用 <a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn" target="_blank" rel="external">FileProvider</a>.</p>
<p>provider属于四大组件，需要在清单文件声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;application&gt;</div><div class="line">   ...</div><div class="line">   &lt;provider</div><div class="line">        android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class="line">        android:authorities=&quot;com.example.android.fileprovider&quot;</div><div class="line">        android:exported=&quot;false&quot;</div><div class="line">        android:grantUriPermissions=&quot;true&quot;&gt;</div><div class="line">        &lt;meta-data</div><div class="line">            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</div><div class="line">            android:resource=&quot;@xml/file_paths&quot;&gt;&lt;/meta-data&gt;</div><div class="line">    &lt;/provider&gt;</div><div class="line">    ...</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure></p>
<p>确保<code>getUriForFile</code>的第二个参数和<code>android:authorities</code>填写的一致。</p>
<p>创建file_paths xml，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;external-path name=&quot;my_images&quot; path=&quot;Android/data/com.example.package.name/files/Pictures&quot; /&gt;</div><div class="line">&lt;/paths&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Camera </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)ConstraintLayout在项目中实践与总结]]></title>
      <url>/2017/12/04/%E8%BD%AC-ConstraintLayout%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="ConstraintLayout在项目中实践与总结"><a href="#ConstraintLayout在项目中实践与总结" class="headerlink" title="ConstraintLayout在项目中实践与总结"></a>ConstraintLayout在项目中实践与总结</h1><p><a href="https://juejin.im/post/5a1d9ba66fb9a044fb07819e" target="_blank" rel="external">https://juejin.im/post/5a1d9ba66fb9a044fb07819e</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/78011599" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/78011599</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ConstraintLayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac上用终端启动和关闭mysql服务]]></title>
      <url>/2017/12/01/mac%E4%B8%8A%E7%94%A8%E7%BB%88%E7%AB%AF%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%ADmysql%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>启动服务<br>mysql.server start<br>关闭服务<br>mysql.server stop<br>重启服务<br>mysql.server restart</p>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[brew常用命令]]></title>
      <url>/2017/11/27/brew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ol>
<li>安装（需要 Ruby，不过一般自带都有）：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</div></pre></td></tr></table></figure>
<ol>
<li>搜索：<code>brew search XXX   在安装之前可以先查询一下，是否有这个软件</code> </li>
<li>查询：<code>brew info XXX</code> 主要看具体的信息，比如目前的版本，依赖，安装后注意事项等</li>
<li>查看依赖：  brew deps 查看包的依赖</li>
<li>安装：brew install xxx  用于安装软件</li>
<li>更新：<code>brew update</code> 这会更新 Homebrew 自己，并且使得接下来的两个操作有意义——</li>
<li>检查过时（是否有新版本）：<code>brew outdated</code> 这回列出所有安装的软件里可以升级的那些</li>
<li>升级：<code>brew upgrade</code> 升级所有可以升级的软件们</li>
<li>清理：<code>brew cleanup</code> 清理不需要的版本极其安装包缓存</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> brew </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 日常积累]]></title>
      <url>/2017/11/25/Android-%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/</url>
      <content type="html"><![CDATA[<ol>
<li>More than one file was found with OS independent path ‘META-INF/ASL2.0’</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">packagingOptions &#123;</div><div class="line">        exclude &apos;META-INF/DEPENDENCIES&apos;</div><div class="line">        exclude &apos;META-INF/NOTICE&apos;</div><div class="line">        exclude &apos;META-INF/LICENSE&apos;</div><div class="line">        exclude &apos;META-INF/LICENSE.txt&apos;</div><div class="line">        exclude &apos;META-INF/NOTICE.txt&apos;</div><div class="line">        exclude &apos;META-INF/ASL2.0&apos;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>ArrayList继承自AbstractList,前者实现了Serializable接口，后者未实现，所以慎用ArrayList的subList方法，它返回的是一个AbstractList。</li>
<li>startActivityForResult()执行后onActivityResult立即执行，有可能是activity的launchmode为singletask。</li>
<li>对list用foreach遍历的时候，不能直接删除，可以使用迭代器。</li>
<li>对于HashMap,如果含有值，put相同key的时候返回上一次的值，如果没有值，返回null。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/**返回qqq*/</div><div class="line">Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;a&quot;, &quot;qqq&quot;); Object o1 =  map.put(&quot;a&quot;,&quot;qin&quot;) ; System.out.println(o1);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">返回null</div><div class="line">Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); //map.put(&quot;a&quot;, &quot;qqq&quot;); Object o1 =  map.put(&quot;a&quot;,&quot;qin&quot;) ; System.out.println(o1);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建 FTP 文件服务]]></title>
      <url>/2017/11/24/%E6%90%AD%E5%BB%BA-FTP-%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="搭建-FTP-文件服务（转自腾讯云）"><a href="#搭建-FTP-文件服务（转自腾讯云）" class="headerlink" title="搭建 FTP 文件服务（转自腾讯云）"></a>搭建 FTP 文件服务（转自腾讯云）</h2><h3 id="1-安装并启动-FTP-服务"><a href="#1-安装并启动-FTP-服务" class="headerlink" title="1. 安装并启动 FTP 服务"></a>1. 安装并启动 FTP 服务</h3><ul>
<li>安装 VSFTPD</li>
</ul>
<p>使用 <code>yum</code> 安装 vsftpd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install vsftpd -y</div></pre></td></tr></table></figure>
<ul>
<li>启动 VSFTPD</li>
</ul>
<p>安装完成后，启动 FTP 服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service vsftpd start</div></pre></td></tr></table></figure>
<p>启动后，可以看到系统已经监听了 21 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nltp | grep 21</div></pre></td></tr></table></figure>
<p>此时，访问 ftp://<strong><strong>**</strong></strong> 可浏览机器上的 /var/ftp 目录了。</p>
<h3 id="2-配置-FTP-权限"><a href="#2-配置-FTP-权限" class="headerlink" title="2. 配置 FTP 权限"></a>2. 配置 FTP 权限</h3><ul>
<li>了解 VSFTP 配置</li>
</ul>
<p>vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：</p>
<ol>
<li>vsftpd.conf 为主要配置文件</li>
<li>ftpusers 配置禁止访问 FTP 服务器的用户列表</li>
<li>user_list 配置用户访问控制</li>
</ol>
<ul>
<li>阻止匿名访问和切换根目录</li>
</ul>
<p>匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。</p>
<p>编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 禁用匿名用户</div><div class="line">anonymous_enable=NO</div><div class="line"></div><div class="line"># 禁止切换根目录</div><div class="line">chroot_local_user=YES</div></pre></td></tr></table></figure>
<p>编辑完成后，保存配置，重新启动 FTP 服务，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service vsftpd restart</div></pre></td></tr></table></figure></p>
<ul>
<li>创建 FTP 用户</li>
</ul>
<p>创建一个用户 <code>ftpuser</code> ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd ftpuser</div></pre></td></tr></table></figure>
<ul>
<li>为用户 <code>ftpuser</code> 设置密码 ：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;tmKSsoUW&quot; | passwd ftpuser --stdin</div></pre></td></tr></table></figure>
<ul>
<li>限制该用户仅能通过 FTP 访问</li>
</ul>
<p>限制用户 <code>ftpuser</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -s /sbin/nologin ftpuser</div></pre></td></tr></table></figure>
<ul>
<li>为用户分配主目录</li>
</ul>
<p>为用户 <code>ftpuser</code> 创建主目录并约定：</p>
<p><code>/data/ftp</code> 为主目录, 该目录不可上传文件</p>
<p><code>/data/ftp/pub</code> 文件只能上传到该目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/ftp/pub</div></pre></td></tr></table></figure>
<p>创建登录欢迎文件 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;Welcome to use FTP service.&quot; &gt; /data/ftp/welcome.txt</div></pre></td></tr></table></figure>
<p>设置访问权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</div></pre></td></tr></table></figure>
<p>设置为用户的主目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -d /data/ftp ftpuser</div></pre></td></tr></table></figure>
<h3 id="3-配置-FTP-OK"><a href="#3-配置-FTP-OK" class="headerlink" title="3. 配置 FTP OK"></a>3. 配置 FTP OK</h3>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go的命令行参数]]></title>
      <url>/2017/11/10/Go%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的checkView]]></title>
      <url>/2017/10/24/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84checkView/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fkthe2n1e4g30b9064x6r.gif" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div></pre></td><td class="code"><pre><div class="line">public class CheckView extends View &#123;</div><div class="line">    private Context mContext;</div><div class="line">    //圆环画笔</div><div class="line">    private Paint mPaintRing;</div><div class="line">    //对号画笔</div><div class="line">    private Paint mPaintTick;</div><div class="line">    //圆的画笔</div><div class="line">    private Paint mPaintCircle;</div><div class="line"></div><div class="line">    private int unCheckBaseColor;</div><div class="line">    private int checkBaseColor;</div><div class="line">    private int checkTickColor;</div><div class="line">    private RectF mRectF = new RectF();</div><div class="line">    private float centerX, centerY;</div><div class="line">    private float[] mPoints = new float[8];</div><div class="line">    private boolean mIsChecked;</div><div class="line">    private int radius;</div><div class="line">    private float tickRadius;</div><div class="line">    private float tickRadiusOffset;</div><div class="line"></div><div class="line">    private int ringProgress = 0;</div><div class="line">    private int circleProgress = 0;</div><div class="line">    private int rightAlpha = 0;</div><div class="line">    private boolean IsAnimeRuning;</div><div class="line">    private boolean ringAnimeEnd;</div><div class="line"></div><div class="line">    private OnCheckChangeListener mCheckChangeListener;</div><div class="line">    public CheckView(Context context) &#123;</div><div class="line">        this(context, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CheckView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        mContext = context;</div><div class="line">        init(attrs);</div><div class="line">        initPaint();</div><div class="line">        setClickEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initPaint() &#123;</div><div class="line">        mPaintRing = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaintRing.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaintRing.setColor(mIsChecked ? checkBaseColor : unCheckBaseColor);</div><div class="line">        mPaintRing.setStrokeWidth(dp2px(mContext, 2.5f));</div><div class="line">        mPaintRing.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"></div><div class="line">        mPaintCircle = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaintCircle.setColor(checkTickColor);</div><div class="line">        mPaintCircle.setStrokeWidth(dp2px(mContext, 1));</div><div class="line"></div><div class="line">        mPaintTick = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        mPaintTick.setColor(mIsChecked ? checkTickColor : unCheckBaseColor);</div><div class="line">        mPaintTick.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaintTick.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        mPaintTick.setStrokeWidth(dp2px(mContext, 2.5f));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init(AttributeSet attrs) &#123;</div><div class="line">        TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.CheckView);</div><div class="line">        unCheckBaseColor = a.getColor(R.styleable.CheckView_uncheck_color, getResources().getColor(R.color.tick_gray));</div><div class="line">        checkBaseColor = a.getColor(R.styleable.CheckView_check_color, getResources().getColor(R.color.tick_yellow));</div><div class="line">        checkTickColor = a.getColor(R.styleable.CheckView_check_right_color, getResources().getColor(R.color.tick_white));</div><div class="line"></div><div class="line">        a.recycle();</div><div class="line">        radius = dp2px(mContext, 30);</div><div class="line">        tickRadius = dp2px(mContext, 12);</div><div class="line">        tickRadiusOffset = dp2px(mContext, 4);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = getMySize(radius * 2, widthMeasureSpec);</div><div class="line">        int height = getMySize(radius * 2, heightMeasureSpec);</div><div class="line"></div><div class="line">        int res = Math.max(width, height);</div><div class="line"></div><div class="line">        setMeasuredDimension(res, res);</div><div class="line"></div><div class="line">        centerX = getMeasuredWidth() / 2;</div><div class="line">        centerY = getMeasuredHeight() / 2;</div><div class="line"></div><div class="line">        mRectF.set(centerX - radius, centerY - radius, centerX + radius, centerY + radius);</div><div class="line"></div><div class="line"></div><div class="line">        //设置打钩的几个点坐标</div><div class="line">        mPoints[0] = centerX - tickRadius + tickRadiusOffset;</div><div class="line">        mPoints[1] = (float) centerY;</div><div class="line">        mPoints[2] = centerX - tickRadius / 2 + tickRadiusOffset;</div><div class="line">        mPoints[3] = centerY + tickRadius / 2;</div><div class="line">        mPoints[4] = centerX - tickRadius / 2 + tickRadiusOffset;</div><div class="line">        mPoints[5] = centerY + tickRadius / 2;</div><div class="line">        mPoints[6] = centerX + tickRadius * 2 / 4 + tickRadiusOffset;</div><div class="line">        mPoints[7] = centerY - tickRadius * 2 / 4;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(final Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        if (!mIsChecked) &#123;</div><div class="line">            canvas.drawArc(mRectF, 90, 360, false, mPaintRing);</div><div class="line">            canvas.drawLines(mPoints, mPaintTick);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (ringAnimeEnd)&#123;</div><div class="line">            mPaintCircle.setColor(checkBaseColor);</div><div class="line">            //画满黄色的圆</div><div class="line">            canvas.drawCircle(centerX,centerY,radius,mPaintCircle);</div><div class="line">            mPaintCircle.setColor(checkTickColor);</div><div class="line">        &#125;</div><div class="line">        //画圆环</div><div class="line">        canvas.drawArc(mRectF, 90, ringProgress, false, mPaintRing);</div><div class="line">        //画逐渐缩小的白圆</div><div class="line">        canvas.drawCircle(centerX,centerY,radius-circleProgress,mPaintCircle);</div><div class="line">        //画对号</div><div class="line">        mPaintTick.setAlpha(rightAlpha);</div><div class="line">        canvas.drawLines(mPoints,mPaintTick);</div><div class="line">        if (!IsAnimeRuning) &#123;</div><div class="line">            IsAnimeRuning = true;</div><div class="line">            ObjectAnimator ringAnimator = ObjectAnimator.ofInt(this,&quot;ringProgress&quot;,0,360);</div><div class="line">            ObjectAnimator circleAnimator = ObjectAnimator.ofInt(this,&quot;circleProgress&quot;,0,radius);</div><div class="line">            ObjectAnimator rightAnimator = ObjectAnimator.ofInt(this,&quot;rightAlpha&quot;,0,255);</div><div class="line">            ringAnimator.addListener(new AnimatorListenerAdapter() &#123;</div><div class="line">                @Override</div><div class="line">                public void onAnimationEnd(Animator animation) &#123;</div><div class="line">                    super.onAnimationEnd(animation);</div><div class="line">                    ringAnimeEnd = true;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat(&quot;scaleX&quot;, 1f,1.2f,1f);</div><div class="line">            PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat(&quot;scaleY&quot;, 1f,1.2f,1f);</div><div class="line">            ObjectAnimator scaleAnimator = ObjectAnimator.ofPropertyValuesHolder(this, holder1, holder2);</div><div class="line">            AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">            animatorSet.playSequentially(ringAnimator,circleAnimator,rightAnimator,scaleAnimator);</div><div class="line">            animatorSet.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    private void reset() &#123;</div><div class="line">        initPaint();</div><div class="line">        ringProgress = 0;</div><div class="line">        circleProgress = 0;</div><div class="line">        rightAlpha = 0;</div><div class="line">        IsAnimeRuning = false;</div><div class="line">        ringAnimeEnd = false;</div><div class="line">        mRectF.set(centerX - radius, centerY - radius, centerX + radius, centerY + radius);</div><div class="line"></div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setClickEvent() &#123;</div><div class="line">        this.setOnClickListener(new OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                mIsChecked = !mIsChecked;</div><div class="line">                reset();</div><div class="line">                if (mCheckChangeListener!=null)&#123;</div><div class="line">                    mCheckChangeListener.onCheckChange((TestTickView)v,mIsChecked);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //用于属性动画的getter和setter</div><div class="line">    public int getRingProgress() &#123;</div><div class="line">        return ringProgress;</div><div class="line">    &#125;</div><div class="line">    public void setRingProgress(int ringProgress) &#123;</div><div class="line">        this.ringProgress = ringProgress;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line">    public int getCircleProgress() &#123;</div><div class="line">        return circleProgress;</div><div class="line">    &#125;</div><div class="line">    public void setCircleProgress(int circleProgress) &#123;</div><div class="line">        this.circleProgress = circleProgress;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getRightAlpha() &#123;</div><div class="line">        return rightAlpha;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRightAlpha(int rightAlpha) &#123;</div><div class="line">        this.rightAlpha = rightAlpha;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int getMySize(int defSize, int measureSpec) &#123;</div><div class="line">        int result;</div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        if (mode == MeasureSpec.UNSPECIFIED || mode == MeasureSpec.AT_MOST) &#123;</div><div class="line">            result = defSize;</div><div class="line">        &#125; else &#123;</div><div class="line">            result = size;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static int dp2px(Context context, float dpValue) &#123;</div><div class="line">        final float scale = context.getResources().getDisplayMetrics().density;</div><div class="line">        return (int) (dpValue * scale + 0.5f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCheckChangeListener(OnCheckChangeListener checkChangeListener) &#123;</div><div class="line">        mCheckChangeListener = checkChangeListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public interface OnCheckChangeListener&#123;</div><div class="line">        void onCheckChange(TestTickView testTickView,boolean checked);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;CheckView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;uncheck_color&quot; format=&quot;color&quot; /&gt;</div><div class="line">        &lt;!--选中后的基调颜色--&gt;</div><div class="line">        &lt;attr name=&quot;check_color&quot; format=&quot;color&quot; /&gt;</div><div class="line">        &lt;!--选中后钩的颜色--&gt;</div><div class="line">        &lt;attr name=&quot;check_right_color&quot; format=&quot;color&quot; /&gt;</div><div class="line">        &lt;!--圆的半径--&gt;</div><div class="line">        &lt;attr name=&quot;radius_size&quot; format=&quot;dimension&quot; /&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)中国国内可用API合集]]></title>
      <url>/2017/10/20/%E8%BD%AC-%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%86%85%E5%8F%AF%E7%94%A8API%E5%90%88%E9%9B%86/</url>
      <content type="html"><![CDATA[<h1 id="中国国内可用API合集"><a href="#中国国内可用API合集" class="headerlink" title="中国国内可用API合集"></a>中国国内可用API合集</h1><p>转自<a href="https://microzz.com/2017/02/03/API/" target="_blank" rel="external">https://microzz.com/2017/02/03/API/</a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a href="https://microzz.com/2017/02/03/API/#%E7%9B%AE%E5%BD%95" title="目录" target="_blank" rel="external"></a>目录</h3><ul>
<li><a href="https://microzz.com/2017/02/03/API/#%E7%AC%94%E8%AE%B0" target="_blank" rel="external">笔记</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%87%BA%E8%A1%8C" target="_blank" rel="external">出行</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E8%AF%8D%E5%85%B8" target="_blank" rel="external">词典</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E7%94%B5%E5%95%86" target="_blank" rel="external">电商</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%9C%B0%E5%9B%BE" target="_blank" rel="external">地图</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E7%94%B5%E5%BD%B1" target="_blank" rel="external">电影</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF" target="_blank" rel="external">即时通讯</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%BC%80%E5%8F%91%E8%80%85%E7%BD%91%E7%AB%99" target="_blank" rel="external">开发者网站</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%BF%AB%E9%80%92%E6%9F%A5%E8%AF%A2" target="_blank" rel="external">快递查询</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E6%97%85%E6%B8%B8" target="_blank" rel="external">旅游</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E7%A4%BE%E4%BA%A4" target="_blank" rel="external">社交</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E8%A7%86%E9%A2%91" target="_blank" rel="external">视频</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%A4%A9%E6%B0%94" target="_blank" rel="external">天气</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C" target="_blank" rel="external">团队协作</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%9B%BE%E7%89%87%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86" target="_blank" rel="external">图片与图像处理</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E5%A4%96%E5%8D%96" target="_blank" rel="external">外卖</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81" target="_blank" rel="external">消息推送</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E9%9F%B3%E4%B9%90" target="_blank" rel="external">音乐</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E4%BA%91" target="_blank" rel="external">云</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB" target="_blank" rel="external">语音识别</a></li>
<li><a href="https://microzz.com/2017/02/03/API/#%E7%BB%BC%E5%90%88" target="_blank" rel="external">综合</a></li>
</ul>
<h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a><a href="https://microzz.com/2017/02/03/API/#%E7%AC%94%E8%AE%B0" title="笔记" target="_blank" rel="external"></a>笔记</h4><ul>
<li><a href="https://msdn.microsoft.com/en-us/office/office365/howto/onenote-landing" target="_blank" rel="external">OneNote</a> - OneNote支持获取，复制，创建，更新，导入与导出笔记，支持为笔记添加多媒体内容，管理权限等。提供SDK和Demo。</li>
<li><a href="http://www.wiz.cn/manual/plugin/" target="_blank" rel="external">为知笔记</a> - 为知笔记Windows客户端开放了大量的API，其中绝大部分，都通过COM提供，可以在javascript, C#, C++, Delphi等语言中使用。接口通过IDL(Interface description language)语言描述。</li>
<li><a href="https://dev.yinxiang.com/" target="_blank" rel="external">印象笔记</a> - 印象笔记提供了ActionScript 3, Android, C++, Windows, iOS, Java, JavaScript, OS X, Perl, PHP, Python, Ruby等平台的SDK和完整的API参考文档，可通过API进行认证，笔记，笔记本，附件，搜索，同步等操作，同时提供企业版和本地API。</li>
<li><a href="http://note.youdao.com/open/" target="_blank" rel="external">有道云笔记</a> - 有道云笔记提供了Android SDK，同时Open API允许进行授权，用户，笔记本，笔记，分享，附件等方面的操作。</li>
</ul>
<h4 id="出行"><a href="#出行" class="headerlink" title="出行"></a><a href="https://microzz.com/2017/02/03/API/#%E5%87%BA%E8%A1%8C" title="出行" target="_blank" rel="external"></a>出行</h4><ul>
<li><a href="http://open.xiaojukeji.com/" target="_blank" rel="external">滴滴</a> - 滴滴提供了iOS和Android SDK, 可实现拉起滴滴叫车等方面的操作。</li>
<li><a href="http://developerpre.10101111.com/" target="_blank" rel="external">神州专车</a> - 神州专车提供了API模式和H5模式两种接入模式，允许进行基础信息，订单，支付，充值，用户，发票，代金券，企业等方面的操作。</li>
<li><a href="https://developer.uber.com/" target="_blank" rel="external">Uber</a> - Uber提供了Android和iOS的SDK,允许进行乘客，行程体验，司机，派送次数等四大方面的操作。</li>
</ul>
<h4 id="词典"><a href="#词典" class="headerlink" title="词典"></a><a href="https://microzz.com/2017/02/03/API/#%E8%AF%8D%E5%85%B8" title="词典" target="_blank" rel="external"></a>词典</h4><ul>
<li><a href="http://api.fanyi.baidu.com/api/trans/product/index" target="_blank" rel="external">百度翻译</a> - 百度翻译支持多种语言互相翻译，包含PHP, JS, Python, C, Java版Demo。</li>
<li><a href="https://www.microsoft.com/en-us/translator/translatorapi.aspx" target="_blank" rel="external">必应词典</a> - 微软翻译API支持文字和语音两种类型，支持多种语言互相翻译，提供C#版本Demo。</li>
<li><a href="http://open.iciba.com/?c=api" target="_blank" rel="external">金山词霸</a> - 金山词霸允许进行简单的翻译操作。</li>
<li><a href="https://www.shanbay.com/help/developer/api_v1/" target="_blank" rel="external">扇贝</a> - 扇贝提供了完整的API，允许进行用户，查询，添加学习记录，忘记单词，例句，笔记等方面的操作。</li>
<li><a href="http://fanyi.youdao.com/openapi" target="_blank" rel="external">有道词典</a> - 有道词典允许进行简单的翻译操作。</li>
</ul>
<h4 id="电商"><a href="#电商" class="headerlink" title="电商"></a><a href="https://microzz.com/2017/02/03/API/#%E7%94%B5%E5%95%86" title="电商" target="_blank" rel="external"></a>电商</h4><ul>
<li><a href="http://open.dangdang.com/" target="_blank" rel="external">当当</a> - 当当允许商家用户和网站接入授权，可进行商品，订单，图片，问答，店铺和促销等方面的操作。</li>
<li><a href="https://jos.jd.com/api/index.htm" target="_blank" rel="external">京东</a> - 京东提供了Java, PHP, .net的SDK，授权后可进行多种操作。</li>
<li><a href="http://open.suning.com/ospos/apipage/toApiListMenu.do" target="_blank" rel="external">苏宁开放服务</a> - 苏宁提供了Java, PHP, .Net, Python版本的SDK，授权后可进行多种操作。</li>
<li><a href="https://open.taobao.com/doc2/api_list.htm" target="_blank" rel="external">淘宝开放平台</a> - 淘宝提供了Java, .Net, PHP, Python版本的SDK，授权后提供多种操作。</li>
<li><a href="https://developer.amazon.com/public/zh" target="_blank" rel="external">亚马逊</a> - 亚马逊提供多种语言版本的SDK，授权后允许多种操作。</li>
</ul>
<h4 id="地图"><a href="#地图" class="headerlink" title="地图"></a><a href="https://microzz.com/2017/02/03/API/#%E5%9C%B0%E5%9B%BE" title="地图" target="_blank" rel="external"></a>地图</h4><ul>
<li><a href="http://lbsyun.baidu.com/" target="_blank" rel="external">百度地图</a> - 百度地图提供了Android, iOS版本的SDK和JavaScript API，可进行定位、地图、数据、出行、鹰眼轨迹和分析服务。</li>
<li><a href="http://lbs.amap.com/" target="_blank" rel="external">高德地图</a> - 高德地图提供了JavaScript和web服务API，Android和iOS SDK，支持地图，定位，搜索，路线规划，导航和室内地图等。</li>
<li><a href="http://lbs.qq.com/" target="_blank" rel="external">腾讯地图</a> - 腾讯地图提供了JavaScript API，Android和iOS SDK，支持定位，地图，地点搜索，路线和导航等。</li>
<li><a href="http://lbs.tianditu.com/api-new/home.html" target="_blank" rel="external">天地图</a> - 天地图提供了H5 API和JavaScript API等web API，同时提供了Android和iOS SDK，支持基础地图服务，图层管理，地图覆盖物，地图工具，地名搜索和出行规划服务。</li>
<li><a href="http://open.mapbar.com/" target="_blank" rel="external">图吧地图</a> - 图吧提供了JavaScript和Flash API，Android和iOS SDK，支持定位，地址解析，位置标注，位置截图，路线规划，周边查询，兴趣点搜索和在线导航。</li>
</ul>
<h4 id="电影"><a href="#电影" class="headerlink" title="电影"></a><a href="https://microzz.com/2017/02/03/API/#%E7%94%B5%E5%BD%B1" title="电影" target="_blank" rel="external"></a>电影</h4><ul>
<li><a href="https://developers.douban.com/wiki/?title=movie_v2" target="_blank" rel="external">豆瓣电影</a> - 豆瓣电影支持电影条目，影人条目，搜索和榜单等。</li>
<li><a href="http://www.jianshu.com/p/9855610eb1d4" target="_blank" rel="external">猫眼电影(非官方)</a> - 支持查询首页电影列表，电影详情(含评论)，本地影院和影院详情，选座。 #非官方</li>
<li><a href="https://github.com/avenwu/vplus/blob/master/doc/v%E7%94%B5%E5%BD%B1api%E6%8E%A5%E5%8F%A3.md" target="_blank" rel="external">V电影(非官方)</a> - 支持获取<a href="http://www.vmovier.com/" target="_blank" rel="external">V电影</a>网站的数据。 #非官方</li>
<li><a href="https://github.com/jokermonn/-Api/blob/master/Time.md" target="_blank" rel="external">Time时光(非官方)</a> - 支持获取<a href="http://www.mtime.com/" target="_blank" rel="external">时光网</a>网站数据。 #非官方</li>
</ul>
<h4 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a><a href="https://microzz.com/2017/02/03/API/#%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF" title="即时通讯" target="_blank" rel="external"></a>即时通讯</h4><ul>
<li><a href="http://www.easemob.com/" target="_blank" rel="external">环信</a> - 支持Android, iOS, WebIM, Linux, REST集成，支持多种消息类型。</li>
<li><a href="http://rongcloud.cn/" target="_blank" rel="external">融云</a> - 支持Android, iOS, Web, 游戏集成，支持多种消息类型。</li>
<li><a href="http://netease.im/" target="_blank" rel="external">网易云信</a> - 支持IM实时通讯，实时音视频，教学白班，专线电话，短信，聊天室，提供iOS, Android, Windows和Web SDK。</li>
<li><a href="https://www.qcloud.com/product/im" target="_blank" rel="external">腾讯云通信IM</a> - 提供iOS, Android, Windows和Web SDK，支持多种消息类型。</li>
</ul>
<h4 id="开发者网站"><a href="#开发者网站" class="headerlink" title="开发者网站"></a><a href="https://microzz.com/2017/02/03/API/#%E5%BC%80%E5%8F%91%E8%80%85%E7%BD%91%E7%AB%99" title="开发者网站" target="_blank" rel="external"></a>开发者网站</h4><ul>
<li><a href="https://open.coding.net/" target="_blank" rel="external">Coding</a> - 授权后可访问coding.net网站的内容。</li>
<li><a href="http://gank.io/api" target="_blank" rel="external">干货集中营</a> - 提供妹子图和Android, iOS, 前端，拓展资源等内容。</li>
<li><a href="https://www.diycode.cc/api" target="_blank" rel="external">diycode</a> - 授权后可访问diycode网站的内容。</li>
<li><a href="http://www.oschina.net/openapi" target="_blank" rel="external">开源中国</a> - 授权后可访问开源中国网站的内容。</li>
<li><a href="https://laravel-china.org/topics/3097" target="_blank" rel="external">Laravel China</a> - 授权后可访问 Laravel China 网站的内容。</li>
<li><a href="https://ruby-china.org/api-doc/" target="_blank" rel="external">Ruby China</a> - 授权后可访问Ruby China网站的内容。</li>
<li><a href="https://www.v2ex.com/p/7v9TEc53" target="_blank" rel="external">V2EX</a> - 可访问V2EX网站的内容。</li>
</ul>
<h4 id="快递查询"><a href="#快递查询" class="headerlink" title="快递查询"></a><a href="https://microzz.com/2017/02/03/API/#%E5%BF%AB%E9%80%92%E6%9F%A5%E8%AF%A2" title="快递查询" target="_blank" rel="external"></a>快递查询</h4><ul>
<li><a href="http://www.aikuaidi.cn/api/" target="_blank" rel="external">爱快递</a> - 爱快递支持国内90多家快递物流订单查询服务，免费版有使用次数限制，可用于电子商城单号跟踪,手机应用,微信快递接口等服务。</li>
<li><a href="http://www.kuaidi100.com/openapi/" target="_blank" rel="external">快递100</a> - 快递100支持300家国内国际快递，免费版有使用次数限制。</li>
<li><a href="http://www.kdniao.com/" target="_blank" rel="external">快递鸟</a> - 快递鸟支持国内外400多家快递公司，免费版有使用次数限制，包含.Net, PHP, Java版Demo。</li>
<li><a href="http://www.kuaidi.com/openapi.html" target="_blank" rel="external">快递网</a> - 快递网支持上百家快递查询服务，免费版有使用次数限制。</li>
</ul>
<h4 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a><a href="https://microzz.com/2017/02/03/API/#%E6%97%85%E6%B8%B8" title="旅游" target="_blank" rel="external"></a>旅游</h4><ul>
<li><a href="http://open.qunar.com/" target="_blank" rel="external">去哪儿</a> - 支持获取去哪儿网的内容。</li>
<li><a href="http://open.tuniu.cn/" target="_blank" rel="external">途牛</a> - 支持途牛网的内容，仅开放给供应商系统。</li>
<li><a href="http://u.ctrip.com/union/help/Termsofuse.aspx" target="_blank" rel="external">携程</a> - 支持携程网的内容。</li>
<li><a href="http://open.elong.com/wiki/API%E6%96%87%E6%A1%A3" target="_blank" rel="external">艺龙</a> - 支持获取产品数据，完成用户的预订，进行订单查询、更改或取消。提供在线工具，以及H5, Java, C#, PHP, Ruby版本的Demo。</li>
<li><a href="https://github.com/jokermonn/-Api/blob/master/12306.md" target="_blank" rel="external">12306(非官方)</a> - 支持获取12306火车票票数、票价查询。 #非官方</li>
</ul>
<h4 id="社交"><a href="#社交" class="headerlink" title="社交"></a><a href="https://microzz.com/2017/02/03/API/#%E7%A4%BE%E4%BA%A4" title="社交" target="_blank" rel="external"></a>社交</h4><ul>
<li><a href="https://open-doc.dingtalk.com/" target="_blank" rel="external">钉钉</a> - 支持免登，企业通讯录，服务窗，钉盘，地图，会话，DING，电话，音频，扫码，支付，分享等服务，提供SDK和Demo，PC版UI规范，调试工具和钉钉UI组件库。</li>
<li><a href="https://developers.douban.com/wiki/?title=guide" target="_blank" rel="external">豆瓣</a> - 支持图书，电影，音乐，同城，广播，用户，日记，相册，线上活动，论坛，回复和我去等功能，提供豆瓣组件，豆瓣标示和Demo。</li>
<li><a href="http://open.kaixin001.com/document.php" target="_blank" rel="external">开心网</a> - 支持用户信息，登录授权，好友，传播应用，支付，分享内容，消息，交互，开心网应用等内容，提供SDK，开源插件和标示素材。</li>
<li><a href="http://wiki.connect.qq.com/api%E5%88%97%E8%A1%A8" target="_blank" rel="external">QQ互联</a> - 支持用户资料，QQ会员信息，空间相册，腾讯微博资料，分享到腾讯微博，微博好友信息，财付通信息等内容，提供SDK, Demo, 以及设计资源。</li>
<li><a href="http://open.weibo.com/wiki/API" target="_blank" rel="external">微博</a> - 支持粉丝服务，微博，评论，用户，关系，账号，收藏，搜索，提醒，短链，公共服务，位置服务，地理信息，地图引擎，支付以及OAuth2.0授权等内容，提供微博标示及SDK。</li>
<li><a href="https://open.weixin.qq.com/" target="_blank" rel="external">微信</a> - 支持移动应用，网站应用，公众账号，公众号第三方平台等内容，提供SDK, Demo, 以及设计资源。</li>
</ul>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a><a href="https://microzz.com/2017/02/03/API/#%E8%A7%86%E9%A2%91" title="视频" target="_blank" rel="external"></a>视频</h4><ul>
<li><a href="http://open.iqiyi.com/" target="_blank" rel="external">爱奇艺</a> - 支持弹幕，全色彩播放器，高清码流，视频托管，播放爱奇艺视频，应用分发，IOCP等内容。</li>
<li><a href="https://github.com/fython/BilibiliAPIDocs" target="_blank" rel="external">Bilibili(非官方)</a> - 支持登录，我的信息，番剧专题，视频/专题收藏、关注，番剧，弹幕等。 #非官方</li>
<li><a href="http://www.lecloud.com/zh-cn/help/api.html" target="_blank" rel="external">乐视</a> - 支持标准直播，标准点播，视频发行平台，移动直播等内容，提供SDK下载。</li>
<li><a href="http://lm.tv.sohu.com/union/open_platform.do" target="_blank" rel="external">搜狐视频</a> - 支持一二级内容获取，内容分类获取，视频详情信息，专辑详情信息，分级列表获取，关键词搜索等内容。</li>
<li><a href="http://api.tudou.com/apidoc/index.php/%E9%A6%96%E9%A1%B5" target="_blank" rel="external">土豆</a> - 支持视频模块，豆单模块，影视库模块，用户模块，转帖模块，字段定义模块等内容。</li>
<li><a href="http://doc.open.youku.com/?spm=0.0.0.0.fOn6ND" target="_blank" rel="external">优酷</a> - 支持内容输出，视频搜索，智能推荐，用户登录，用户互动，用户信息，视频上传至优酷，视频互动等内容，提供SDK。</li>
</ul>
<h4 id="天气"><a href="#天气" class="headerlink" title="天气"></a><a href="https://microzz.com/2017/02/03/API/#%E5%A4%A9%E6%B0%94" title="天气" target="_blank" rel="external"></a>天气</h4><ul>
<li><a href="http://wiki.swarma.net/index.php/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94API/v2" target="_blank" rel="external">彩云天气</a> - 支持全球天气数据，两种空气质量数据，天气预报，实况天气，独家降水预报，独家空气质量预报，六种天气数据，四种生活指数数据等内容，部分功能收费。</li>
<li><a href="http://www.kancloud.cn/hefengyun/weather/222344" target="_blank" rel="external">和风天气</a> - 支持7-10天预报，实况天气，每小时预报，生活指数，灾害预警，景点天气，历史天气，城市查询等内容，仅国内数据免费。</li>
<li><a href="http://www.thinkpage.cn/doc" target="_blank" rel="external">心知天气</a> - 支持天气实况，逐日预报和历史，24小时逐小时预报，过去24小时天气历史记录，气象灾害预警，空气质量实况与城市排行，逐日和逐小时空气质量预报，过去24小时空气质量历史记录，生活指数，农历、节气、生肖，机动车尾号限行，日出日落，月初月落和月像，城市搜索等内容，仅国内数据免费。</li>
</ul>
<h4 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a><a href="https://microzz.com/2017/02/03/API/#%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C" title="团队协作" target="_blank" rel="external"></a>团队协作</h4><ul>
<li><a href="https://www.teambition.com/developer/open-platform" target="_blank" rel="external">Teambition</a> - 支持详细的文档说明，部分平台提供demo。</li>
</ul>
<h4 id="图片与图像处理"><a href="#图片与图像处理" class="headerlink" title="图片与图像处理"></a><a href="https://microzz.com/2017/02/03/API/#%E5%9B%BE%E7%89%87%E4%B8%8E%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86" title="图片与图像处理" target="_blank" rel="external"></a>图片与图像处理</h4><ul>
<li><a href="https://www.v2ex.com/t/157267" target="_blank" rel="external">Bing每日壁纸(非官方)</a> - 支持图片URL和图片描述，可获取不同地区的数据。 #非官方</li>
<li><a href="https://github.com/pinguo/PGSkinPrettifyEngine" target="_blank" rel="external">Camera360</a> - 支持全帧率直播美白滤镜，提供SDK和Demo。</li>
<li><a href="http://imgsdk.com/" target="_blank" rel="external">嗨图</a> - 支持图片标注，仅提供iOS版本SDK。</li>
<li><a href="https://dev.camcard.com/?language=zh-cn" target="_blank" rel="external">名片全能王</a> - 支持精准识别几十种语言的名片，自动切边并美化名片图像，自动返回识别结果，提供多种版本SDK，收费。</li>
<li><a href="http://www.intsig.com/zh/products/camcard_for_id" target="_blank" rel="external">企业证件识别</a> - 支持身份证，驾驶证，护照等，收费。</li>
<li><a href="https://dev.camscanner.com/?language=zh-cn" target="_blank" rel="external">扫描全能王</a> - 支持图像智能剪裁，五种图像增强模式，手动调节图像细节，自动返回扫描结果等，提供iOS与Android版本SDK，收费。</li>
<li><a href="http://api1.wozhitu.com/" target="_blank" rel="external">我知图</a> - 支持相似图像搜索，图像识别匹配，图像识别关键词推荐，重复图片探测等内容。</li>
<li><a href="http://www.intsig.com/zh/products/creditcard" target="_blank" rel="external">银行卡|信用卡识别</a> - 提供SDK和API，收费。</li>
</ul>
<h4 id="外卖"><a href="#外卖" class="headerlink" title="外卖"></a><a href="https://microzz.com/2017/02/03/API/#%E5%A4%96%E5%8D%96" title="外卖" target="_blank" rel="external"></a>外卖</h4><ul>
<li><a href="http://dev.waimai.baidu.com/" target="_blank" rel="external">百度外卖</a> - 支持商户，菜品，商品，订单和基础数据等内容，提供SDK和Demo。</li>
<li><a href="http://developer.dianping.com/" target="_blank" rel="external">大众点评</a> - 支持商户，团购，在线预定，商品点评，数据统计，元数据等内容。</li>
<li><a href="http://openapi.eleme.io/v2/quickstart.html" target="_blank" rel="external">饿了么</a> - 支持查询，预定，订单，其他订单，数据推送，支付，评价，活动，账户同步，数据落地同步等内容。</li>
<li><a href="http://developer.waimai.meituan.com/doc/show" target="_blank" rel="external">美团外卖</a> - 支持门店，配送范围，菜品，药品，订单，订单推送等内容。</li>
</ul>
<h4 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a><a href="https://microzz.com/2017/02/03/API/#%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81" title="消息推送" target="_blank" rel="external"></a>消息推送</h4><ul>
<li><a href="http://push.baidu.com/doc/restapi/restapi" target="_blank" rel="external">百度云推送</a> - 支持iOS, Android和服务器端，支持推送，统计，组管理等Rest API接口。服务器端支持Java, Python, PHP, REST API。提供所支持各语言版本的SDK。</li>
<li><a href="http://developer.huawei.com/push" target="_blank" rel="external">华为推送</a> - 支持Android，提供SDK。</li>
<li><a href="https://docs.jiguang.cn/jpush/server/push/rest_api_v3_push/" target="_blank" rel="external">极光</a> - 支持Android, iOS, WindowsPhone, 服务器端REST API, 提供Java, Python, PHP, Ruby, C#, Node.js等版本的SDK。</li>
<li><a href="https://leancloud.cn/docs/push_guide.html" target="_blank" rel="external">LeanCloud</a> - 支持Android, iOS, WindowsPhone和Web网页推送，使用云引擎和JavaScript创建推送，使用REST API推送消息。提供Objectvie-C(开放源码), JavaScript(开放源码), Android, Unity, .Net, WindowsPhone, Java(开放源码), Python(开放源码), PHP(开放源码), C++(开放源码), Swift(开放源码)版本SDK。同时提供Demo。</li>
<li><a href="http://xg.qq.com/" target="_blank" rel="external">腾讯信鸽</a> - 支持iOS和Android平台，服务器端采用Rest API, 同时服务器端支持Java, PHP, Python等语言并提供SDK。</li>
<li><a href="http://dev.xiaomi.com/console/appservice/push.html" target="_blank" rel="external">小米</a> - 支持Android和iOS平台，服务器端支持Java, Python并提供SDK。</li>
<li><a href="http://dev.umeng.com/push/android/api-doc" target="_blank" rel="external">友盟</a> - 支持Android和iOS平台，服务器端支持PHP, Java, Python并提供SDK。</li>
</ul>
<h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a><a href="https://microzz.com/2017/02/03/API/#%E9%9F%B3%E4%B9%90" title="音乐" target="_blank" rel="external"></a>音乐</h4><ul>
<li><a href="https://my.oschina.net/skiden/blog/102025" target="_blank" rel="external">百度音乐(非官方)</a> - 支持频道歌曲列表，专辑的歌曲列表，歌曲的详细信息，歌手专辑信息，搜索，歌手的所有歌曲，排行榜，所有专辑，所有歌手，歌手的专辑列表，歌手信息，歌词搜索，歌曲文件详细信息。 #非官方</li>
<li><a href="https://developers.douban.com/wiki/?title=music_v2" target="_blank" rel="external">豆瓣音乐</a> - 支持音乐信息，评论信息，标签信息，搜索音乐，某个音乐中标记最多的标签，发表、修改、删除评论，用户对音乐的所有标签等内容。</li>
<li><a href="https://github.com/kaolafm/api" target="_blank" rel="external">考拉FM</a> - 支持获取指定分类下列表和内容，搜索指定关键字内容，专辑/电台/直播详情，指定专辑下列表，指定电台播单，分类下专辑TOP50，指定期(碎片)所在专辑最新分页功能，分类下全部直播计划，版本升级接口，排行榜，精选，传统电台列表/详情/地区等。</li>
<li><a href="http://119.29.39.252/index.php/2016/10/20/1-2/" target="_blank" rel="external">酷狗音乐(非官方)</a> - 支持搜索，各种排行榜，歌手专辑信息，下载和获取播放地址。 #非官方</li>
<li><a href="http://wq.qq.com/" target="_blank" rel="external">企鹅FM</a> - 支持获取电台分类列表，电台分类下的专辑信息列表，专辑下节目信息列表，电台节目播放链接，搜索关键字相关主播/专辑/节目，主播名下专辑，特定时间段内新增主播/更新的专辑/新增的专辑等。</li>
<li><a href="https://github.com/ccchangkong/article/issues/23" target="_blank" rel="external">QQ音乐(非官方)</a> - 支持歌曲榜单，歌曲/歌词地址，歌曲图片。 #非官方</li>
<li><a href="http://open.qingting.fm/" target="_blank" rel="external">蜻蜓FM</a> - 支持OAuth2.0授权，音频数据中心，分类，点播，直播，临时直播，排行榜，搜索，内容更新状态，主播，此刻，专题，活动等内容。</li>
<li><a href="https://github.com/darknessomi/musicbox/wiki/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%96%B0%E7%89%88WebAPI%E5%88%86%E6%9E%90%E3%80%82" target="_blank" rel="external">网易云音乐(非官方)</a> - 支持获取用户歌单，歌单详情，歌曲URL。 #非官方</li>
<li><a href="http://open.ximalaya.com/index" target="_blank" rel="external">喜马拉雅FM</a> - 支持Android和iOS平台，并提供相应的SDK和Demo，具体支持内容请下载相关文件查看。</li>
</ul>
<h4 id="云"><a href="#云" class="headerlink" title="云"></a><a href="https://microzz.com/2017/02/03/API/#%E4%BA%91" title="云" target="_blank" rel="external"></a>云</h4><ul>
<li><a href="https://develop.aliyun.com/api?spm=5176.8142029.388261.274.4FJSwV" target="_blank" rel="external">阿里云</a> - 支持弹性计算，数据库，存储与CDN，网络，应用服务，域名与网站等类别的内容，并提供了相关SDK。</li>
<li><a href="https://cloud.baidu.com/doc/index.html" target="_blank" rel="external">百度云</a> - 支持计算和网络，存储和CDN，数据库，安全和管理，数据分析，智能多媒体服务，物联网服务，人工智能，应用服务，网站服务，数字营销服务等内容，并提供相关的SDK。</li>
<li><a href="http://www.bmob.cn/" target="_blank" rel="external">Bmob</a> - 支持云数据库，容器服务，消息推送，文件存储，短信验证码，及时通讯，云端逻辑，定时任务，地理位置等。</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a> - 支持云存储，数据分析，用户关系，实时通讯，消息推送，移动统计等。</li>
<li><a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云</a> - 支持对象存储，融合CDN，直播云，数据处理等。</li>
<li><a href="https://www.qcloud.com/doc/api" target="_blank" rel="external">腾讯云</a> - 支持计算，网络，存储与CDN，数据库，安全服务，监控与管理，域名服务，视频服务，大数据与AI等内容，提供相关SDK。</li>
<li><a href="https://www.upyun.com/" target="_blank" rel="external">又拍云</a> - 支持 CDN、云存储、直播云、点播云、SSL证书服务、云处理、流量营销等。</li>
<li><a href="https://www.wilddog.com/" target="_blank" rel="external">野狗</a> - 支持实时数据同步，实时视频通话，及时通讯，短信，身份认证等。</li>
</ul>
<h4 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a><a href="https://microzz.com/2017/02/03/API/#%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB" title="语音识别" target="_blank" rel="external"></a>语音识别</h4><ul>
<li><a href="http://yuyin.baidu.com/" target="_blank" rel="external">百度语音</a> - 支持全平台REST API, 离线在线融合模式，深度语义解析，场景识别定制，自定义上传语料、训练模型，基础服务永久免费。提供相应SDK和Demo应用。</li>
<li><a href="http://openspeech.sogou.com/Sogou/php/index.php" target="_blank" rel="external">搜狗语音云开放平台</a> - 支持在线/离线语音识别，在线听歌识曲，离线语音合成等内容。提供相应平台SDK。</li>
<li><a href="http://www.xfyun.cn/" target="_blank" rel="external">讯飞开放平台</a> - 支持语音听写/转写，在线/离线命令词识别，语音唤醒等内容，平台支持广泛，提供相应SDK。</li>
</ul>
<h4 id="杂志"><a href="#杂志" class="headerlink" title="杂志"></a><a href="https://microzz.com/2017/02/03/API/#%E6%9D%82%E5%BF%97" title="杂志" target="_blank" rel="external"></a>杂志</h4><ul>
<li><a href="https://github.com/ZongweiBai/DoubanOpenDaily/blob/b87473b90911e687d291e847b133b5c4c4a700a3/app/src/main/java/com/monosky/daily/constant/APIConstData.java" target="_blank" rel="external">豆瓣一刻(非官方)</a> - 支持获取指定日期文章列表，栏目总览，推荐作者，作者信息，作者更多文章信息，栏目文章列表及翻页，文章评论及热门评论列表。 #非官方</li>
<li><a href="https://github.com/jokermonn/-Api/blob/master/ONEv3.5.0~.md" target="_blank" rel="external">One一个(非官方)</a> - 支持获取首页图片，文章，音乐及电影。 #非官方</li>
<li><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎日报(非官方)</a> - 支持获取界面启动图像，软件版本查询，最新消息，消息内容获取与离线下载，过往消息，新闻额外消息，新闻对应长/短评论查看，主题日报列表，主题日报内容，热门消息，栏目总览，栏目具体消息，新闻的推荐者，某个专栏之前的新闻，Editor的主页等。 #非官方</li>
<li><a href="https://github.com/marktony/zhuanlan/wiki" target="_blank" rel="external">知乎专栏(非官方)</a> - 支持获取指定专栏的信息，指定专栏的文章列表，指定的文章内容，评论列表，点赞信息。 #非官方</li>
</ul>
<h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a><a href="https://microzz.com/2017/02/03/API/#%E7%BB%BC%E5%90%88" title="综合" target="_blank" rel="external"></a>综合</h4><ul>
<li><a href="http://www.avatardata.cn/Docs" target="_blank" rel="external">阿凡达数据</a> - 支持金融股票，充值认证，便民类，新闻文章，医药交通，科教文艺，创意数据，及时通讯等内容。</li>
<li><a href="http://www.alidayu.com/" target="_blank" rel="external">阿里大于</a> - 支持验证码，短信通知，语音通知，流量钱包充值，私密专线，群发助手等内容。</li>
<li><a href="https://www.apix.cn/" target="_blank" rel="external">APiX</a> - 支持基础征信数据，信用分析服务，支付缴费接口等数据，部分免费。</li>
<li><a href="http://apistore.baidu.com/" target="_blank" rel="external">百度API STORE</a> - 支持多种类型数据，部分免费，提供SDK。</li>
<li><a href="http://www.haoservice.com/" target="_blank" rel="external">HaoService</a> - 支持多种类型数据。</li>
<li><a href="https://www.juhe.cn/" target="_blank" rel="external">聚合数据</a> - 支持多种类型数据，部分免费。</li>
<li><a href="https://m.datayes.com/" target="_blank" rel="external">通联数据</a> - 提供金融类数据，支持免费试用。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)2017下半年，一二线互联网公司Android面试题汇总]]></title>
      <url>/2017/10/12/%E8%BD%AC-2017%E4%B8%8B%E5%8D%8A%E5%B9%B4%EF%BC%8C%E4%B8%80%E4%BA%8C%E7%BA%BF%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8Android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>2017下半年，一二线互联网公司Android面试题汇总</p>
<p>阿里巴巴</p>
<ul>
<li>LRUCache原理</li>
<li>图片加载原理</li>
<li>模块化实现（好处，原因）</li>
<li>JVM</li>
<li>视频加密传输</li>
<li>统计启动时长,标准</li>
<li>如何保持应用的稳定性</li>
<li>ThreadLocal 原理</li>
<li>谈谈classloader</li>
<li>动态布局</li>
<li>热修复,插件化</li>
<li>HashMap源码,SpareArray原理</li>
<li>性能优化,怎么保证应用启动不卡顿</li>
<li>怎么去除重复代码</li>
<li>SP是进程同步的吗?有什么方法做到同步</li>
<li>介绍下SurfView</li>
<li>HashMap实现原理，ConcurrentHashMap 的实现原理</li>
<li>BroadcastReceiver，LocalBroadcastReceiver 区别</li>
<li>Bundle 机制</li>
<li>Handler 机制</li>
<li>android 事件传递机制</li>
<li>线程间 操作 List</li>
<li>App启动流程，从点击桌面开始</li>
<li>动态加载</li>
<li>类加载器</li>
<li>OSGI</li>
<li>Https请求慢的解决办法，DNS，携带数据，直接访问IP</li>
<li>GC回收策略</li>
<li>画出 Android 的大体架构图</li>
<li>描述清点击 Android Studio 的 build 按钮后发生了什么</li>
<li>大体说清一个应用程序安装到手机上时发生了什么；</li>
<li>对 Dalvik、ART 虚拟机有基本的了解；</li>
<li>Android 上的 Inter-Process-Communication 跨进程通信时如何工作的；</li>
<li>App 是如何沙箱化，为什么要这么做；</li>
<li>权限管理系统（底层的权限是如何进行 grant 的）</li>
<li>进程和 Application 的生命周期；</li>
<li>系统启动流程 Zygote进程 –&gt; SystemServer进程 –&gt; 各种系统服务 –&gt; 应用进程</li>
<li>recycleview listview 的区别,性能</li>
<li>排序，快速排序的实现</li>
<li>树：B+树的介绍</li>
<li>图：有向无环图的解释</li>
<li>TCP/UDP的区别</li>
<li>synchronized与Lock的区别</li>
<li>volatile</li>
<li>Java线程池</li>
<li>Java中对象的生命周期</li>
<li>类加载机制</li>
<li>双亲委派模型</li>
<li>Android事件分发机制</li>
<li>MVP模式</li>
<li>RxJava</li>
<li>抽象类和接口的区别</li>
<li>集合 Set实现 Hash 怎么防止碰撞</li>
<li>JVM 内存区域 开线程影响哪块内存</li>
<li>垃圾收集机制 对象创建，新生代与老年代</li>
<li>二叉树 深度遍历与广度遍历</li>
<li>B树、B+树</li>
<li>消息机制</li>
<li>进程调度</li>
<li>进程与线程</li>
<li>死锁</li>
<li>进程状态</li>
<li>JVM内存模型</li>
<li>并发集合了解哪些</li>
<li>ConCurrentHashMap实现</li>
<li>CAS介绍</li>
<li>开启线程的三种方式,run()和start()方法区别</li>
<li>线程池</li>
<li>常用数据结构简介</li>
<li>判断环（猜测应该是链表环）</li>
<li>排序，堆排序实现</li>
<li>链表反转</li>
</ul>
<p>腾讯</p>
<ul>
<li>synchronized用法</li>
<li>volatile用法</li>
<li>动态权限适配方案，权限组的概念</li>
<li>网络请求缓存处理，okhttp如何处理网络缓存的</li>
<li>图片加载库相关，bitmap如何处理大图，如一张30M的大图，如何预防OOM</li>
<li>进程保活</li>
<li>listview图片加载错乱的原理和解决方案</li>
<li>https相关，如何验证证书的合法性，https中哪里用了对称加密，哪里用了非对称加密，对加密算法（如RSA）等是否有了解</li>
</ul>
<p>滴滴</p>
<ul>
<li>MVP</li>
<li>广播（动态注册和静态注册区别，有序广播和标准广播）</li>
<li>service生命周期</li>
<li>handler实现机制（很多细节需要关注：如线程如何建立和退出消息循环等等）</li>
<li>多线程（关于AsyncTask缺陷引发的思考）</li>
<li>数据库数据迁移问题</li>
<li>设计模式相关（例如Android中哪里使用了观察者模式，单例模式相关）</li>
<li>x个苹果，一天只能吃一个、两个、或者三个，问多少天可以吃完</li>
<li>TCP与UDP区别与应用（三次握手和四次挥手）涉及到部分细节（如client如何确定自己发送的消息被server收到） HTTP相关 提到过Websocket 问了WebSocket相关以及与socket的区别</li>
<li>是否熟悉Android jni开发，jni如何调用java层代码</li>
<li>进程间通信的方式</li>
<li>java注解</li>
<li>计算一个view的嵌套层级</li>
<li>项目组件化的理解</li>
<li>多线程断点续传原理</li>
<li>Android系统为什么会设计ContentProvider，进程共享和线程安全问题</li>
<li>jvm相关</li>
<li>Android相关优化（如内存优化、网络优化、布局优化、电量优化、业务优化）</li>
<li>EventBus实现原理</li>
</ul>
<p>美团</p>
<ul>
<li>static synchronized 方法的多线程访问和作用，同一个类里面两个synchronized方法，两个线程同时访问的问题</li>
<li>内部类和静态内部类和匿名内部类，以及项目中的应用</li>
<li>handler发消息给子线程，looper怎么启动</li>
<li>View事件传递</li>
<li>activity栈</li>
<li>封装view的时候怎么知道view的大小</li>
<li>arraylist和linkedlist的区别，以及应用场景</li>
<li>怎么启动service，service和activity怎么进行数据交互</li>
<li>下拉状态栏是不是影响activity的生命周期，如果在onStop的时候做了网络请求，onResume的时候怎么恢复</li>
<li>view渲染</li>
</ul>
<p>今日头条</p>
<ul>
<li>数据结构中堆的概念，堆排序</li>
<li>死锁的概念，怎么避免死锁</li>
<li>ReentrantLock 、synchronized和volatile（n面）</li>
<li>HashMap</li>
<li>singleTask启动模式</li>
<li>用到的一些开源框架，介绍一个看过源码的，内部实现过程。</li>
<li>消息机制实现</li>
<li>ReentrantLock的内部实现</li>
<li>App启动崩溃异常捕捉</li>
<li>事件传递机制的介绍</li>
<li>ListView的优化</li>
<li>二叉树，给出根节点和目标节点，找出从根节点到目标节点的路径</li>
<li>模式MVP，MVC介绍</li>
<li>断点续传的实现</li>
<li>集合的接口和具体实现类，介绍</li>
<li>TreeMap具体实现</li>
<li>synchronized与ReentrantLock</li>
<li>手写生产者/消费者模式</li>
<li>逻辑地址与物理地址，为什么使用逻辑地址</li>
<li>一个无序，不重复数组，输出N个元素，使得N个元素的和相加为M，给出时间复杂度、空间复杂度。手写算法</li>
<li>.Android进程分类</li>
<li>前台切换到后台，然后再回到前台，Activity生命周期回调方法。弹出Dialog，生命值周期回调方法。</li>
<li>Activity的启动模式</li>
</ul>
<p>爱奇艺</p>
<ul>
<li>RxJava的功能与原理实现</li>
<li>RecycleView的使用，原理，RecycleView优化</li>
<li>ANR的原因</li>
<li>四大组件</li>
<li>Service的开启方式</li>
<li>Activity与Service通信的方式</li>
<li>Activity之间的通信方式</li>
<li>HashMap的实现，与HashSet的区别</li>
<li>JVM内存模型，内存区域</li>
<li>Java中同步使用的关键字，死锁</li>
<li>MVP模式</li>
<li>Java设计模式，观察者模式</li>
<li>Activity与Fragment之间生命周期比较</li>
<li><p>广播的使用场景</p>
<p>百度</p>
</li>
</ul>
<hr>
<ul>
<li>Bitmap 使用时候注意什么？</li>
<li>Oom 是否可以try catch ？</li>
<li>内存泄露如何产生？</li>
<li>适配器模式，装饰者模式，外观模式的异同？</li>
<li>ANR 如何产生？</li>
<li>String buffer 与string builder 的区别？</li>
<li>如何保证线程安全？</li>
<li>java四中引用</li>
<li>Jni 用过么？</li>
<li>多进程场景遇见过么？</li>
<li>关于handler，在任何地方new handler 都是什么线程下</li>
<li>sqlite升级，增加字段的语句</li>
<li>bitmap recycler 相关</li>
<li>强引用置为null，会不会被回收？</li>
<li>glide 使用什么缓存？</li>
<li>Glide 内存缓存如何控制大小？</li>
<li>如何保证多线程读写文件的安全？</li>
</ul>
<p>携程</p>
<ul>
<li>Activity启动模式</li>
<li>广播的使用方式，场景</li>
<li>App中唤醒其他进程的实现方式</li>
<li>AndroidManifest的作用与理解</li>
<li>List,Set,Map的区别</li>
<li>HashSet与HashMap怎么判断集合元素重复</li>
<li>Java中内存区域与垃圾回收机制</li>
<li>EventBus作用，实现方式，代替EventBus的方式</li>
<li>Android中开启摄像头的主要步骤</li>
</ul>
<p>网易</p>
<ul>
<li>集合</li>
<li>concurrenthashmap</li>
<li>volatile</li>
<li>synchronized与Lock</li>
<li>Java线程池</li>
<li>wait/notify</li>
<li>NIO</li>
<li>垃圾收集器</li>
<li>Activity生命周期</li>
<li>AlertDialog,popupWindow,Activity区别</li>
</ul>
<p>小米</p>
<ul>
<li>String 为什么要设计成不可变的？</li>
<li>fragment 各种情况下的生命周期</li>
<li>Activity 上有 Dialog 的时候按 home 键时的生命周期</li>
<li>横竖屏切换的时候，Activity 各种情况下的生命周期</li>
<li>Application 和 Activity 的 context 对象的区别</li>
<li>序列化的作用，以及 Android 两种序列化的区别。</li>
<li>List 和 Map 的实现方式以及存储方式。</li>
<li>静态内部类的设计意图。</li>
<li>线程如何关闭，以及如何防止线程的内存泄漏</li>
</ul>
<p>360</p>
<ul>
<li>软引用、弱引用区别</li>
<li>垃圾回收</li>
<li>多线程：怎么用、有什么问题要注意；Android线程有没有上限，然后提到线程池的上限</li>
<li>JVM</li>
<li>锁</li>
<li>OOM，内存泄漏</li>
<li>ANR怎么分析解决</li>
<li>LinearLayout、RelativeLayout、FrameLayout的特性、使用场景</li>
<li>如何实现Fragment的滑动</li>
<li>ViewPager使用细节，如何设置成每次只初始化当前的Fragment，其他的不初始化</li>
<li>ListView重用的是什么</li>
<li>进程间通信的机制</li>
<li>AIDL机制</li>
<li>AsyncTask机制</li>
<li>如何取消AsyncTask</li>
<li>序列化</li>
<li>Android为什么引入Parcelable</li>
<li>有没有尝试简化Parcelable的使用</li>
<li>AIDL机制</li>
<li>项目：拉活怎么做的</li>
<li>应用安装过程</li>
</ul>
<p>某海外直播公司</p>
<ul>
<li>线程和进程的区别？</li>
<li>为什么要有线程，而不是仅仅用进程？</li>
<li>算法判断单链表成环与否？</li>
<li>如何实现线程同步？</li>
<li>hashmap数据结构？</li>
<li>arraylist 与 linkedlist 异同？</li>
<li>object类的equal 和hashcode 方法重写，为什么？</li>
<li>hashmap如何put数据（从hashmap源码角度讲解）？</li>
<li>简述IPC？</li>
<li>fragment之间传递数据的方式？</li>
<li>简述tcp四次挥手?</li>
<li>threadlocal原理</li>
<li>内存泄漏的可能原因？</li>
<li>用IDE如何分析内存泄漏？</li>
<li>OOM的可能原因？</li>
<li>线程死锁的4个条件？</li>
<li>差值器&amp;估值器</li>
<li>简述消息机制相关</li>
<li>进程间通信方式？</li>
<li>Binder相关？</li>
<li>触摸事件的分发？</li>
<li>简述Activity启动全部过程？</li>
<li>okhttp源码？</li>
<li>RxJava简介及其源码解读？</li>
<li>性能优化如何分析systrace？</li>
<li>广播的分类？</li>
<li>点击事件被拦截，但是相传到下面的view，如何操作？</li>
<li>Glide源码？</li>
<li>ActicityThread相关？</li>
<li>volatile的原理</li>
<li>synchronize的原理</li>
<li>lock原理</li>
<li>翻转一个单项链表</li>
<li>string to integer</li>
<li>合并多个单有序链表（假设都是递增的）</li>
</ul>
<p>其他公司</p>
<ul>
<li>四大组件</li>
<li>Android中数据存储方式</li>
<li>微信主页面的实现方式</li>
<li>微信上消息小红点的原理</li>
<li>两个不重复的数组集合中，求共同的元素。</li>
<li>上一问扩展，海量数据，内存中放不下，怎么求出。</li>
<li>Java中String的了解。</li>
<li>ArrayList与LinkedList区别</li>
<li>堆排序过程，时间复杂度，空间复杂度</li>
<li>快速排序的时间复杂度，空间复杂度</li>
<li>RxJava的作用，与平时使用的异步操作来比，优势</li>
<li>Android消息机制原理</li>
<li>Binder机制介绍</li>
<li>为什么不能在子线程更新UI</li>
<li>JVM内存模型</li>
<li>Android中进程内存的分配，能不能自己分配定额内存</li>
<li>垃圾回收机制与调用System.gc()区别</li>
<li>Android事件分发机制</li>
<li>断点续传的实现</li>
<li>RxJava的作用，优缺点</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)Java中Synchronized的用法]]></title>
      <url>/2017/10/12/%E8%BD%AC-Java%E4%B8%ADSynchronized%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>本文转自<a href="http://blog.csdn.net/luoweifu/article/details/46613015" target="_blank" rel="external">This</a></p>
<p>synchronized是Java中的关键字，是一种同步锁。它修饰的对象有以下几种： </p>
<ol>
<li>修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象； </li>
<li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象； </li>
<li>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </li>
<li>修改一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li>
</ol>
<hr>
<h1 id="修饰一个代码块"><a href="#修饰一个代码块" class="headerlink" title="修饰一个代码块"></a>修饰一个代码块</h1><ol>
<li>一个线程访问一个对象中的synchronized(this)同步代码块时，其他试图访问该对象的线程将被阻塞。<br>我们看下面一个例子：</li>
</ol>
<p><strong>【Demo1】：synchronized的用法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 同步线程</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SyncThread</span><span class="params">()</span> </span>&#123;</div><div class="line">      count = <span class="number">0</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + (count++));</div><div class="line">               Thread.sleep(<span class="number">100</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> count;</div><div class="line">   &#125;</div><div class="line">&#125;<span class="number">123456789101112131415161718192021222324252627</span></div></pre></td></tr></table></figure>
<p>SyncThread的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SyncThread syncThread = new SyncThread();</div><div class="line">Thread thread1 = new Thread(syncThread, &quot;SyncThread1&quot;);</div><div class="line">Thread thread2 = new Thread(syncThread, &quot;SyncThread2&quot;);</div><div class="line">thread1.start();</div><div class="line">thread2.start();</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>SyncThread1:0<br>SyncThread1:1<br>SyncThread1:2<br>SyncThread1:3<br>SyncThread1:4<br>SyncThread2:5<br>SyncThread2:6<br>SyncThread2:7<br>SyncThread2:8<br>SyncThread2:9*</p>
</blockquote>
<p>当两个并发线程(thread1和thread2)访问同一个对象(syncThread)中的synchronized代码块时，在同一时刻只能有一个线程得到执行，另一个线程受阻塞，必须等待当前线程执行完这个代码块以后才能执行该代码块。Thread1和thread2是互斥的，因为在执行synchronized代码块时会锁定当前的对象，只有执行完该代码块才能释放该对象锁，下一个线程才能执行并锁定该对象。<br>我们再把SyncThread的调用稍微改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Thread thread1 = new Thread(new SyncThread(), &quot;SyncThread1&quot;);</div><div class="line">Thread thread2 = new Thread(new SyncThread(), &quot;SyncThread2&quot;);</div><div class="line">thread1.start();</div><div class="line">thread2.start();</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>SyncThread1:0<br>SyncThread2:1<br>SyncThread1:2<br>SyncThread2:3<br>SyncThread1:4<br>SyncThread2:5<br>SyncThread2:6<br>SyncThread1:7<br>SyncThread1:8<br>SyncThread2:9</p>
</blockquote>
<p>不是说一个线程执行synchronized代码块时其它的线程受阻塞吗？为什么上面的例子中thread1和thread2同时在执行。这是因为synchronized只锁定对象，每个对象只有一个锁（lock）与之相关联，而上面的代码等同于下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SyncThread syncThread1 = <span class="keyword">new</span> SyncThread();</div><div class="line">SyncThread syncThread2 = <span class="keyword">new</span> SyncThread();</div><div class="line">Thread thread1 = <span class="keyword">new</span> Thread(syncThread1, <span class="string">"SyncThread1"</span>);</div><div class="line">Thread thread2 = <span class="keyword">new</span> Thread(syncThread2, <span class="string">"SyncThread2"</span>);</div><div class="line">thread1.start();</div><div class="line">thread2.start();<span class="number">123456</span></div></pre></td></tr></table></figure>
<p>这时创建了两个SyncThread的对象syncThread1和syncThread2，线程thread1执行的是syncThread1对象中的synchronized代码(run)，而线程thread2执行的是syncThread2对象中的synchronized代码(run)；我们知道synchronized锁定的是对象，这时会有两把锁分别锁定syncThread1对象和syncThread2对象，而这两把锁是互不干扰的，不形成互斥，所以两个线程可以同时执行。</p>
<p>2.当一个线程访问对象的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该对象中的非synchronized(this)同步代码块。<br><strong>【Demo2】：多个线程访问synchronized和非synchronized代码块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Counter implements Runnable&#123;</div><div class="line">   private int count;</div><div class="line"></div><div class="line">   public Counter() &#123;</div><div class="line">      count = 0;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public void countAdd() &#123;</div><div class="line">      synchronized(this) &#123;</div><div class="line">         for (int i = 0; i &lt; 5; i ++) &#123;</div><div class="line">            try &#123;</div><div class="line">               System.out.println(Thread.currentThread().getName() + &quot;:&quot; + (count++));</div><div class="line">               Thread.sleep(100);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //非synchronized代码块，未对count进行读写操作，所以可以不用synchronized</div><div class="line">   public void printCount() &#123;</div><div class="line">      for (int i = 0; i &lt; 5; i ++) &#123;</div><div class="line">         try &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + &quot; count:&quot; + count);</div><div class="line">            Thread.sleep(100);</div><div class="line">         &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public void run() &#123;</div><div class="line">      String threadName = Thread.currentThread().getName();</div><div class="line">      if (threadName.equals(&quot;A&quot;)) &#123;</div><div class="line">         countAdd();</div><div class="line">      &#125; else if (threadName.equals(&quot;B&quot;)) &#123;</div><div class="line">         printCount();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Counter counter = new Counter();</div><div class="line">Thread thread1 = new Thread(counter, &quot;A&quot;);</div><div class="line">Thread thread2 = new Thread(counter, &quot;B&quot;);</div><div class="line">thread1.start();</div><div class="line">thread2.start();</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>A:0<br>B count:1<br>A:1<br>B count:2<br>A:2<br>B count:3<br>A:3<br>B count:4<br>A:4<br>B count:5</p>
</blockquote>
<p>上面代码中countAdd是一个synchronized的，printCount是非synchronized的。从上面的结果中可以看出一个线程访问一个对象的synchronized代码块时，别的线程可以访问该对象的非synchronized代码块而不受阻塞。</p>
<ol>
<li>指定要给某个对象加锁</li>
</ol>
<p><strong>【Demo3】:指定要给某个对象加锁</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 银行账户类</div><div class="line"> */</div><div class="line">class Account &#123;</div><div class="line">   String name;</div><div class="line">   float amount;</div><div class="line"></div><div class="line">   public Account(String name, float amount) &#123;</div><div class="line">      this.name = name;</div><div class="line">      this.amount = amount;</div><div class="line">   &#125;</div><div class="line">   //存钱</div><div class="line">   public  void deposit(float amt) &#123;</div><div class="line">      amount += amt;</div><div class="line">      try &#123;</div><div class="line">         Thread.sleep(100);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   //取钱</div><div class="line">   public  void withdraw(float amt) &#123;</div><div class="line">      amount -= amt;</div><div class="line">      try &#123;</div><div class="line">         Thread.sleep(100);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public float getBalance() &#123;</div><div class="line">      return amount;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 账户操作类</div><div class="line"> */</div><div class="line">class AccountOperator implements Runnable&#123;</div><div class="line">   private Account account;</div><div class="line">   public AccountOperator(Account account) &#123;</div><div class="line">      this.account = account;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public void run() &#123;</div><div class="line">      synchronized (account) &#123;</div><div class="line">         account.deposit(500);</div><div class="line">         account.withdraw(500);</div><div class="line">         System.out.println(Thread.currentThread().getName() + &quot;:&quot; + account.getBalance());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Account account = new Account(&quot;zhang san&quot;, 10000.0f);</div><div class="line">AccountOperator accountOperator = new AccountOperator(account);</div><div class="line"></div><div class="line">final int THREAD_NUM = 5;</div><div class="line">Thread threads[] = new Thread[THREAD_NUM];</div><div class="line">for (int i = 0; i &lt; THREAD_NUM; i ++) &#123;</div><div class="line">   threads[i] = new Thread(accountOperator, &quot;Thread&quot; + i);</div><div class="line">   threads[i].start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>Thread3:10000.0<br>Thread2:10000.0<br>Thread1:10000.0<br>Thread4:10000.0<br>Thread0:10000.0</p>
</blockquote>
<p>在AccountOperator 类中的run方法里，我们用synchronized 给account对象加了锁。这时，当一个线程访问account对象时，其他试图访问account对象的线程将会阻塞，直到该线程访问account对象结束。也就是说谁拿到那个锁谁就可以运行它所控制的那段代码。<br>当有一个明确的对象作为锁时，就可以用类似下面这样的方式写程序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void method3(SomeObject obj)</div><div class="line">&#123;</div><div class="line">   //obj 锁定的对象</div><div class="line">   synchronized(obj)</div><div class="line">   &#123;</div><div class="line">      // todo</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的对象来充当锁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Test implements Runnable</div><div class="line">&#123;</div><div class="line">   private byte[] lock = new byte[0];  // 特殊的instance变量</div><div class="line">   public void method()</div><div class="line">   &#123;</div><div class="line">      synchronized(lock) &#123;</div><div class="line">         // todo 同步代码块</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public void run() &#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</p>
<hr>
<h1 id="修饰一个方法"><a href="#修饰一个方法" class="headerlink" title="修饰一个方法"></a>修饰一个方法</h1><p>Synchronized修饰一个方法很简单，就是<strong>在方法的前面加synchronized</strong>，public synchronized void method(){//todo}; synchronized修饰方法和修饰一个代码块类似，只是作用范围不一样，修饰代码块是大括号括起来的范围，而修饰方法范围是整个函数。如将【Demo1】中的run方法改成如下的方式，实现的效果一样。</p>
<p><strong>【Demo4】：synchronized修饰一个方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public synchronized void run() &#123;</div><div class="line">   for (int i = 0; i &lt; 5; i ++) &#123;</div><div class="line">      try &#123;</div><div class="line">         System.out.println(Thread.currentThread().getName() + &quot;:&quot; + (count++));</div><div class="line">         Thread.sleep(100);</div><div class="line">      &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Synchronized作用于整个方法的写法。<br>写法一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public synchronized void method()</div><div class="line">&#123;</div><div class="line">   // todo</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写法二：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void method()</div><div class="line">&#123;</div><div class="line">   synchronized(this) &#123;</div><div class="line">      // todo</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写法一修饰的是一个方法，写法二修饰的是一个代码块，但写法一与写法二是等价的，都是锁定了整个方法时的内容。</p>
<p>在用synchronized修饰方法时要注意以下几点：<br>1. synchronized关键字不能继承。<br>虽然可以使用synchronized来定义方法，但synchronized并不属于方法定义的一部分，因此，synchronized关键字不能被继承。如果在父类中的某个方法使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的，而必须显式地在子类的这个方法中加上synchronized关键字才可以。当然，还可以在子类方法中调用父类中相应的方法，这样虽然子类中的方法不是同步的，但子类调用了父类的同步方法，因此，子类的方法也就相当于同步了。这两种方式的例子代码如下：<br>在子类方法中加上synchronized关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Parent &#123;</div><div class="line">   public synchronized void method() &#123; &#125;</div><div class="line">&#125;</div><div class="line">class Child extends Parent &#123;</div><div class="line">   public synchronized void method() &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在子类方法中调用父类的同步方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Parent &#123;</div><div class="line">   public synchronized void method() &#123;   &#125;</div><div class="line">&#125;</div><div class="line">class Child extends Parent &#123;</div><div class="line">   public void method() &#123; super.method();   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>在定义接口方法时不能使用synchronized关键字。</li>
<li><p>构造方法不能使用synchronized关键字，但可以使用synchronized代码块来进行同步。 </p>
<hr>
</li>
</ol>
<h1 id="修饰一个静态的方法"><a href="#修饰一个静态的方法" class="headerlink" title="修饰一个静态的方法"></a>修饰一个静态的方法</h1><p>Synchronized也可修饰一个静态方法，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public synchronized static void method() &#123;</div><div class="line">   // todo</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道静态方法是属于类的而不属于对象的。同样的，synchronized修饰的静态方法锁定的是这个类的所有对象。我们对Demo1进行一些修改如下：</p>
<p><strong>【Demo5】：synchronized修饰静态方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 同步线程</div><div class="line"> */</div><div class="line">class SyncThread implements Runnable &#123;</div><div class="line">   private static int count;</div><div class="line"></div><div class="line">   public SyncThread() &#123;</div><div class="line">      count = 0;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public synchronized static void method() &#123;</div><div class="line">      for (int i = 0; i &lt; 5; i ++) &#123;</div><div class="line">         try &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + &quot;:&quot; + (count++));</div><div class="line">            Thread.sleep(100);</div><div class="line">         &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public synchronized void run() &#123;</div><div class="line">      method();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SyncThread syncThread1 = new SyncThread();</div><div class="line">SyncThread syncThread2 = new SyncThread();</div><div class="line">Thread thread1 = new Thread(syncThread1, &quot;SyncThread1&quot;);</div><div class="line">Thread thread2 = new Thread(syncThread2, &quot;SyncThread2&quot;);</div><div class="line">thread1.start();</div><div class="line">thread2.start();</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>SyncThread1:0<br>SyncThread1:1<br>SyncThread1:2<br>SyncThread1:3<br>SyncThread1:4<br>SyncThread2:5<br>SyncThread2:6<br>SyncThread2:7<br>SyncThread2:8<br>SyncThread2:9</p>
</blockquote>
<p>syncThread1和syncThread2是SyncThread的两个对象，但在thread1和thread2并发执行时却保持了线程同步。这是因为run中调用了静态方法method，而静态方法是属于类的，所以syncThread1和syncThread2相当于用了同一把锁。这与Demo1是不同的。</p>
<hr>
<h1 id="修饰一个类"><a href="#修饰一个类" class="headerlink" title="修饰一个类"></a>修饰一个类</h1><p>Synchronized还可作用于一个类，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class ClassName &#123;</div><div class="line">   public void method() &#123;</div><div class="line">      synchronized(ClassName.class) &#123;</div><div class="line">         // todo</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们把Demo5再作一些修改。<br><strong>【Demo6】:修饰一个类</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 同步线程</div><div class="line"> */</div><div class="line">class SyncThread implements Runnable &#123;</div><div class="line">   private static int count;</div><div class="line"></div><div class="line">   public SyncThread() &#123;</div><div class="line">      count = 0;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public static void method() &#123;</div><div class="line">      synchronized(SyncThread.class) &#123;</div><div class="line">         for (int i = 0; i &lt; 5; i ++) &#123;</div><div class="line">            try &#123;</div><div class="line">               System.out.println(Thread.currentThread().getName() + &quot;:&quot; + (count++));</div><div class="line">               Thread.sleep(100);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public synchronized void run() &#123;</div><div class="line">      method();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其效果和【Demo5】是一样的，synchronized作用于一个类T时，是给这个类T加锁，T的所有对象用的是同一把锁。</p>
<hr>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。<br>B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。<br>C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> Synchronized </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 图片的加载]]></title>
      <url>/2017/10/07/Android-%E5%9B%BE%E7%89%87%E7%9A%84%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="Android-图片的加载"><a href="#Android-图片的加载" class="headerlink" title="Android 图片的加载"></a>Android 图片的加载</h3><blockquote>
<p>忽然想起在以前公司做Android的时候，有个哥们在首页放图片的时候，总是因为OOM而崩溃，今天打算正式找一下原因</p>
</blockquote>
<h4 id="首先来一个demo如下"><a href="#首先来一个demo如下" class="headerlink" title="首先来一个demo如下"></a>首先来一个demo如下</h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fk9ggjczxkj30uk1iqb29.jpg" alt="本图片格式为1024 * 707，199.62KB"></p>
<p>用同样的图片，同样大小的ImageView加载，不同的方法测试，其中第一个图片采用最优加载，第二个图片采用<code>setBackgroundResource</code>，第三个图片采用<code>setBackground</code>，第四个图片采用<code>Glide</code>加载。</p>
<p>查看源码可知，<code>setBackgroundResource</code>和<code>setBackground</code>最后调用的其实都是<code>setBackgroundDrawable</code>。</p>
<p>如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public void setBackgroundResource(@DrawableRes int resid) &#123;</div><div class="line">    if (resid != 0 &amp;&amp; resid == mBackgroundResource) &#123;</div><div class="line">        return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    Drawable d = null;</div><div class="line"> if (resid != 0) &#123;</div><div class="line">        d = mContext.getDrawable(resid);</div><div class="line">  &#125;</div><div class="line">    setBackground(d);    mBackgroundResource = resid; &#125;</div><div class="line"></div><div class="line"></div><div class="line">public void setBackground(Drawable background) &#123;</div><div class="line">    //noinspection deprecation</div><div class="line">  setBackgroundDrawable(background); &#125;</div></pre></td></tr></table></figure></p>
<p>简单查看<code>setBackgroundDrawable</code>的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">public void setBackgroundDrawable(Drawable background) &#123;</div><div class="line">    computeOpaqueFlags();   if (background == mBackground) &#123;</div><div class="line">        return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    boolean requestLayout = false;    mBackgroundResource = 0;    /*</div><div class="line"> * Regardless of whether we&apos;re setting a new background or not, we want * to clear the previous drawable. setVisible first while we still have the callback set. */  if (mBackground != null) &#123;</div><div class="line">        if (isAttachedToWindow()) &#123;</div><div class="line">            mBackground.setVisible(false, false);</div><div class="line">  &#125;</div><div class="line">        mBackground.setCallback(null);</div><div class="line">  unscheduleDrawable(mBackground);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    if (background != null) &#123;</div><div class="line">        Rect padding = sThreadLocal.get();</div><div class="line"> if (padding == null) &#123;</div><div class="line">            padding = new Rect();</div><div class="line">  sThreadLocal.set(padding);</div><div class="line">  &#125;</div><div class="line">        resetResolvedDrawablesInternal();</div><div class="line">  background.setLayoutDirection(getLayoutDirection());</div><div class="line"> if (background.getPadding(padding)) &#123;</div><div class="line">            resetResolvedPaddingInternal();</div><div class="line"> switch (background.getLayoutDirection()) &#123;</div><div class="line">                case LAYOUT_DIRECTION_RTL:</div><div class="line">                    mUserPaddingLeftInitial = padding.right;</div><div class="line">  mUserPaddingRightInitial = padding.left;</div><div class="line">  internalSetPadding(padding.right, padding.top, padding.left, padding.bottom);</div><div class="line"> break; case LAYOUT_DIRECTION_LTR:</div><div class="line">                default:</div><div class="line">                    mUserPaddingLeftInitial = padding.left;</div><div class="line">  mUserPaddingRightInitial = padding.right;</div><div class="line">  internalSetPadding(padding.left, padding.top, padding.right, padding.bottom);</div><div class="line">  &#125;</div><div class="line">            mLeftPaddingDefined = false;</div><div class="line">  mRightPaddingDefined = false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">        // Compare the minimum sizes of the old Drawable and the new.  If there isn&apos;t an old or</div><div class="line"> // if it has a different minimum size, we should layout again  if (mBackground == null</div><div class="line">  || mBackground.getMinimumHeight() != background.getMinimumHeight()</div><div class="line">                || mBackground.getMinimumWidth() != background.getMinimumWidth()) &#123;</div><div class="line">            requestLayout = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">        // Set mBackground before we set this as the callback and start making other</div><div class="line"> // background drawable state change calls. In particular, the setVisible call below // can result in drawables attempting to start animations or otherwise invalidate, // which requires the view set as the callback (us) to recognize the drawable as // belonging to it as per verifyDrawable.  mBackground = background;</div><div class="line"> if (background.isStateful()) &#123;</div><div class="line">            background.setState(getDrawableState());</div><div class="line">  &#125;</div><div class="line">        if (isAttachedToWindow()) &#123;</div><div class="line">            background.setVisible(getWindowVisibility() == VISIBLE &amp;&amp; isShown(), false);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">        applyBackgroundTint();    // Set callback last, since the view may still be initializing.</div><div class="line">  background.setCallback(this);   if ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) != 0) &#123;</div><div class="line">            mPrivateFlags &amp;= ~PFLAG_SKIP_DRAW;</div><div class="line">  requestLayout = true;</div><div class="line">  &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        /* Remove the background */</div><div class="line">  mBackground = null;</div><div class="line"> if ((mViewFlags &amp; WILL_NOT_DRAW) != 0</div><div class="line">  &amp;&amp; (mForegroundInfo == null || mForegroundInfo.mDrawable == null)) &#123;</div><div class="line">            mPrivateFlags |= PFLAG_SKIP_DRAW;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">        /*</div><div class="line"> * When the background is set, we try to apply its padding to this * View. When the background is removed, we don&apos;t touch this View&apos;s * padding. This is noted in the Javadocs. Hence, we don&apos;t need to * requestLayout(), the invalidate() below is sufficient. */   // The old background&apos;s minimum size could have affected this // View&apos;s layout, so let&apos;s requestLayout  requestLayout = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    computeOpaqueFlags();   if (requestLayout) &#123;</div><div class="line">        requestLayout();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    mBackgroundSizeChanged = true;</div><div class="line">  invalidate(true);</div><div class="line">  invalidateOutline(); &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法首先查看这个Drawable是否和之前设置的相等，如果一样的话，直接结束方法。然后查看以前设置的<code>mBackground</code>是否为<code>null</code>，如果不为null，则清除之前设置的。接下来就是查看这个Drawable是否为null，如果不为null，就进行一系列的设置，为null的话，就移除之前的。</p>
<p>分析到这里好像也没发现图片大小的关键，不急，继续分析。</p>
<h4 id="图片占用的大小"><a href="#图片占用的大小" class="headerlink" title="图片占用的大小"></a>图片占用的大小</h4><p>app启动占用内存<br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fk9h7k1tkej30qo05cwep.jpg" alt=""><br>经测试<br>a. 调用<code>setBackgroundResource</code><br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fk9h9694ouj30im058glt.jpg" alt=""><br>b. 调用<code>setBackground</code><br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fk9ha2b5waj30je04sgls.jpg" alt=""><br>c. 直接加载src<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fk9hc4vzy6j30hu04ugls.jpg" alt=""><br>d. Glide加载<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fk9hfu92hsj30h804gq32.jpg" alt=""><br>e. 计算相关数值后加载<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fk9hh9izzfj30iu054wen.jpg" alt=""><br><strong>what!!</strong> 怪不得会OOM，直接设置的话，加载一张200K的图片至少占用了24.5mb的内存，不卡才怪。</p>
<h4 id="图片加载的优化"><a href="#图片加载的优化" class="headerlink" title="图片加载的优化"></a>图片加载的优化</h4><blockquote>
<p>核心思想: 加载所需的尺寸，通过设置<code>BitmapFactory的Options</code></p>
</blockquote>
<p>关键代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public Bitmap decodeSimpleBitmapFromResource(Resources res, int resId,</div><div class="line"> int reqWidth, int reqHeight) &#123;</div><div class="line">    BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">  options.inJustDecodeBounds = true;</div><div class="line">  BitmapFactory.decodeResource(res, resId, options);    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);    options.inJustDecodeBounds = false;</div><div class="line"> return BitmapFactory.decodeResource(res,resId,options); &#125;</div><div class="line"></div><div class="line">private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) &#123;</div><div class="line">    int outWidth = options.outWidth;</div><div class="line"> int outHeight = options.outHeight;   int sampleSize = 1;   if (outHeight &gt; outWidth || outWidth &gt; outHeight) &#123;</div><div class="line">        int halfWidth = outWidth / 2;</div><div class="line"> int halfHeight = outHeight / 2;   while ((halfHeight / sampleSize) &gt;= reqHeight &amp;&amp;</div><div class="line">                (halfWidth / sampleSize) &gt;= reqWidth) &#123;</div><div class="line">            sampleSize *= 2;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    return sampleSize; &#125;</div></pre></td></tr></table></figure></p>
<p>Options有两个关键参数 ，<code>inJustDecodeBounds</code>和<code>inSampleSize</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * If set to true, the decoder will return null (no bitmap), but * the out... fields will still be set, allowing the caller to query * the bitmap without having to allocate the memory for its pixels. */ public boolean inJustDecodeBounds;</div></pre></td></tr></table></figure></p>
<p>当这个参数设置为<code>true</code>的时候，它不会立刻加载图片，而是允许调用者计算需要的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * If set to a value &gt; 1, requests the decoder to subsample the original * image, returning a smaller image to save memory. The sample size is * the number of pixels in either dimension that correspond to a single * pixel in the decoded bitmap. For example, inSampleSize == 4 returns * an image that is 1/4 the width/height of the original, and 1/16 the * number of pixels. Any value &lt;= 1 is treated the same as 1. Note: the * decoder uses a final value based on powers of 2, any other value will * be rounded down to the nearest power of 2. */ public int inSampleSize;</div></pre></td></tr></table></figure>
<p><code>inSampleSize</code>为采样率，总是大于1并且建议为2的倍数。比如一个ImageView为100<em>100像素，图片为200</em>200，那么我们设置采样率为2，就可以。</p>
<p>完整的步骤如下。</p>
<ul>
<li>将<code>BitmapFactory的Options</code>的<code>inJustDecodeBounds</code>设置为<code>true</code>并加载图片。</li>
<li>从<code>BitmapFactory的Options</code>中取出图片的原始宽高信息</li>
<li>根据规则计算采样率</li>
<li>将<code>BitmapFactory的Options</code>的<code>inJustDecodeBounds</code>设置为<code>false</code>,重新加载图片。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 图片加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android的ANR文件导出]]></title>
      <url>/2017/10/07/Android%E7%9A%84ANR%E6%96%87%E4%BB%B6%E5%AF%BC%E5%87%BA/</url>
      <content type="html"><![CDATA[<h2 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h2><p>1、adb remount  是将设备改为可读可写<br>2、adb root 必要时<br>在应用程序ANR的时候，会在<code>/data/anr</code>下面生成<code>traces.txt</code>文件<br>使用 <code>adb pull /data/anr/traces.txt /Users/wangchangqin/Downloads</code>命令可以导出分析</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> ANR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iterm2快捷键]]></title>
      <url>/2017/09/14/iterm2%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li><p>新建标签：command + t</p>
</li>
<li><p>关闭标签：command + w</p>
</li>
<li><p>切换标签：command + 数字 command + 左右方向键</p>
</li>
<li><p>切换全屏：command + enter</p>
</li>
<li><p>查找：command + f</p>
</li>
</ul>
<hr>
<h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><ul>
<li><p>垂直分屏：command + d</p>
</li>
<li><p>水平分屏：command + shift + d</p>
</li>
<li><p>切换屏幕：command + option + 方向键 command + [ 或 command + ]</p>
</li>
<li><p>查看历史命令：command + ;</p>
</li>
<li><p>查看剪贴板历史：command + shift + h</p>
</li>
</ul>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>清除当前行：ctrl + u</p>
</li>
<li><p>到行首：ctrl + a</p>
</li>
<li><p>到行尾：ctrl + e</p>
</li>
<li><p>前进后退：ctrl + f/b (相当于左右方向键)</p>
</li>
<li><p>上一条命令：ctrl + p</p>
</li>
<li><p>搜索命令历史：ctrl + r</p>
</li>
<li><p>删除当前光标的字符：ctrl + d</p>
</li>
<li><p>删除光标之前的字符：ctrl + h</p>
</li>
<li><p>删除光标之前的单词：ctrl + w</p>
</li>
<li><p>删除到文本末尾：ctrl + k</p>
</li>
<li><p>交换光标处文本：ctrl + t</p>
</li>
<li><p>清屏1：command + r</p>
</li>
<li><p>清屏2：ctrl + l</p>
</li>
</ul>
<hr>
<h2 id="自带有哪些很实用的功能-快捷键"><a href="#自带有哪些很实用的功能-快捷键" class="headerlink" title="自带有哪些很实用的功能/快捷键"></a>自带有哪些很实用的功能/快捷键</h2><ul>
<li><p>⌘ + 数字在各 tab 标签直接来回切换</p>
</li>
<li><p>选择即复制 + 鼠标中键粘贴，这个很实用</p>
</li>
<li><p>⌘ + f 所查找的内容会被自动复制</p>
</li>
<li><p>⌘ + d 横着分屏 / ⌘ + shift + d 竖着分屏</p>
</li>
<li><p>⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</p>
</li>
<li><p>ctrl + u 清空当前行，无论光标在什么位置</p>
</li>
<li><p>输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</p>
</li>
<li><p>⌘ + shift + h 会列出剪切板历史</p>
</li>
<li><p>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac iterm2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)AppBarLayout的五种ScrollFlags]]></title>
      <url>/2017/09/13/%E8%BD%AC-AppBarLayout%E7%9A%84%E4%BA%94%E7%A7%8DScrollFlags/</url>
      <content type="html"><![CDATA[<h3 id="转-AppBarLayout的五种ScrollFlags"><a href="#转-AppBarLayout的五种ScrollFlags" class="headerlink" title="(转)AppBarLayout的五种ScrollFlags"></a>(转)AppBarLayout的五种ScrollFlags</h3><h1 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h1><hr>
<blockquote>
<p>The view will be scroll in direct relation to scroll events. This flag needs to be set for any of the other flags to take effect. If any sibling views before this one do not have this flag, then this value has no effect.</p>
</blockquote>
<p>Child View 伴随着滚动事件而滚出或滚进屏幕。注意两点：第一点，如果使用了其他值，必定要使用这个值才能起作用；第二点：如果在这个child View前面的任何其他Child View没有设置这个值，那么这个Child View的设置将失去作用。<br>示例XML代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.AppBarLayout</div><div class="line">    android:id=&quot;@+id/appbar&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.Toolbar</div><div class="line">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">        android:id=&quot;@+id/tb_toolbar&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;@dimen/dp_56&quot;</div><div class="line">        app:titleTextColor=&quot;@color/white&quot;</div><div class="line">        app:title=&quot;@string/app_name&quot;</div><div class="line">        app:theme=&quot;@style/OverFlowMenuTheme&quot;</div><div class="line">        app:popupTheme=&quot;@style/AppTheme&quot;</div><div class="line">        android:background=&quot;@color/blue&quot;</div><div class="line">        app:layout_scrollFlags=&quot;scroll|enterAlways&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</div></pre></td></tr></table></figure>
<p>对应效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1094967-877bd6d61a4e22f9.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>Samples01.gif</p>
<h1 id="enterAlways"><a href="#enterAlways" class="headerlink" title="enterAlways"></a>enterAlways</h1><hr>
<blockquote>
<p>When entering (scrolling on screen) the view will scroll on any downwards scroll event, regardless of whether the scrolling view is also scrolling. This is commonly referred to as the ‘quick return’ pattern.</p>
</blockquote>
<p>快速返回模式。其实就是向下滚动时Scrolling View和Child View之间的滚动优先级问题。对比<code>scroll</code>和<code>scroll | enterAlways</code>设置，发生向下滚动事件时，前者优先滚动Scrolling View，后者优先滚动Child View，当优先滚动的一方已经全部滚进屏幕之后，另一方才开始滚动。</p>
<p>示例XML代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">app:layout_scrollFlags=&quot;scroll|enterAlways&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>对应效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1094967-e0873ea34c4637a5.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>Samples02.gif</p>
<h1 id="enterAlwaysCollapsed"><a href="#enterAlwaysCollapsed" class="headerlink" title="enterAlwaysCollapsed"></a>enterAlwaysCollapsed</h1><hr>
<blockquote>
<p>An additional flag for ‘enterAlways’ which modifies the returning view to only initially scroll back to it’s collapsed height. Once the scrolling view has reached the end of it’s scroll range, the remainder of this view will be scrolled into view. The collapsed height is defined by the view’s minimum height.</p>
</blockquote>
<p>enterAlways的附加值。这里涉及到Child View的高度和最小高度，向下滚动时，Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。</p>
<p>示例XML代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android:layout_height=&quot;@dimen/dp_200&quot;</div><div class="line">android:minHeight=&quot;@dimen/dp_56&quot;</div><div class="line">...</div><div class="line">app:layout_scrollFlags=&quot;scroll|enterAlways|enterAlwaysCollapsed&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>对应效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1094967-4ab6365b7fac590e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>Samples03.gif</p>
<h1 id="exitUntilCollapsed"><a href="#exitUntilCollapsed" class="headerlink" title="exitUntilCollapsed"></a>exitUntilCollapsed</h1><hr>
<blockquote>
<p>When exiting (scrolling off screen) the view will be scrolled until it is ‘collapsed’. The collapsed height is defined by the view’s minimum height.</p>
</blockquote>
<p>这里也涉及到最小高度。发生向上滚动事件时，Child View向上滚动退出直至最小高度，然后Scrolling View开始滚动。也就是，Child View不会完全退出屏幕。</p>
<p>示例SML代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android:layout_height=&quot;@dimen/dp_200&quot;</div><div class="line">android:minHeight=&quot;@dimen/dp_56&quot;</div><div class="line">...</div><div class="line">app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>对应效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1094967-6f683857f6d567ca.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>Samples04.gif</p>
<h1 id="snap"><a href="#snap" class="headerlink" title="snap"></a>snap</h1><hr>
<blockquote>
<p>Upon a scroll ending, if the view is only partially visible then it will be snapped and scrolled to it’s closest edge. For example, if the view only has it’s bottom 25% displayed, it will be scrolled off screen completely. Conversely, if it’s bottom 75% is visible then it will be scrolled fully into view.</p>
</blockquote>
<p>简单理解，就是Child View滚动比例的一个吸附效果。也就是说，Child View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕，有点类似ViewPager的左右滑动。</p>
<p>示例XML代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android:layout_height=&quot;@dimen/dp_200&quot;</div><div class="line">...</div><div class="line">app:layout_scrollFlags=&quot;scroll|snap&quot;</div><div class="line">...</div></pre></td></tr></table></figure>
<p>对应效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1094967-7d9619ee3fb0d974.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>Samples05.gif</p>
<p>本文转载自<a href="http://www.jianshu.com/p/7caa5f4f49bd" target="_blank" rel="external">http://www.jianshu.com/p/7caa5f4f49bd</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓自动化测试文档]]></title>
      <url>/2017/09/08/%E5%AE%89%E5%8D%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h2 id="安卓自动化测试文档"><a href="#安卓自动化测试文档" class="headerlink" title="安卓自动化测试文档"></a>安卓自动化测试文档</h2><h3 id="Monkey"><a href="#Monkey" class="headerlink" title="Monkey"></a>Monkey</h3><h4 id="1-Monkey"><a href="#1-Monkey" class="headerlink" title="1. Monkey"></a>1. Monkey</h4><pre><code>安卓SDK自带的测试工具，    顾名思义，Monkey就是一只猴子，到处乱抓、乱按，属于压力测试软件。
特点： 1.测试对象为程序包，有一定局限性 2.伪随机事件，不能自定义 3.可对事件数量、类型、频率设置
</code></pre><h4 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2. 环境变量配置"></a>2. 环境变量配置</h4><p>以macOs为例<br>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>新增环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export PATH=$&#123;PATH&#125;:/Users/wangchangqin/develop/android/sdk/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/wangchangqin/develop/android/sdk/tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/wangchangqin/develop/android/sdk/tools/bin</div></pre></td></tr></table></figure></p>
<p>这样就把monkeyrunner 配置到环境变量了。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjbygk3zpuj30em050756.jpg" alt=""></p>
<h4 id="3-Monkey基本用法"><a href="#3-Monkey基本用法" class="headerlink" title="3. Monkey基本用法"></a>3. Monkey基本用法</h4><pre><code>**adb shell monkey [option]**
option为可选参数，如果不加的话,默认会测试所有的APP。

**adb shell monkey -p your.package.name &lt;event count &gt;**
-p用来指定需要测试的APP，后面跟测试APP的包名 event count 表示需要发送事件的个数。
</code></pre><h4 id="4-Monkey基础参数"><a href="#4-Monkey基础参数" class="headerlink" title="4. Monkey基础参数"></a>4. Monkey基础参数</h4><ul>
<li><strong>-p</strong> <your.package.name><br>  用于指定一个包或多个包，指定了包之后，Monkey将只启动指定的APP，不指定的话，将允许启动所有的APP。</your.package.name></li>
<li><strong>-c</strong> <category><br>  如果用此参数指定了一个或几个类别，Monkey将只允许系统启动被这些类别中的某个类别列出的Activity。如果不指定任何类别，Monkey将选择下列类别中列出的Activity:Intent.CATEGORY.LAUNCHER或Intent.CATEGORY.MONKEY。要指定多个类别，需要使用多个-c选项，每个-c选项只能用于一个类别。</category></li>
<li><strong>-v</strong> 日志反馈级别。总共分3个级别，分别对应的参数如下所示：<br>  | Level | cmd | Info |<br>  | — | — | – |<br>  | -v | Level 0  :  adb shell monkey -p your.package.name -v 100 | 缺省值，仅提供启动提示、测试完        成和最终结果等少量信息 |<br>  | -v -v | adb shell monkey -p your.package.name -v  -v 100 | 提供较为详细的日志，包括每个发送到Activity的事件信息 |<br>  | -v -v -v | adb shell monkey -p your.package.name -v  -v  -v 100 | 最详细的日志，包括了测试中选中/未选中的Activity信息 |</li>
<li><strong>-s</strong> (随机数种子)<br>  用于指定伪随机数生成器的seed值，如果seed相同，则两次Monkey测试所产生的事件序列也相同的。  示例：<br>  monkey测试1：adb shell monkey -p your.package.name –s 10 100<br>  monkey测试2：adb shell monkey -p your.package.name –s 10 100    </li>
<li><strong>–throttle</strong> &lt;毫秒&gt;<br>  用于指定用户操作（即事件）间的时延，单位是毫秒；如果不指定这个参数，monkey会尽可能快的 生成和发送消息。<br>  例：adb shell monkey -p your.package.name –throttle 3000 100</li>
</ul>
<h4 id="5-Monkey发送事件的类型"><a href="#5-Monkey发送事件的类型" class="headerlink" title="5. Monkey发送事件的类型"></a>5. Monkey发送事件的类型</h4><ul>
<li><strong>–pct-touch<percent></percent></strong><br>  调整触摸事件的百分比（触摸事件是一个down-up事件），它发生在屏幕上的某单一位置</li>
<li><strong>–pct-motion<percent></percent></strong><br>  调整动作事件的百分比（动作事件是由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成）</li>
<li><strong>–pct-trackball<percent></percent></strong><br>  调整轨迹事件的百分比（轨迹事件由一个或几个随机的移动组成，有时还伴随有点击）事件</li>
<li><strong>–pct-nav<percent></percent></strong><br>  调整“基本”导航时间的百分比（导航事件由来自方向输入设备的up/down/left/right组成）</li>
<li><strong>–pct-majornav<percent></percent></strong><br>  调整“主要”导航事件的百分比（这些导航事件通常引发图形界面中的动作，如5-way键盘的中间按键、回退按键、菜单按键）</li>
<li><strong>–pct-syskeys<percent></percent></strong><br>  调整“系统”按钮事件的百分比（这些按键通常被保留，由系统使用，如Home、Back、StartCall、End   Call及音量控制键）</li>
<li><strong>–pct-appswitch</strong><br>  调整启动Activity的百分比。在随机间隔里，Monkey执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法</li>
<li><strong>–pct-anyevent<percent></percent></strong><br>  调整其他类型事件的百分比。它包罗了所有其他类型的事件，如：按键、其他不常用的设备按钮等</li>
<li><strong>–pct-flip<percent></percent></strong></li>
<li><strong>–pct-pinchzoom<percnet></percnet></strong></li>
</ul>
<h4 id="6-Monkey调试参数"><a href="#6-Monkey调试参数" class="headerlink" title="6. Monkey调试参数"></a>6. Monkey调试参数</h4><ul>
<li><strong>–dbg-no-events</strong><br>  设置此选项，Monkey将执行初始启动，进入到一个测试Activity，然后不会再进一步生成事件。最好将它与-v、一个或几个包约束。以及一个保持Monkey运行30秒或更长事件的非零值联合起来，从而提供一个环境，可以监视应用程序所调用的包之间的转换</li>
<li><strong>–hprof</strong><br>  设置此选项，将在Monkey事件序列之前和之后立即生成profiling报告，这将在data/misc中生成大文件（~5MB），所以要小心使用</li>
<li><strong>–ignore-crashes</strong><br>  通常，当应用程序崩溃或发生任何失控异常时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成</li>
<li><strong>–ignore-timeouts</strong><br>  应用程序发生任何超时错误（如”Application   Not Responding”对话框）时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成</li>
<li><strong>–ingore-security-exceptions</strong><br>  当应用程序发生权限许可错误时，Monkey将停止运行。如果设置了此选项，Monkey将继续向系统发送事件，直到计数完成</li>
<li><strong>–ingnore-native-crashes</strong><br>  当应用程序发生底层C/C++代码引起的崩溃事件时，Monkey将停止运行。选择此项，Monkey将继续向系统发送事件，直到计数完成</li>
<li><strong>–monitor-native-crashes</strong><br>  监视并报告Android系统中Android   C/C++引起的崩溃事件。如果设置了–kill-process-after-error，系统将停止运行</li>
<li><strong>–kill-process-after-error</strong><br>  当Monkey由于一个错误而停止时，出错的应用程序将继续处于运行状态。当设置了此选项时，将会通知系统停止发生错误的进程。注意，当Monkey正常执行完毕，它不会关闭所有启动的应用，设备依然保留Monkey结束时的状态</li>
<li><strong>–wait-dbq</strong><pre><code>启动Monkey后，先中断其运行，等待调试器附加上来
</code></pre></li>
</ul>
<h4 id="7-Monkey黑名单与白名单"><a href="#7-Monkey黑名单与白名单" class="headerlink" title="7. Monkey黑名单与白名单"></a>7. Monkey黑名单与白名单</h4><pre><code>***黑名单：不测试的应用***
***白名单：只测试这部分应用***
***注意：不能同时设置黑名单和白名单***
</code></pre><ul>
<li><strong>–pkg-blacklist-file</strong><br>  apk黑名单，屏蔽掉黑名单中的apk</li>
<li><strong>–pkg-whitelist-file</strong><br>  apk白名单，只测试包含在白名单中的apk</li>
</ul>
<p>以黑名单为例，具体的步骤如下：</p>
<pre><code>1.  查找系统的包，并输出到e盘的pkg文档里。adb shell pm list package&gt;e:\pkg.txt
2.  将想要加入黑名单的apk的包名放到blacklist.txt里，最后push进设备。adb push e:\blacklist.txt /data/local/tmp/
3.  执行Monkey命令。adb shell monkey --pkg-blacklist-file /data/local/tmp/blacklist.txt --throttle 200 200
</code></pre><h4 id="8-MonkeyRunner常用的按键介绍"><a href="#8-MonkeyRunner常用的按键介绍" class="headerlink" title="8. MonkeyRunner常用的按键介绍"></a>8. MonkeyRunner常用的按键介绍</h4><p>Home键：KEYCOD_HOME<br> Back键：KEYCODE_BACK<br>send键：KEYCODE_CALL<br>end键：KEYCODE_ENDCALL  </p>
<p>上导航键：KEYCODE_DPAD_UP（现在手机已经没有这个键）<br>下导航键：KEYCODE_DPAD_DOWN（现在手机已经没有这个键）<br>左导航：KEYCODE_DPAD_LEFT   现在手机已经没有这个键<br>右导航键：KEYCODE_DPAD_RIGHT 现在手机已经没有这个键 </p>
<p>ok键：KEYCODE_DPAD_CENTER </p>
<p>上音量键：KEYCODE_VOLUME_UP<br>下音量键：KEYCODE_VOLUME_DOWN </p>
<p>power键：KEYCODE_POWER<br>camera键：KEYCODE_CAMERA<br>menu键：KEYCODE_MENU<br>search键：KEYCODE_SEARCH<br>call键：KEYCODE_CALL </p>
<p>按下HOME键 device.press(‘KEYCODE_HOME’,MonkeyDevice.DOWN_AND_UP)<br>按下BACK键 device.press(‘KEYCODE_BACK’,MonkeyDevice.DOWN_AND_UP)<br>按下下导航键 device.press(‘KEYCODE_DPAD_DOWN’,MonkeyDevice.DOWN_AND_UP)<br>按下上导航键 device.press(‘KEYCODE_DPAD_UP’,MonkeyDevice.DOWN_AND_UP)<br>按下OK键 device.press(‘KEYCODE_DPAD_CENTER’,MonkeyDevice.DOWN_AND_UP)   </p>
<p>device.press(‘KEYCODE_ENTER’,MonkeyDevice.DOWN_AND_UP)#输入回车</p>
<p>device.press(‘KEYCODE_BACK’,MonkeyDevice.DOWN_AND_UP)#点击返回</p>
<h4 id="9-停止命令"><a href="#9-停止命令" class="headerlink" title="9. 停止命令"></a>9. 停止命令</h4><p>adb shell ps | grep monkey<br>返回来的第一个数字，即是monkey的进程号<br>adb shell kill [刚才查到的进程号]</p>
<h2 id="UiAutomator2"><a href="#UiAutomator2" class="headerlink" title="UiAutomator2"></a>UiAutomator2</h2><h4 id="1-环境配置，以Android-Studio为例"><a href="#1-环境配置，以Android-Studio为例" class="headerlink" title="1. 环境配置，以Android Studio为例"></a>1. 环境配置，以Android Studio为例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    //测试框架</div><div class="line">    // Force usage of support annotations in the test app, since it is internally used by the runner module.</div><div class="line">    androidTestCompile &apos;com.android.support:support-annotations:25.4.0&apos;</div><div class="line">    androidTestCompile &apos;com.android.support.test:runner:1.0.0&apos;</div><div class="line">    // UiAutomator Testing</div><div class="line">    androidTestCompile &apos;com.android.support.test.uiautomator:uiautomator-v18:2.1.3&apos;</div><div class="line">    androidTestCompile &apos;org.hamcrest:hamcrest-integration:1.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 25</div><div class="line">    buildToolsVersion &quot;25.0.3&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">       ...</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-Google官方Demo"><a href="#2-Google官方Demo" class="headerlink" title="2. Google官方Demo"></a>2. Google官方Demo</h4><ul>
<li><code>[Demo](https://github.com/googlesamples/android-testing/tree/master/ui/uiautomator/BasicSample)</code></li>
<li><code>[文档](https://developer.android.com/training/testing/ui-automator.html)</code></li>
</ul>
<h4 id="3-常见API"><a href="#3-常见API" class="headerlink" title="3. 常见API"></a>3. 常见API</h4><ul>
<li></li>
</ul>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><ul>
<li><a href="http://t.leborn.me/blog/home/detail/1509242157594151495" target="_blank" rel="external">http://t.leborn.me/blog/home/detail/1509242157594151495</a></li>
<li><a href="http://www.cnblogs.com/ITGirl00/p/4141277.html" target="_blank" rel="external">http://www.cnblogs.com/ITGirl00/p/4141277.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下添加FTP账号和服务器、增加密码和用户，更改FTP目录]]></title>
      <url>/2017/09/07/Linux%E4%B8%8B%E6%B7%BB%E5%8A%A0FTP%E8%B4%A6%E5%8F%B7%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E5%A2%9E%E5%8A%A0%E5%AF%86%E7%A0%81%E5%92%8C%E7%94%A8%E6%88%B7%EF%BC%8C%E6%9B%B4%E6%94%B9FTP%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>1、 启动VSFTP服务器</strong></p>
<p>A:cenos下运行:yum  install  vsftpd</p>
<p>B. 登录Linux主机后，运行命令：”service vsftpd start”</p>
<p>C. 要让FTP每次开机自动启动，运行命令:  “chkconfig –level 35 vsftpd on”</p>
<blockquote>
<p><strong>2、设置FTP权限</strong></p>
</blockquote>
<p>A. 编辑VSFTP配置文件，运行命令：”vi /etc/vsftpd/vsftpd.conf “</p>
<p>B. 将配置文件中”anonymous_enable=YES “改为 “anonymous_enable=NO”</p>
<p>C. 保存修改，按ESC键，运行命令：“：wq”</p>
<p>这样关闭了匿名登录功能。</p>
<blockquote>
<p><strong>3、添加FTP账号</strong></p>
</blockquote>
<p>A. 登录Linux主机后，运行命令：”useradd ftpadmin -s /sbin/nologin “。该账户路径默认指向/home/ftpadmin目录；如果需要将用户指向其他目录，请运行命令：useradd ftpadmin -s /sbin/nologin –d /www(其他目录)</p>
<p>B. 设置ftpadmin用户密码，运行命令：”passwd ftpadmin” ; 输入两次密码，匹配成功后，就设置好了ftpadmin用户的密码了。</p>
<p>C.测试连接，您可以在“我的电脑”地址栏中输入<strong> ftp://IP </strong>来连接FTP服务器，根据提示输入账户密码。</p>
<blockquote>
<p><strong>4、FTP数据传输注意事项</strong></p>
</blockquote>
<p>A. 尽量把文件打包后上传。Linux无法识别RAR压缩包，可以使用ZIP压缩。</p>
<p>B.上传数据时请选择二进制编码，如果选择其他编码，可能会导致上传的压缩包无法打开。</p>
<p><a href="http://www.cnblogs.com/Anders888/p/4169710.html" target="_blank" rel="external">centos FTP 用户指定目录禁用上级目录</a></p>
<p>在默认配置下，本地用户登入FTP后可以使用cd命令切换到其他目录，这样会对系统带来安全隐患。可以通过以下三条配置文件来控制用户切换目录。<br>chroot_list_enable=YES/NO（NO）<br>设置是否启用chroot_list_file配置项指定的用户列表文件。默认值为NO。<br>chroot_list_file=/etc/vsftpd.chroot_list<br>用于指定用户列表文件，该文件用于控制哪些用户可以切换到用户家目录的上级目录。<br>chroot_local_user=YES/NO（NO）<br>用于指定用户列表文件中的用户是否允许切换到上级目录。默认值为NO。<br>通过搭配能实现以下几种效果：<br>①当chroot_list_enable=YES，chroot_local_user=YES时，在/etc/vsftpd.chroot_list文件中列出的用户，可以切换到其他目录；未在文件中列出的用户，不能切换到其他目录。<br>②当chroot_list_enable=YES，chroot_local_user=NO时，在/etc/vsftpd.chroot_list文件中列出的用户，不能切换到其他目录；未在文件中列出的用户，可以切换到其他目录。<br>③当chroot_list_enable=NO，chroot_local_user=YES时，所有的用户均不能切换到其他目录。<br>④当chroot_list_enable=NO，chroot_local_user=NO时，所有的用户均可以切换到其他目录。</p>
<p>转自<a href="http://blog.csdn.net/xinguan1267/article/details/47751137" target="_blank" rel="external">http://blog.csdn.net/xinguan1267/article/details/47751137</a></p>
]]></content>
      
        <categories>
            
            <category> Centos </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[go 入门资料]]></title>
      <url>/2017/09/05/go%E5%85%A5%E9%97%A8%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<h2 id="go-官方-tour"><a href="#go-官方-tour" class="headerlink" title="go 官方 tour"></a>go 官方 tour</h2><p><a href="https://tour.golang.org/welcome/1" target="_blank" rel="external">https://tour.golang.org/welcome/1</a> </p>
<h2 id="An-Introduction-to-Programming-in-Go"><a href="#An-Introduction-to-Programming-in-Go" class="headerlink" title="An Introduction to Programming in Go"></a>An Introduction to Programming in Go</h2><p><a href="https://www.golang-book.com/books/intro" target="_blank" rel="external">https://www.golang-book.com/books/intro</a></p>
<p>英文书，但是写的通俗易懂，入门非常合适</p>
<h2 id="The-Little-Go-Book"><a href="#The-Little-Go-Book" class="headerlink" title="The Little Go Book"></a>The Little Go Book</h2><p><a href="http://openmymind.net/The-Little-Go-Book/" target="_blank" rel="external">http://openmymind.net/The-Little-Go-Book/</a></p>
<p>英文书，入门读物</p>
<h2 id="Learning-Go"><a href="#Learning-Go" class="headerlink" title="Learning Go"></a>Learning Go</h2><p><a href="https://www.miek.nl/go/" target="_blank" rel="external">https://www.miek.nl/go/</a></p>
<p>每章附有习题可以练习</p>
<h2 id="Go-入门指南"><a href="#Go-入门指南" class="headerlink" title="Go 入门指南"></a>Go 入门指南</h2><p><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">https://github.com/Unknwon/the-way-to-go_ZH_CN</a></p>
<h2 id="build-web-application-with-golang"><a href="#build-web-application-with-golang" class="headerlink" title="build-web-application-with-golang"></a>build-web-application-with-golang</h2><p>Beego 作者写的，中文，除了 go 语言基础也涉及 Go web 编程。</p>
<p><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md</a></p>
<h2 id="大量-web-示例"><a href="#大量-web-示例" class="headerlink" title="大量 web 示例"></a>大量 web 示例</h2><p><a href="https://gowebexamples.github.io/" target="_blank" rel="external">https://gowebexamples.github.io/</a></p>
<h2 id="大量-go-基础示例"><a href="#大量-go-基础示例" class="headerlink" title="大量 go 基础示例"></a>大量 go 基础示例</h2><p><a href="https://gobyexample.com/" target="_blank" rel="external">https://gobyexample.com/</a></p>
<h2 id="完整教程的项目练习"><a href="#完整教程的项目练习" class="headerlink" title="完整教程的项目练习"></a>完整教程的项目练习</h2><p><a href="https://github.com/tuvttran/project-based-learning#go" target="_blank" rel="external">https://github.com/tuvttran/project-based-learning#go</a></p>
<h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul>
<li><p><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">https://github.com/dariubs/GoBooks</a> go 书籍</p>
</li>
<li><p><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="external">https://golang.org/doc/effective_go.html</a> 官方 effective go</p>
</li>
<li><p><a href="https://github.com/golang/go/wiki/Learn" target="_blank" rel="external">https://github.com/golang/go/wiki/Learn</a> 官方 learn wiki</p>
</li>
</ul>
<p>本文转自!(这里)[<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzAzMjk4Mw==&amp;mid=2247483738&amp;idx=1&amp;sn=784b773657b8738881267e7beba6417b&amp;chksm=903ed4a2a7495db4d67176dc37bc568f3b36ad6b3ed5a1e3df1b905c166e83c479d71b04166d&amp;scene=0&amp;key=dc7dfb672b5ac5a8ea6981f3dc3fefb0b9aff7f2e96ccb64f33c5b30774246dfd9b88b659424ca039c88e28cbfb14dd13b9b13e34e3a322859f23d516437d53b3f3cf03618e2c216452736100a95f304&amp;ascene=0&amp;uin=OTUyMjY5NDgw&amp;devicetype=iMac16,1%20OSX%20OSX%2010.12.3%20build(16D32)&amp;version=12020810&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=UCnt2mlbLQK0LQCE2WJzZ83b21CwTB3t3tmP+caHdGQf7ENogbeVafHJkNSqJs3F" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzA4NzAzMjk4Mw==&amp;mid=2247483738&amp;idx=1&amp;sn=784b773657b8738881267e7beba6417b&amp;chksm=903ed4a2a7495db4d67176dc37bc568f3b36ad6b3ed5a1e3df1b905c166e83c479d71b04166d&amp;scene=0&amp;key=dc7dfb672b5ac5a8ea6981f3dc3fefb0b9aff7f2e96ccb64f33c5b30774246dfd9b88b659424ca039c88e28cbfb14dd13b9b13e34e3a322859f23d516437d53b3f3cf03618e2c216452736100a95f304&amp;ascene=0&amp;uin=OTUyMjY5NDgw&amp;devicetype=iMac16,1%20OSX%20OSX%2010.12.3%20build(16D32)&amp;version=12020810&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=UCnt2mlbLQK0LQCE2WJzZ83b21CwTB3t3tmP+caHdGQf7ENogbeVafHJkNSqJs3F</a> ]</p>
]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CoordinatorLayout.Behavior学习]]></title>
      <url>/2017/08/30/CoordinatorLayout-Behavior%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="Behavior常用的方法"><a href="#Behavior常用的方法" class="headerlink" title="Behavior常用的方法"></a>Behavior常用的方法</h2><p>构造方法有两个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">默认：public Behavior() &#123;&#125;</div><div class="line"></div><div class="line">布局：public Behavior(Context context, AttributeSet attrs) &#123;  &#125;</div></pre></td></tr></table></figure>
<p>两个构造方法也比较容易理解，一个是默认的空参的构造方法，一个是带有布局属性<code>AttributeSet</code>的方法，有了这个构造方法，可以直接在布局文件中使用</p>
<hr>
<p>根据<code>Behavior</code>的特性，可以将内部的方法分以下类：</p>
<ul>
<li><strong>测量与布局：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">测量：public boolean onMeasureChild()&#123;&#125;</div><div class="line">布局：public boolean onLayoutChild()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>特定状态：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//当Behavior添加到参数实例时，回调</div><div class="line">public void onAttachedToLayoutParams()&#123;&#125;</div><div class="line"></div><div class="line">//当Behavior与参数实例分离时，回调</div><div class="line">public void onDetachedFromLayoutParams()&#123;&#125;</div><div class="line"></div><div class="line">//当Behavior关联的对象想要定位到特定的矩形时，回调</div><div class="line">public boolean onRequestChildRectangleOnScreen()&#123;&#125;</div><div class="line"></div><div class="line">//当一个ChildView设置为回避属性时，回调</div><div class="line">public boolean getInsetDodgeRect()&#123;&#125;</div><div class="line"></div><div class="line">//当窗口发生改变时，回调</div><div class="line">public WindowInsetsCompat onApplyWindowInsets()&#123;&#125;</div><div class="line"></div><div class="line">//需要保存临时状态信息，回调</div><div class="line">public Parcelable onSaveInstanceState()&#123;&#125;</div><div class="line"></div><div class="line">//需要恢复临时状态信息，回调</div><div class="line">public void onRestoreInstanceState()&#123;&#125;</div><div class="line"></div><div class="line">//作用未知</div><div class="line">public int getScrimColor()&#123;&#125;</div><div class="line"></div><div class="line">//作用未知</div><div class="line">public float getScrimOpacity()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>确定依赖与绑定对象：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//根据参数来确定依赖与绑定对象</div><div class="line">public boolean layoutDependsOn()&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>当依赖对象发生改变时：</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//当依赖对象发生改变，包括位置，大小，颜色，进行回调</div><div class="line">public boolean onDependentViewChanged()&#123;&#125;</div><div class="line"></div><div class="line">//当依赖对象被移除时，进行回调</div><div class="line">public void onDependentViewRemoved()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>事件相关：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//拦截事件，在CoordinatorLayout把事件分发到childView之前</div><div class="line">public boolean onInterceptTouchEvent()&#123;&#125;</div><div class="line"></div><div class="line">//消费事件</div><div class="line">public boolean onTouchEvent()&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>嵌套滑动：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//CoordinatorLayout中的滑动嵌套childView开始启动一次嵌套滚动时，回调</div><div class="line">public boolean onStartNestedScroll()&#123;&#125;</div><div class="line"></div><div class="line">//嵌套滑动结束时，回调</div><div class="line">public void onStopNestedScroll()&#123;&#125;</div><div class="line"></div><div class="line">//当一次嵌套滑动被CoordiantorLayout识别并确定时，进行回调</div><div class="line">public void onNestedScrollAccepted()&#123;&#125;</div><div class="line"></div><div class="line">//嵌套滚动正在进行中并且绑定目标childView已经开始滚动或者被CoordinatorLayout接受后试图滚动</div><div class="line">public void onNestedScroll()&#123;&#125;</div><div class="line"></div><div class="line">//嵌套滚动正在准备更新进度，并且是在绑定目标childView已经出现滚动距离之前，回调</div><div class="line">public void onNestedPreScroll()&#123;&#125;</div><div class="line"></div><div class="line">//当嵌套滚动的childView正在开始fling或者一个动作确认为fling</div><div class="line">public boolean onNestedFling()&#123;&#125;</div><div class="line"></div><div class="line">//当滑动嵌套childView检测到适当的条件，马上开始一次fling事件前回调</div><div class="line">public boolean onNestedPreFling()&#123;&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Mater Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android studio jni 入门实战]]></title>
      <url>/2017/08/26/android-studio-jni-%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h2 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h2><h3 id="1-NDK的下载与环境配置"><a href="#1-NDK的下载与环境配置" class="headerlink" title="1. NDK的下载与环境配置."></a>1. NDK的下载与环境配置.</h3><p>首先进入as的设置，下载NDK<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fix8ep6czcj31kw111k1f.jpg" alt=""><br>然后进入project structure设置路径<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fix8glb610j319k124jwk.jpg" alt=""><br>在local.properties里设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndk.dir=/Users/wangchangqin/develop/android/sdk/ndk-bundle sdk.dir=/Users/wangchangqin/develop/android/sdk</div></pre></td></tr></table></figure></p>
<p>在gradle.properties里设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.gradle.jvmargs=-Xmx1536m android.useDeprecatedNdk=true</div></pre></td></tr></table></figure></p>
<h3 id="2-新建一个实体类"><a href="#2-新建一个实体类" class="headerlink" title="2.  新建一个实体类"></a>2.  新建一个实体类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class JniTest &#123;</div><div class="line">    static &#123;</div><div class="line">        System.loadLibrary(&quot;wcqtest&quot;);</div><div class="line">    &#125;</div><div class="line">    public static native String getJniString(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个wcqtest需要在build.gradle里配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;   </div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 26</div><div class="line">  buildToolsVersion &quot;26.0.1&quot;</div><div class="line">  defaultConfig &#123;</div><div class="line">        applicationId &quot;com.example.wangchangqin.ndkdemo2&quot;</div><div class="line">  minSdkVersion 23</div><div class="line">  targetSdkVersion 26</div><div class="line">  versionCode 1</div><div class="line">  versionName &quot;1.0&quot;</div><div class="line">  testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">  ndk &#123;</div><div class="line">        moduleName &quot;wcqtest&quot;</div><div class="line">      abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot;, &quot;mips&quot; </div><div class="line">    //输出指定三种abi体系结构下的so库。</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">  &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:26.+&apos;</div><div class="line">  compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">  testCompile &apos;junit:junit:4.12&apos; &#125;</div></pre></td></tr></table></figure>
<h3 id="3-头文件的生成"><a href="#3-头文件的生成" class="headerlink" title="3.  头文件的生成"></a>3.  头文件的生成</h3><p>进入java目录，make project<br>执行<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fix8oi7i4fj30o204474k.jpg" alt=""><br>在java目录下会生成.h头文件<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fix8qssmupj30jw03mq3g.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* DO NOT EDIT THIS FILE - it is machine generated */ #include &lt;jni.h&gt; /* Header for class com_example_wangchangqin_ndkdemo2_JniTest */   #ifndef _Included_com_example_wangchangqin_ndkdemo2_JniTest #define _Included_com_example_wangchangqin_ndkdemo2_JniTest #ifdef __cplusplus</div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#endif /*</div><div class="line"> * Class:     com_example_wangchangqin_ndkdemo2_JniTest * Method:    getJniString * Signature: ()Ljava/lang/String; */ JNIEXPORT jstring JNICALL Java_com_example_wangchangqin_ndkdemo2_JniTest_getJniString</div><div class="line">  (JNIEnv *, jclass);   #ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif #endif</div></pre></td></tr></table></figure></p>
<h3 id="4-新建jni目录，创建c或c-文件"><a href="#4-新建jni目录，创建c或c-文件" class="headerlink" title="4.  新建jni目录，创建c或c++文件"></a>4.  新建jni目录，创建c或c++文件</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fix8u9fvwdj319e0wmagx.jpg" alt=""><br>把生成的头文件放到jni目录，创建tmp.c文件(名字随便)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#include &quot;com_example_wangchangqin_ndkdemo2_JniTest.h&quot;   JNIEXPORT jstring JNICALL Java_com_example_wangchangqin_ndkdemo2_JniTest_getJniString</div><div class="line">  (JNIEnv *env, jclass obj)&#123;</div><div class="line">    return (*env) -&gt; NewStringUTF(env,&quot;hello jni&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5.  运行"></a>5.  运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">  protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">  setContentView(R.layout.activity_main);                 Log.e(&quot;qqq&quot;,JniTest.getJniString());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功！<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fix94t22zcj30y202smyw.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
            <tag> NDK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(转)30多个短小而又专业的最佳安卓开发者建议]]></title>
      <url>/2017/08/24/%E8%BD%AC-30%E5%A4%9A%E4%B8%AA%E7%9F%AD%E5%B0%8F%E8%80%8C%E5%8F%88%E4%B8%93%E4%B8%9A%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%80%85%E5%BB%BA%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h1 id="【翻译】30多个短小而又专业的最佳安卓开发者建议"><a href="#【翻译】30多个短小而又专业的最佳安卓开发者建议" class="headerlink" title="【翻译】30多个短小而又专业的最佳安卓开发者建议"></a>【翻译】30多个短小而又专业的最佳安卓开发者建议</h1><p>2017-08-14 by Liuqingwen | Tags: <a href="http://liuqingwen.me/blog/tags/Android/" target="_blank" rel="external">Android</a></p>
<p><img src="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/30tips.jpg" alt=""></p>
<h2 id="一、原文"><a href="#一、原文" class="headerlink" title="一、原文"></a><a href="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/#一、原文" title="一、原文" target="_blank" rel="external"></a>一、原文</h2><p>文章是我在自己的 <a href="https://feedly.com/" target="_blank" rel="external">Feedly</a> 订阅上看到的，两个地方有原文的发布（新版和旧版）：<br><a href="https://blog.aritraroy.in/30-bite-sized-pro-tips-to-become-a-better-android-developer-b311fd641089" target="_blank" rel="external">30+ Bite-Sized Pro Tips to Become a Better Android Developer</a><br><a href="https://techbeacon.com/how-become-better-android-developer-30-bite-sized-pro-tips" target="_blank" rel="external">https://techbeacon.com/how-become-better-android-developer-30-bite-sized-pro-tips</a></p>
<p>小建议大用处！建议有能力的朋友优先阅读原版，翻译有不当之处请海涵哈!</p>
<h2 id="二、译文"><a href="#二、译文" class="headerlink" title="二、译文"></a><a href="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/#二、译文" title="二、译文" target="_blank" rel="external"></a>二、译文</h2><h3 id="标题：-30-多个为成为一名更好的安卓开发者的短小而又专业的建议"><a href="#标题：-30-多个为成为一名更好的安卓开发者的短小而又专业的建议" class="headerlink" title="标题： 30 多个为成为一名更好的安卓开发者的短小而又专业的建议"></a><a href="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/#标题：-30-多个为成为一名更好的安卓开发者的短小而又专业的建议" title="标题： 30 多个为成为一名更好的安卓开发者的短小而又专业的建议" target="_blank" rel="external"></a>标题： 30 多个为成为一名更好的安卓开发者的短小而又专业的建议</h3><p>成为一名安卓开发者很容易，但是<strong>要成为一名成功的、突出的安卓开发者</strong>却不那么容易。这需要付出很多的努力，耐心，奉献和毅力才能做到。</p>
<p>我并没有什么捷径或者简单的方法来告诉你让你成为一名成功的开发者。但是如果你愿意身心投入且付出努力的话，你肯定会得到应得的成功的。</p>
<p>应大家的请求为成为一名更优秀的安卓开发者，这里有<strong>一些从我的经验中吸收的小巧而专业的小窍门</strong>来助你一臂之力。所以，如果你决定从事安卓开发或者已经是一名安卓开发者的话，那么你算是找对地方了。</p>
<p>好了，不需要再浪费口舌了，让我们开始吧。</p>
<p><strong>1. 进一步熟悉安卓内部框架</strong></p>
<p>我并不是告诉你怎样去熟悉文档，我指的是实实在在的安卓框架的源码。我见过很多开发者很害怕查看或者深入安卓框架的内部，探索其实际工作原理和不同的模块之间是如何正确地一起运作。</p>
<p>如果你需要提升你的安卓技能，那么请克服对安卓 SDK 内部工作机制的恐惧感，并开始和它成为好朋友吧。</p>
<p><strong>2. 尝试克服对未知的害怕（ FoMo ）</strong></p>
<p>安卓系统很大，非常大。你不可能在一两个月内完全掌握它。随着学习越深入，你会发现越多的内容需要学习。作为一名初学者，很容易也很正常地会出现这种对未知恐惧的害怕。</p>
<p>但是尝试去克服它把。学习那些你确实需要用到的东西，能够让你开始手头正在构建的应用，然后慢慢地开拓你的视野。</p>
<p><strong>3. 开始阅读更多的代码</strong></p>
<p>大部分的开发者不会抽时间阅读其他开发者所写的代码。他们大部分时间只是花在写他们已经知道了的事情上。</p>
<p>但是那并不利于你成长为一名优秀的开发者。也不会增长你的见识。你应该从现在开始看一些开源的应用和类库并开始学习它们。每天 30 分钟的代码阅读量是个非常好的开始。你将会惊讶的发现：还有如此多的东西是你没见过的。</p>
<p>小贴士：<em>这里有一些最好的开源应用程序助你起航</em></p>
<p><a href="https://blog.aritraroy.in/20-awesome-open-source-android-apps-to-boost-your-development-skills-b62832cf0fa4" target="_blank" rel="external">20多个开源安卓程序大大提升你的开发技巧<br>https://blog.aritraroy.in/20-awesome-open-source-android-apps-to-boost-your-development-skills-b62832cf0fa4</a><a href="https://blog.aritraroy.in/20-awesome-open-source-android-apps-to-boost-your-development-skills-b62832cf0fa4" target="_blank" rel="external"></a></p>
<p><strong>4. 考虑学习更多的语言</strong></p>
<p>我并不是要你去学习西班牙语或者中文，而是学习新的编程语言。随着科技的发展，你需要保持自己的知识更新，而不是把自己固定死在安卓一个方面。</p>
<p>这能够开阔你的视野，并能够显著地提升你的安卓开发技巧。下定决心每年至少学习一门新的编程语言吧。但是，请不要在仅仅一周的尝试后就跳过这门语言而放弃学习。尝试着深入这门语言并弄懂它内部的工作原理。</p>
<p>小贴士：<em>看看<a href="https://medium.freecodecamp.org/what-programming-language-should-i-learn-first-%CA%87d%C4%B1%C9%B9%C9%94s%C9%90%CA%8C%C9%90%C9%BE-%C9%B9%C7%9D%CA%8Dsu%C9%90-19a33b0a467d" target="_blank" rel="external">这篇神奇的文章</a>，来帮助你做一个更好的选择。（剧透 —— 答案是 JavaScript ）</em></p>
<p><strong>5. 是时候学习 Java 设计模式了</strong></p>
<p>在长远看来，我并不能完全阐明这会对你的安卓开发生涯有多大的影响。任何时刻，你被卡在需要解决的某个严重的程序问题的时候，设计模式着实能帮助你构建一个优雅的解决方案。</p>
<p>你也需要保持和其他程序员一致的节奏，因此他们在谈论关于使用<a href="https://www.tutorialspoint.com/design_pattern/factory_pattern.htm" target="_blank" rel="external">工厂模式</a>或者<a href="https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm" target="_blank" rel="external">装饰着模式</a>或者<a href="https://www.tutorialspoint.com/design_pattern/facade_pattern.htm" target="_blank" rel="external">外观模式</a>的时候，你也能够立马懂得他们所指的含义。</p>
<p>给自己定下目标每周学习一个新的设计模式吧。</p>
<p>小贴士：<em>这里有一个<a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="external">极好的资源</a>可以作为你的开始。如果你钟情于书籍，那么你肯定会读一读<a href="http://shop.oreilly.com/product/9780596007126.do" target="_blank" rel="external">这个</a>。</em></p>
<p><img src="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/git.png" alt="git"></p>
<p><strong>6. 开始贡献开源库</strong></p>
<p>如果你已经开发出了一些很有用的东西，并在你自己的应用开发中使用到了，那么考虑开源它吧。在这个过程中有许多的东西是需要你学习的，而且这有助于你成长为一名优秀的开发者。</p>
<p>如果你没有可以开源的项目，考虑浏览其它你所感兴趣的开源项目，并尝试修复一些 bug ，改进其文档注释或者写一些测试等。</p>
<p>即使是最小的贡献量，它仍然对项目维护者保持项目的运作有所帮助。</p>
<p>小贴士：<em><a href="https://opensource.guide/" target="_blank" rel="external">这里</a>有一些良好的指导能够让你开始贡献开源项目。</em></p>
<p><strong>7. 让你的 IDE 更好地为你工作</strong></p>
<p>准备花更多的时间来了解你所使用的 IDE —— Android Studio 。它所能做的事情比你想象的更多。许多的酷炫特性和快捷方式隐藏着而不为人知，以至于大部分开发者都不了解甚至从来没有尝试探索使用它们。</p>
<p>养成一个探索开发新的、更佳的方式的习惯，让你的工具更好地为你工作，这样能够有效提升你的工作流程和工作效率。</p>
<p>小贴士：<em><a href="https://stanfy.com/blog/use-android-studio-like-a-pro/" target="_blank" rel="external">这里</a>有一篇很棒的文章能帮助你像专业人士一样掌握 Android Studio 。</em></p>
<p><strong>8. 是时候正确地架构你的应用了</strong></p>
<p>大部分时间里我们都以放置所有代码到一个活动或者碎片里而结束（你也可以因此怪罪我吧），最终让导致他们成了巨神对象而变得很难维护和测试。</p>
<p>让你的应用适配一个好的架构是非常重要的，像 <a href="https://antonioleiva.com/mvp-android/" target="_blank" rel="external">MVP</a> ， <a href="http://mvvm%20android/" target="_blank" rel="external">MVVM</a> ， <a href="https://medium.com/@trikita/writing-a-todo-app-with-redux-on-android-5de31cfbdb4f" target="_blank" rel="external">Redux</a> 框架等等。考虑解耦你的应用程序的业务逻辑，交互界面，以及数据结构到不同的层级里，使得他们能够更容易的被管理和测试。</p>
<p>小贴士：<em>看看<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">这些</a>有用的谷歌蓝图能够让你的安卓应用框架更加容易。</em></p>
<p><strong>9. 学习安卓致简代码指南</strong></p>
<p>你不能忽视了这个。和那些写不出整洁代码的开发者合作会变得很难，至少需要符合安卓开发代码指南。</p>
<p>这根本不是什么高深的技术，而且也不会花费你超过几个小时的时间来学习大部分的 Java 和安卓代码指南基础。这不应该是一次性的学习，而应该是作为开发者的一种习惯上的改变。</p>
<p>小贴士：_<a href="https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md" target="_blank" rel="external">这里</a>有一篇精彩的资源作为你开始学习标准代码的指南_</p>
<p><strong>10. 花一些时间来学习安卓最佳实践</strong></p>
<p>要使自己比其他开发者更加出众，并能构建出整洁美观而又功能完善的应用，你需要开始学习一些安卓开发最佳实践。</p>
<p>这里有一些该做和不该做的条例，能助你成为一名更优秀的开发者，并能让你的应用从其他应用程序中脱颖而出。</p>
<p>小贴士：<em><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">这里</a>有一个最佳实践文章可以让你做出更好的应用</em></p>
<p><strong>11. 通过接听电台来充分地高效地利用你的业余时间</strong></p>
<p>尝试高效合理地利用你的业余时间。这些时间属于你从家到办公室或者离开，在健身房锻炼，开车，烹饪的时间等等。而这个时候你那聪明的大脑却处于无事可做的状态。</p>
<p>你可以充分利用这些时间来听一些安卓广播资源。经常性地保持你的大脑尽可能高效地使用这些有用的信息，并努力做到大部分空闲时间的最大利用化。</p>
<p>小贴士：<em><a href="http://fragmentedpodcast.com/" target="_blank" rel="external">碎片广播</a>和<a href="http://androidbackstage.blogspot.in/" target="_blank" rel="external">安卓开发者后台</a>是两个让你开始行动的超酷资源广播电台。</em></p>
<p><strong>12. 不要过于工程化，现实点。</strong></p>
<p>这不仅仅发生在我自己身上，同时我也在一些和我工作的其他开发者伙伴身上也看到了。在开始进行之前就考虑周全是很不错（是非很好），但是过于考虑和过于分析事情会导致最终一事无成，就如同不必要的迷茫，延误和焦虑。</p>
<p>立刻开始行动做那些项目中正确的部分，这样你总是能够适应在之后需要做出改变的规则。</p>
<p><strong>推荐阅读</strong></p>
<p><a href="https://blog.aritraroy.in/what-my-2-years-of-android-development-have-taught-me-the-hard-way-52b495ba5c51" target="_blank" rel="external">两年的安卓开发教会我的那些困难和经验<br>https://blog.aritraroy.in/what-my-2-years-of-android-development-have-taught-me-the-hard-way-52b495ba5c51</a><a href="https://blog.aritraroy.in/what-my-2-years-of-android-development-have-taught-me-the-hard-way-52b495ba5c51" target="_blank" rel="external"></a></p>
<p><strong>13. 尝试着学习平面设计</strong></p>
<p>我能理解作为一名程序员，你所主要的重心点在于学习编写更好的代码，这是显而易见的。但是如果你要成为一名完完全全的开发者，你应该开始每天花一些时间来学习并理解关于 UI 和 UX 的设计。</p>
<p>这将会颠覆你对待你自己一直正在使用代码编写应用的看法。尝试着和你团队中的 UI 以及 UX 设计师做更多的沟通和交流的机会，你将会更加深入地了解应用设计。</p>
<p>小贴士：<em>读一读<a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654" target="_blank" rel="external">这本书</a>如果你对理解设计如何工作的原理感兴趣的话</em></p>
<p><strong>14. 开始成为一名完美主义者</strong></p>
<p>这是一个类似：我所谓的“完美主义”并非其他人的“完美主义”的话题。但是作为一个小的建议，始终尝试着帮你所需要发布的版本的产品做到尽可能最好。</p>
<p>不要妥协。不要为了单纯的做事而做事。要对你自己的工作有激情并尝试做得比他人更好。这会让你持续成长并在长远看来会让你成为一名更加成功的开发者。</p>
<p><strong>15. 坚持是成功的关键</strong></p>
<p>如果你想成为一名成功的安卓开发者（或者你生命中其他想要的），那么你需要坚持。</p>
<p>做事情坚持不了几天或者几周就放弃那并不会让你学到什么东西。尝试着描绘一下作为一名安卓开发者在未来几年里你所想要成为的人的模样，坚持并不断挑战自我，最终实现自己的目标。</p>
<p>开始一件事很容易，但是保持同样的激情和奉献精神，长时间坚持下去却很难（非常的难）。</p>
<p><strong>16. 积少成多，逐步深入</strong></p>
<p>作为一名开发者，你应该时常试着把你所遇到的任何复杂的问题或者特性，转化成小型的、简单的和独立的组件，这样做能够很容易地被理解并能快速地解决问题。</p>
<p>不要被一个项目的大小和复杂度所压倒。只要你使用正确的方式，任何问题都能够迎刃而解。从小的部分开始，慢慢积累并逐步扩张。</p>
<p><strong>17. 保持手里有项目的另一个测试版本</strong></p>
<p>经常有一个后台的测试版本项目能够完全改变你学习东西的方式。如果你在安卓开发界遇到什么新的事物，请养成一个立刻就开始新建一个后台测试项目的习惯。</p>
<p>假设你在某个地方发现了一个很有趣的安卓代码库，你应该立刻想到新建一个后台测试项目来使用这个库，而不是仅仅快速地浏览一下它的文档和 API 。这会让你更加熟悉、更加深入地了解这个类库。</p>
<p><strong>18. 开始写一些测试</strong></p>
<p>我没法再强调这个有多重要了。你并不能完全吃透某个特性，除非你用尽心思给它写测试。测试能帮助你的代码构建出一个信心彼岸。</p>
<p>不要犯那种忽略测试或者认为测试只是一个“可选项”的错误了，这会让你的生活更加痛苦并增加许多的问题。记住，一个没有测试的代码很容易立刻变成旧地遗留代码。</p>
<p><strong>推荐阅读</strong></p>
<p><a href="https://blog.aritraroy.in/50-ultimate-resources-to-master-android-development-15165d6bc376" target="_blank" rel="external">50 多个有用的关于掌握安卓开发的资源<br>https://blog.aritraroy.in/50-ultimate-resources-to-master-android-development-15165d6bc376</a><a href="https://blog.aritraroy.in/50-ultimate-resources-to-master-android-development-15165d6bc376" target="_blank" rel="external"></a></p>
<p><strong>19. 考虑适配 TDD</strong></p>
<p>当你在开发一个应用的时候，考虑选择一种机械地而又高效的方式，以便能够顺利地通过测试。</p>
<p>开始遵守 TDD 的“红-绿-重构”周期模式。首先，你所编写的测试可能会失败（红），然后写一些有效的代码让这个测试通过（绿），接着进一步优化并清理整洁这些代码（重构）。</p>
<blockquote>
<p>测试驱动型开发是一种编程期间控制自我焦虑的方式。焦虑感会让你变得很具有试探性。焦虑感让你变得不容易沟通。焦虑感会让你害怕发出反馈。焦虑感让你变得心浮气躁。—— 来自 TDD 的案例</p>
</blockquote>
<p><strong>20. 设立一个合适的自动发布机制</strong></p>
<p>作为一名开发者，尝试着让自己不要操心那些可以自动完成的东西，比如应用程序质量的测试和发布。</p>
<p>你应该使用那些自动检测程序质量的工具，像 <a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea" target="_blank" rel="external">CheckStyle</a> ， <a href="https://github.com/pmd/pmd" target="_blank" rel="external">PMD</a> ， <a href="https://developer.android.com/studio/write/lint.html" target="_blank" rel="external">Lint</a> ， <a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea" target="_blank" rel="external">FindBugs</a> 。在合并主要的改变之前运行所有的单元测试和真机测试是必须要做到的。</p>
<p>当所有这些测试通过后，你就会得到一个允许 APK 发布到 Play 商店或者分发到其他你想要的地方的（比如 <a href="http://try.crashlytics.com/beta/" target="_blank" rel="external">Crashlytics Beta</a> ）的绿色信号。</p>
<p>小贴士：<em>考虑 Play 商店自动发布机制以及使用<a href="https://github.com/Triple-T/gradle-play-publisher" target="_blank" rel="external">这些</a>工具。</em></p>
<p><strong>21. 拥抱 Reactive 编程的到来</strong></p>
<p>如果你作为安卓开发者想要提升自己的技能，你绝对应该考虑拥抱 reactive 的实现。这会迫使你在构建应用的时候采用完全不同的方式思考问题。</p>
<p>采取 reactive 的方式肯定能够有助于你更加快速地写出交互式应用，并且能够让你的开发更加容易且有趣。</p>
<p>小贴士：<em><a href="http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/" target="_blank" rel="external">这里</a>是一个非常好的学习 RxJava 在安卓应用开发的精彩系列。</em></p>
<p><img src="http://liuqingwen.me/blog/2017/08/14/translation-of-30-bite-sized-pro-tips-to-become-a-better-android-developer/kotlin.png" alt="kotlin.png"></p>
<p><strong>22. 学会使用 Kotlin 进行安卓开发</strong></p>
<p>Kotlin 是目前最受欢迎和热议的语言，自从它来到安卓开发界后。它现在也是开发安卓应用的<a href="https://blog.jetbrains.com/kotlin/2017/05/kotlin-on-android-now-official/" target="_blank" rel="external">官方支持的语言</a>。这个简洁高效的语言给安卓开发界带来了一丝新鲜的空气。</p>
<p>对于那些被古老、繁琐以及易出错的 Java 所困扰的人们来说，这是发生在安卓开发者身上最大的一件幸事之一。尝试着使用它，你将会重新燃起对你的开发生活的热爱。</p>
<p>小贴士：<em>了解更多关于更好的安卓应用开发你需要开始学习并使用 Kotlin 的原因 。</em></p>
<p><a href="https://blog.aritraroy.in/why-you-should-start-using-kotlin-to-supercharge-your-android-development-in-2017-61db1f11d666" target="_blank" rel="external">2017 年为什么你要开始使用 Kotlin 来掌控你的安卓开发<br>https://blog.aritraroy.in/why-you-should-start-using-kotlin-to-supercharge-your-android-development-in-2017-61db1f11d666</a><a href="https://blog.aritraroy.in/why-you-should-start-using-kotlin-to-supercharge-your-android-development-in-2017-61db1f11d666" target="_blank" rel="external"></a></p>
<p><strong>23. 参加聚会并和更多的开发者建立社交关系</strong></p>
<p>我们开发者趋向于内向，喜欢坐在一个角落里，和自己的电脑组成一个自我的世界。</p>
<p>但是请走出你自己的舒适区，和其他开发者发生更多的联系和沟通吧。当你参加开发者会议，社交活动以及和其他有着和你共同兴趣爱好的开发者一起谈论问题的时候，你会学习到很多很多的东西。</p>
<p>小贴士：<em><a href="https://www.meetup.com/" target="_blank" rel="external">这里</a>是一个发现你所感兴趣会谈沙龙的好地方。</em></p>
<p><strong>24. 熟悉使用键盘快捷键</strong></p>
<p>试着养成一个尽可能不使用你的鼠标的习惯。在 Android Studio 上几乎所有的操作都可以由快捷方式完成。</p>
<p>这会显著地减少你的开发时间并提升你的工作流程。记住一些键盘快捷键可能会在初始阶段花上一些时间，但是从长远时间来看，它会有助于你进入一个真正无鼠标的工作流程状态。</p>
<p>小贴士：<em>如果你用古老的方式不能记住快捷键，<a href="https://plugins.jetbrains.com/plugin/1003-key-promoter" target="_blank" rel="external">这里</a>有一个超棒的 AS 插件来帮你搞定。</em></p>
<p><strong>25. 尝试着至少每周学会一个安卓相关的知识</strong></p>
<p>在安卓大千世界里，当你在一开始踏入的时候，有太多需要学习和了解的东西会让你感觉猝不及防。但是如果你给自己下定决心，每周学习一个安卓相关的知识点，那么事情会变得更加容易。</p>
<p>做一个列表记下所有你不会的东西，给他们标上先后顺序和重要性，在接下来每周里开始学习，并一步一步地完成它们。那么在几个月后，你会发现你已经远远不是那个刚开始的自己了。</p>
<p><strong>26. 把所有浪费你时间的事情自动化</strong></p>
<p>我们作为工程师，生来就喜欢偷懒，总是想着找到一种简便的方式来完成一份烦人的工作。</p>
<p>所以，如果你在一天里需要做一些重复且厌烦的事情的时候，尝试着考虑把它自动化吧。这会累计让你每周都节约不少时间，从而可以用来花在做其他高效率以及有用的事情上，并能够减少你的焦虑感。</p>
<p>小贴士：<em>看一下<a href="https://zapier.com/" target="_blank" rel="external">这个</a>神奇的工具，它能帮你连接并自动化你每天所使用的工具之间的沟通。</em></p>
<p><strong>27. 考虑同时运行两个不同版本的 Android Studio</strong></p>
<p>保持使用一个稳定版本的 Android Studio 用来做你每天需要做的那些很重要的事情。但是也同时考虑保持安装使用一个最新候选版本的 Android Studio 。</p>
<p>有时候早期版本中会有很多令人兴奋的新特性，那都是你很乐意去尽可能尝试使用的。</p>
<p><strong>推荐阅读</strong></p>
<p><a href="https://blog.aritraroy.in/30-kickass-tools-to-develop-android-apps-like-a-pro-191e52b9419b" target="_blank" rel="external">30 多个像专业人士一样开发安卓应用的强大工具<br>https://blog.aritraroy.in/30-kickass-tools-to-develop-android-apps-like-a-pro-191e52b9419b</a><a href="https://blog.aritraroy.in/30-kickass-tools-to-develop-android-apps-like-a-pro-191e52b9419b" target="_blank" rel="external"></a></p>
<p><strong>28. 仔细审查所有你一次性添加的第三方类库</strong></p>
<p>在我们需要的时候我们都喜欢使用添加类库，这当然没问题。但是，要养成一个习惯，审查你所一次性添加的所有的第三方类库，并且移除那些你不再需要的库。</p>
<p>如果你仅仅是使用一个类库的一小部分，那么考虑把它分解出来而不是使用整个库。有那么一个可能性的事件是：审查有时候也会帮你更新那些急需更新的旧类库。</p>
<p><strong>29. 学习更好的方法用来重构遗留代码库</strong></p>
<p>不要犯那种一次性重构一个完整的庞大代码库的错误。这样做会把你陷入到没有退路的困境之中。</p>
<p>考虑重构你现在就需要使用的部分代码库，然后慢慢地延伸扩展到你所需要的其他部分。同样，考虑在碰到其他代码之前为你所需要重构而又怀疑会破坏现有功能的那部分写一些测试。</p>
<p>小贴士：<em><a href="http://www.amazon.in/Working-Effectively-Legacy-Robert-Martin/dp/0131177052" target="_blank" rel="external">这本书</a>完全改变了我使用旧代码的方式。你完全值得看一看。</em></p>
<p><strong>30. 经常在低端设备上进行开发和测试</strong></p>
<p>如果你想要像专业人士一样开发应用程序，那么不要犯那种总是在高端设备上开发并测试程序的错误。一般来说，我们开发者手头拥有高端的旗舰产品，并且使用它来做应用的开发和测试用。但是这完全正是你需要克制的地方。</p>
<p>尝试着在市场上买点便宜的、低端的设备，并养成在上面开发应用程序的习惯。你将会看到你的应用的一大堆缺陷，而你之前并不知道它们的存在。</p>
<p><strong>31. 买你所能负担起的最好的设备</strong></p>
<p>不要犯那种购买一个低端的工作用机器来做每天工作的错误，那会有损你的开发经验。</p>
<p>考虑使用一个 Mac （超越 Windows ）来做开发。你会爱上它那简介而又稳定的特性的。</p>
<p>从现在开始，如果你要买一台苹果笔记本，那么考虑买一个最合适你自己的版本。几百块（美元，编者按 <img src="http://liuqingwen.me/blog/images/emoji/joy.png &quot;" alt="joy"> ）的额外开销并不会伤害你，反而你会感谢自己做下了这个决定的。</p>
<hr>
<p>希望这些<strong>小贴士能够帮助你成为一名更好的安卓开发者。</strong>你虽然已经看完并理解了这些条条例例，但是也正是时候把它们转化成实际行动了，只有这样你才能感受到他们的强大之处。</p>
<p>如果你发现这是一篇有用的文章，请考虑推荐它给你的朋友们、室友同学们、竞争对手或者你通过社交媒体认识的任何人。</p>
<p><em>这篇文章最初发布于： <a href="http://techbeacon.com/" target="_blank" rel="external">TechBeacon</a></em></p>
<hr>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Glide缓存知识梳理]]></title>
      <url>/2017/08/23/Glide%E7%BC%93%E5%AD%98%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="style-candy"><a href="#style-candy" class="headerlink" title="style: candy"></a>style: candy</h2><h1 id="Glide缓存知识梳理"><a href="#Glide缓存知识梳理" class="headerlink" title="Glide缓存知识梳理"></a>Glide缓存知识梳理</h1><h3 id="Glide磁盘缓存策略分为四种，默认的是RESULT"><a href="#Glide磁盘缓存策略分为四种，默认的是RESULT" class="headerlink" title="Glide磁盘缓存策略分为四种，默认的是RESULT"></a>Glide磁盘缓存策略分为四种，默认的是RESULT</h3><ul>
<li><p>1.ALL:缓存原图(SOURCE)和处理图(RESULT)</p>
</li>
<li><p>2.NONE:什么都不缓存</p>
</li>
<li><p>3.SOURCE:只缓存原图(SOURCE)</p>
</li>
<li><p>*4.RESULT:只缓存处理图(RESULT) —默认值</p>
</li>
</ul>
<p>tips:这里原图的意思是假设你的ImageView长100，宽100。图片长300，宽200。那么Glide只缓存300<em>200的图片。处理图的意思是Glide只缓存100</em>100的图片。</p>
<h5 id="组合策略"><a href="#组合策略" class="headerlink" title="组合策略"></a>组合策略</h5><p>1.内存不缓存,磁盘缓存缓存所有图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(mUrl).skipMemoryCache(true).diskCacheStrategy(DiskCacheStrategy.ALL).into(mIv);</div></pre></td></tr></table></figure></p>
<p>2.内存缓存处理图,磁盘缓存原图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(mUrl).skipMemoryCache(false).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(mIv);</div></pre></td></tr></table></figure>
<h3 id="Glide默认缓存路径"><a href="#Glide默认缓存路径" class="headerlink" title="Glide默认缓存路径"></a>Glide默认缓存路径</h3><pre><code>默认缓存路径为DiskCache中定义的DEFAULT_DISK_CACHE_DIR，这个值为image_manager_disk_cache。如果不自定义缓存路径，那么默认的缓存完整路径为/data/user/0/包名/cache/image_manager_disk_cache这个目录。
</code></pre><h3 id="Glide默认缓存大小"><a href="#Glide默认缓存大小" class="headerlink" title="Glide默认缓存大小"></a>Glide默认缓存大小</h3><pre><code>默认缓存大小为DiskCache中定义的DEFAULT_DISK_CACHE_SIZE，这个值为250 * 1024 * 1024，即250MB。
</code></pre><h3 id="自定义缓存路径和缓存大小"><a href="#自定义缓存路径和缓存大小" class="headerlink" title="自定义缓存路径和缓存大小"></a>自定义缓存路径和缓存大小</h3><ol>
<li>自定义一个实现了<code>GlideModule</code>接口的类，重写<code>applyOptions</code>方法。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MyGlideModule implements GlideModule &#123;</div><div class="line"></div><div class="line">  // 图片缓存最大容量，150M，根据自己的需求进行修改</div><div class="line">  public static final int GLIDE_CATCH_SIZE = 100 * 1000 * 1000;    </div><div class="line">  //图片缓存子目录</div><div class="line">  public static final String GLIDE_CARCH_DIR = &quot;my_cache_dir&quot;;    @Override</div><div class="line">  public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">     //自定义缓存目录和大小</div><div class="line">	 builder.setDiskCache(new InternalCacheDiskCacheFactory(context,GLIDE_CARCH_DIR,GLIDE_CATCH_SIZE));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void registerComponents(Context context, Glide glide) &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.在<code>AndroidManifest.xml</code>中的<code>&lt;application&gt;</code>标签下定义<code>&lt;meta-data&gt;</code>，这样<code>Glide</code>才能知道我们定义了这么一个类，其中<code>android:name</code>是我们自定义的<code>GlideModule</code>的完整路径，而<code>android:value</code>是固定值<code>GlideModule</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">  android:name=&quot;com.demo.glide.MyGlideModule&quot;</div><div class="line">  android:value=&quot;GlideModule&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="Glide清除缓存"><a href="#Glide清除缓存" class="headerlink" title="Glide清除缓存"></a>Glide清除缓存</h3><ol>
<li>Glide提供两个方法清除缓存，其中<code>Glide.get(context).clearMemory();</code>这个方法会清除所有的内存缓存。需要在UI线程操作。<code>Glide.get(context).clearDiskCache();</code>这个方法会清除所有的磁盘缓存，需要在子线程操作。</li>
<li>工具类安利<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">public class GlideCacheUtil &#123;</div><div class="line">    private static GlideCacheUtil instance;</div><div class="line"></div><div class="line">    public static GlideCacheUtil getInstance() &#123;</div><div class="line">        if (null == instance) &#123;</div><div class="line">            instance = new GlideCacheUtil();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">    // 获取Glide磁盘缓存大小</div><div class="line">    public String getCacheSize(Context context) &#123;</div><div class="line">        return getCacheSize(context,null);</div><div class="line">    &#125;</div><div class="line">    // 获取Glide磁盘缓存大小</div><div class="line">    public String getCacheSize(Context context,String fileName) &#123;</div><div class="line">        try &#123;</div><div class="line">            File cacheFile = null;</div><div class="line">            if (fileName==null)&#123;</div><div class="line">                cacheFile = new File(context.getCacheDir() + &quot;/&quot; + InternalCacheDiskCacheFactory.DEFAULT_DISK_CACHE_DIR);</div><div class="line">            &#125;else&#123;</div><div class="line">                cacheFile = new File(context.getCacheDir() + &quot;/&quot; + fileName);</div><div class="line">            &#125;</div><div class="line">            return getFormatSize(getFolderSize(cacheFile));</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 清除图片磁盘缓存，调用Glide自带方法</div><div class="line">    public boolean clearCacheDiskSelf(final Context context) &#123;</div><div class="line">        try &#123;</div><div class="line">            if (Looper.myLooper() == Looper.getMainLooper()) &#123;</div><div class="line">                new Thread(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        Glide.get(context).clearDiskCache();</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125; else &#123;</div><div class="line">                Glide.get(context).clearDiskCache();</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 清除Glide内存缓存</div><div class="line">    public boolean clearCacheMemory(Contenxt context) &#123;</div><div class="line">        try &#123;</div><div class="line">            if (Looper.myLooper() == Looper.getMainLooper()) &#123; //只能在主线程执行</div><div class="line">                Glide.get(context).clearMemory();</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    // 获取指定文件夹内所有文件大小的和</div><div class="line">    private long getFolderSize(File file) throws Exception &#123;</div><div class="line">        long size = 0;</div><div class="line">        try &#123;</div><div class="line">            File[] fileList = file.listFiles();</div><div class="line">            for (File aFileList : fileList) &#123;</div><div class="line">                if (aFileList.isDirectory()) &#123;</div><div class="line">                    size = size + getFolderSize(aFileList);</div><div class="line">                &#125; else &#123;</div><div class="line">                    size = size + aFileList.length();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 格式化单位</div><div class="line">    private static String getFormatSize(double size) &#123;</div><div class="line">        double kiloByte = size / 1024;</div><div class="line">        if (kiloByte &lt; 1) &#123;</div><div class="line">            return size + &quot;Byte&quot;;</div><div class="line">        &#125;</div><div class="line">        double megaByte = kiloByte / 1024;</div><div class="line">        if (megaByte &lt; 1) &#123;</div><div class="line">            BigDecimal result1 = new BigDecimal(Double.toString(kiloByte));</div><div class="line">            return result1.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + &quot;KB&quot;;</div><div class="line">        &#125;</div><div class="line">        double gigaByte = megaByte / 1024;</div><div class="line">        if (gigaByte &lt; 1) &#123;</div><div class="line">            BigDecimal result2 = new BigDecimal(Double.toString(megaByte));</div><div class="line">            return result2.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + &quot;MB&quot;;</div><div class="line">        &#125;</div><div class="line">        double teraBytes = gigaByte / 1024;</div><div class="line">        if (teraBytes &lt; 1) &#123;</div><div class="line">            BigDecimal result3 = new BigDecimal(Double.toString(gigaByte));</div><div class="line">            return result3.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + &quot;GB&quot;;</div><div class="line">        &#125;</div><div class="line">        BigDecimal result4 = new BigDecimal(teraBytes);</div><div class="line">        return result4.setScale(2, BigDecimal.ROUND_HALF_UP).toPlainString() + &quot;TB&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 按目录删除文件夹文件方法</div><div class="line">    private boolean deleteFolderFile(String filePath, boolean deleteThisPath) &#123;</div><div class="line">        try &#123;</div><div class="line">            File file = new File(filePath);</div><div class="line">            if (file.isDirectory()) &#123;</div><div class="line">                File files[] = file.listFiles();</div><div class="line">                for (File file1 : files) &#123;</div><div class="line">                    deleteFolderFile(file1.getAbsolutePath(), true);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (deleteThisPath) &#123;</div><div class="line">                if (!file.isDirectory()) &#123;</div><div class="line">                    file.delete();</div><div class="line">                &#125; else &#123;</div><div class="line">                    if (file.listFiles().length == 0) &#123;</div><div class="line">                        file.delete();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Glide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Glide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Handler源码浅析]]></title>
      <url>/2017/06/28/Android-Handler%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="Android-Handler源码浅析"><a href="#Android-Handler源码浅析" class="headerlink" title="Android Handler源码浅析"></a>Android Handler源码浅析</h3><blockquote>
<p>相关对象</p>
</blockquote>
<ol>
<li>Handler可以看作CEO，负责消息的处理和发送，Handler发送消息给MessageQueue,，然后Looper取出其中的消息给Handler。</li>
<li>Looper,Handler的管家，可以看作秘书，负责管理MessageQueue,她会不断的从MessageQueue中取出消息，交给Handler处理。</li>
<li>MessageQueue是存放消息的队列，负责存放Handler发来的消息。</li>
</ol>
<blockquote>
<p>Looper部分源码讲解</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static void prepare() &#123;</div><div class="line">        prepare(true);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static void prepare(boolean quitAllowed) &#123;</div><div class="line">    if (sThreadLocal.get() != null) &#123;</div><div class="line">        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(new Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>
<p>Looper实例化是在Looper.prepare()方法中。</p>
<blockquote>
<p>小插曲</p>
</blockquote>
<p>ThreadLocal是一个和多线程并发相关的类。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>ThreadLocal维护了一个Map集合，其中键为当前线程，值就是不同线程的变量。</p>
<p>ThreadLocal中的方法不多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public T get() &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null) &#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);</div><div class="line">        if (e != null)</div><div class="line">            return (T)e.value;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>set方法很容易理解，首先获取当前线程，再用当前线程当键来获取map集合，如果map为空，则重新创建一个map并设置值进去，否则的话，直接设置值进去。get同理。</p>
<p>回到主题。所以Looper的prepare只能获取当前线程的Looper对象，并且如果已经存在一个Looper对象则会报异常，所以这也说明了一个线程中只能存在一个Lopper对象。并且prepare只能调用一次。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private Looper(boolean quitAllowed) &#123;</div><div class="line">    mQueue = new MessageQueue(quitAllowed);</div><div class="line">    mThread = Thread.currentThread();</div><div class="line">&#125;</div><div class="line">public static void loop() &#123;</div><div class="line">    final Looper me = myLooper();</div><div class="line">    //此处只展示了关键代码</div><div class="line">    final MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">    for (;;) &#123;</div><div class="line">        Message msg = queue.next(); // might block</div><div class="line">        if (msg == null) &#123;</div><div class="line">            // No message indicates that the message queue is quitting.</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (traceTag != 0) &#123;</div><div class="line">                Trace.traceEnd(traceTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        msg.recycleUnchecked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Looper中创建了一个MessageQueue，并且在Looper的loop方法中，开启无限循环去遍历MessageQueue，如果消息不为空，则将消息发送给Handler。这个msg.target其实就是Handler对象。</p>
<p>我们一般都会重写Handler的handleMessage方法，其中缘由也在源码里。<br>我们不管sendEmptyMessage也好，postDelayed也罢，最终都会调用到一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) &#123;</div><div class="line">    msg.target = this;</div><div class="line">    if (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(true);</div><div class="line">    &#125;</div><div class="line">    return queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>msg.target = this。这句话中的this就是Handler对象。<br>同时把消息放入MessageQueue中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void dispatchMessage(Message msg) &#123;</div><div class="line">    if (msg.callback != null) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mCallback != null) &#123;</div><div class="line">            if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Looper的loop方法中，她把消息用dispatchMessage传了过来。在dispatchMessage中。优先级有三种。优先级最高的是message自己的callback，然后是Handler的callback，当两者都没有的时候，就由我们重写来处理。这也是我们最常用的一种方法。</p>
<blockquote>
<p>那么Looper是什么时候启动的呢?</p>
</blockquote>
<p>答案在ActivityThread中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    //部分代码</div><div class="line">    Looper.prepareMainLooper();</div><div class="line"></div><div class="line">    ActivityThread thread = new ActivityThread();</div><div class="line">    thread.attach(false);</div><div class="line"></div><div class="line">    if (sMainThreadHandler == null) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (false) &#123;</div><div class="line">        Looper.myLooper().setMessageLogging(new</div><div class="line">                LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // End of event ActivityThreadMain.</div><div class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">    Looper.loop();</div><div class="line"></div><div class="line">    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中Looper.prepareMainLooper()和Looper.prepare()等价。这个ActivityThread也就是我们所说的UI线程，Looper在UI线程启动的时候，就一直在后台默默工作了。</p>
<blockquote>
<p>思考，Handler怎么做到线程切换处理对象的。</p>
</blockquote>
<p>因为不同线程共享内存，Handler在A线程发送了一个消息，然后主线程的Looper在主线程把消息取了出来，同时交给了Handler，所以Handler一取一存就做到了线程切换。</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>其实看源码本没有那么复杂，有时候根本不需要抽丝剥茧一条条代码看，代码量很多，难度确实是有的。但是我们只要有一个目标，有一条主线，只寻找最关键的代码，就能很快的理清它的脉络。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 日常bug集锦]]></title>
      <url>/2017/05/19/Android-%E6%97%A5%E5%B8%B8bug%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<ol>
<li>今天开发的时候遇到了一个bug，一直报xml inflate异常，我检查了好多遍就是没问题，后来才发现是资源文件格式的问题，好神奇的bug。就是图片格式后面带V21的，查阅资料才知道，v21只能在api21以上使用，否则会报xml布局错误，我的解决方法是把图片再copy 覆盖一下，就会自动生成不是v21的图片，bug完美解决。</li>
<li>ScrollView中放ViewPager时,有时候不显示，原因是这个时候的测量模式是UNSPECIFIED<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;  </div><div class="line">// For simple implementation, our internal size is always 0.  </div><div class="line">// We depend on the container to specify the layout size of  </div><div class="line">// our view.  We can&apos;t really know what it is since we will be  </div><div class="line">// adding and removing different arbitrary views and do not  </div><div class="line">// want the layout to change as this happens.  </div><div class="line">setMeasuredDimension(getDefaultSize(0, widthMeasureSpec),  </div><div class="line">getDefaultSize(0, heightMeasureSpec));  </div><div class="line">&#125;  </div><div class="line">public static int getDefaultSize(int size, int measureSpec) &#123;  </div><div class="line">int result = size;  </div><div class="line">int specMode = MeasureSpec.getMode(measureSpec);  </div><div class="line">int specSize = MeasureSpec.getSize(measureSpec);  </div><div class="line"></div><div class="line">switch (specMode) &#123;  </div><div class="line">case MeasureSpec.UNSPECIFIED:  </div><div class="line">result = size;  </div><div class="line">break;  </div><div class="line">case MeasureSpec.AT_MOST:  </div><div class="line">case MeasureSpec.EXACTLY:  </div><div class="line">result = specSize;  </div><div class="line">break;  </div><div class="line">&#125;  </div><div class="line">return result;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>而UNSPECIFIED这个时候返回的大小是0，所以不显示<br>3.有时候程序出现”cannot be resolved or is not a field”这个错误，有可能是复制项目的时候，把R文件复制过来了，删除错误的R文件，重新Build,搞定！<br>4.ToolBar的setTitle无效，把它放在setSupportActionBar之前就ok,但是setNavigationOnClickListener要放在setSupportActionBar之年才会调用。<br>5.java.lang.NoClassDefFoundError: Failed resolution of: Landroid/support/v4/animation/AnimatorCompatHelper;<br>design 的包版本不一致</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin资源合集(转)]]></title>
      <url>/2017/05/19/Kotlin%E8%B5%84%E6%BA%90%E5%90%88%E9%9B%86-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h4 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h4><ol>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=e6d199cf7d&amp;e=983f3566e1" target="_blank" rel="external">Kotlin Primer</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=0481cba3f1&amp;e=983f3566e1" target="_blank" rel="external">Kotlin在Android中的应用</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage1.com/track/click?u=3f24a71686f577759d1824501&amp;id=198c512bb7&amp;e=983f3566e1" target="_blank" rel="external">Kotlin实践</a></p>
</li>
</ol>
<h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ol>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=b8f8b15288&amp;e=983f3566e1" target="_blank" rel="external">官方文档</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=90fe84cfe7&amp;e=983f3566e1" target="_blank" rel="external">kotlin-reference-chinese</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=8eda093fa9&amp;e=983f3566e1" target="_blank" rel="external">kotlin-in-chinese</a></p>
</li>
</ol>
<h4 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h4><ol>
<li><p><a href="http://androidweekly.us9.list-manage2.com/track/click?u=3f24a71686f577759d1824501&amp;id=62eb03dcdc&amp;e=983f3566e1" target="_blank" rel="external">kotlin-koans</a><br>Kotlin Koans are a series of exercises to get you familiar with the Kotlin Syntax.</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage2.com/track/click?u=3f24a71686f577759d1824501&amp;id=a37dbfffbe&amp;e=983f3566e1" target="_blank" rel="external">kotlin-native</a><br>Kotlin/Native is a LLVM backend for the Kotlin compiler, runtime implementation and native code generation facility using LLVM toolchain.</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=5570f45de2&amp;e=983f3566e1" target="_blank" rel="external">ktor</a><br>Web backend framework for Kotlin</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=50effb2d9e&amp;e=983f3566e1" target="_blank" rel="external">kotlinpoet</a><br>A Kotlin API for generating .kt source files.</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage2.com/track/click?u=3f24a71686f577759d1824501&amp;id=c9ad0f87c1&amp;e=983f3566e1" target="_blank" rel="external">Lattekit</a><br>一个灵感来自 React.js， 可以让你在 Kotlin 项目种快速创建 UI 的框架</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=2939e0463b&amp;e=983f3566e1" target="_blank" rel="external">mockito-kotlin</a><br>Using Mockito with Kotlin</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=763edd8648&amp;e=983f3566e1" target="_blank" rel="external">Frodo</a><br>Android Library for Logging RxJava Observables and Subscribers.</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=cf5813b964&amp;e=983f3566e1" target="_blank" rel="external">sentry-beaconfire</a><br>Kotlin based sentry android application</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage2.com/track/click?u=3f24a71686f577759d1824501&amp;id=d630e82735&amp;e=983f3566e1" target="_blank" rel="external">anko</a><br>Anko is a Kotlin library which makes Android application development faster and easier.</p>
</li>
</ol>
<h4 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h4><ol>
<li><p><a href="http://androidweekly.us9.list-manage1.com/track/click?u=3f24a71686f577759d1824501&amp;id=a0a0bdd31a&amp;e=983f3566e1" target="_blank" rel="external">Kotlin从入门到『放弃』系列 视频教程</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=d4db40774a&amp;e=983f3566e1" target="_blank" rel="external">Android Development with Kotlin</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=cc211d5380&amp;e=983f3566e1" target="_blank" rel="external">Functional Programming with Kotlin</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=b53c3e3753&amp;e=983f3566e1" target="_blank" rel="external">Advancing Android Development with the Kotlin Language</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=41a74be847&amp;e=983f3566e1" target="_blank" rel="external">Flexible Types in Kotlin</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage1.com/track/click?u=3f24a71686f577759d1824501&amp;id=9c43128dd1&amp;e=983f3566e1" target="_blank" rel="external">Kotlin on Android</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage1.com/track/click?u=3f24a71686f577759d1824501&amp;id=d960d528ae&amp;e=983f3566e1" target="_blank" rel="external">I built an app in Kotlin, and my client still paid me</a></p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage2.com/track/click?u=3f24a71686f577759d1824501&amp;id=7208d7e398&amp;e=983f3566e1" target="_blank" rel="external">Kotlin: the swift of Android</a>(需要梯子)</p>
</li>
<li><p><a href="http://androidweekly.us9.list-manage.com/track/click?u=3f24a71686f577759d1824501&amp;id=dc35f67a45&amp;e=983f3566e1" target="_blank" rel="external">Type-Safe Web with Kotlin</a>(需要梯子)</p>
</li>
</ol>
<h4 id="资源合集"><a href="#资源合集" class="headerlink" title="资源合集"></a>资源合集</h4><ol>
<li><a href="http://androidweekly.us9.list-manage1.com/track/click?u=3f24a71686f577759d1824501&amp;id=d9ed44853b&amp;e=983f3566e1" target="_blank" rel="external">awesome-kotlin</a></li>
</ol>
<p>###本文转载自<a href="http://us9.campaign-archive2.com/?e=983f3566e1&amp;u=3f24a71686f577759d1824501&amp;id=c131fc5a5d" target="_blank" rel="external">Android开发技术周报特刊之Kotlin Issue#0</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 配置Kotlin详解]]></title>
      <url>/2017/05/19/Android-Studio-%E9%85%8D%E7%BD%AEKotlin%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>安装这个kotlin插件<br><img src="http://upload-images.jianshu.io/upload_images/2839845-9771b5cd4ac62a04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<blockquote>
<ol>
<li>project的build.gradle配置</li>
</ol>
</blockquote>
<ol>
<li><p>buildscript新增<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. dependencies新增```classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div></pre></td></tr></table></figure></p>
</li>
<li><p>allprojects新增<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 2. module的build.gradle配置</div><div class="line"></div><div class="line">1. 新增插件支持</div></pre></td></tr></table></figure></p>
</li>
</ol>
<p>apply plugin: ‘kotlin-android’<br>apply plugin: ‘kotlin-android-extensions’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. android新增</div></pre></td></tr></table></figure></p>
<p> sourceSets {<br>        main.java.srcDirs += ‘src/main/kotlin’<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. dependencies新增</div></pre></td></tr></table></figure></p>
<p>compile “org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 总配置</div></pre></td></tr></table></figure></p>
<p>// Top-level build file where you can add configuration options common to all sub-projects/modules.</p>
<p>buildscript {<br>    ext.kotlin_version = ‘1.1.2-4’<br>    repositories {<br>        jcenter()<br>    }<br>    dependencies {<br>        classpath ‘com.android.tools.build:gradle:2.3.1’<br>        classpath “org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version”<br>        // NOTE: Do not place your application dependencies here; they belong<br>        // in the individual module build.gradle files<br>    }<br>}</p>
<p>allprojects {<br>    repositories {<br>        jcenter()<br>        mavenCentral()<br>    }<br>}</p>
<p>task clean(type: Delete) {<br>    delete rootProject.buildDir<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line">apply plugin: &apos;kotlin-android&apos;</div><div class="line">apply plugin: &apos;kotlin-android-extensions&apos;</div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 25</div><div class="line">    buildToolsVersion &quot;25.0.2&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.happy.kotlindemo&quot;</div><div class="line">        minSdkVersion 15</div><div class="line">        targetSdkVersion 25</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sourceSets &#123;</div><div class="line">        main.java.srcDirs += &apos;src/main/kotlin&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">    &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:25.3.1&apos;</div><div class="line">    compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所有都配置好了之后，选择一个Activity文件，选择code-&gt;convet java file…</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2839845-5306da57a72951f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>大功告成</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2839845-c311aa4e14725b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android KeyCode列表]]></title>
      <url>/2017/05/13/Android-KeyCode%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="KEYCODE列表"><a href="#KEYCODE列表" class="headerlink" title="KEYCODE列表"></a>KEYCODE列表</h2><h4 id="电话键"><a href="#电话键" class="headerlink" title="电话键"></a>电话键</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">Name</th>
<th style="text-align:right">Num</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_CALL</td>
<td style="text-align:center">拨号键</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td>KEYCODE_ENDCALL</td>
<td style="text-align:center">挂机键</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>KEYCODE_HOME</td>
<td style="text-align:center">按键Home</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td>KEYCODE_MENU</td>
<td style="text-align:center">菜单键</td>
<td style="text-align:right">82</td>
</tr>
<tr>
<td>KEYCODE_BACK</td>
<td style="text-align:center">返回键</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td>KEYCODE_SEARCH</td>
<td style="text-align:center">搜索键</td>
<td style="text-align:right">84</td>
</tr>
<tr>
<td>KEYCODE_CAMERA</td>
<td style="text-align:center">拍照键</td>
<td style="text-align:right">27</td>
</tr>
<tr>
<td>KEYCODE_FOCUS</td>
<td style="text-align:center">拍照对焦键</td>
<td style="text-align:right">80</td>
</tr>
<tr>
<td>KEYCODE_POWER</td>
<td style="text-align:center">电源键</td>
<td style="text-align:right">26</td>
</tr>
<tr>
<td>KEYCODE_NOTIFICATION</td>
<td style="text-align:center">通知键</td>
<td style="text-align:right">83</td>
</tr>
<tr>
<td>KEYCODE_MUTE</td>
<td style="text-align:center">话筒静音键</td>
<td style="text-align:right">91</td>
</tr>
<tr>
<td>KEYCODE_VOLUME_MUTE</td>
<td style="text-align:center">扬声器静音键</td>
<td style="text-align:right">164</td>
</tr>
<tr>
<td>KEYCODE_VOLUME_UP</td>
<td style="text-align:center">音量增加键</td>
<td style="text-align:right">24</td>
</tr>
<tr>
<td>KEYCODE_VOLUME_DOWN</td>
<td style="text-align:center">音量减小键</td>
<td style="text-align:right">25</td>
</tr>
</tbody>
</table>
<h4 id="控制键"><a href="#控制键" class="headerlink" title="控制键"></a>控制键</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
<th style="text-align:right">Num</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_ENTER</td>
<td style="text-align:center">回车键</td>
<td style="text-align:right">66</td>
</tr>
<tr>
<td>KEYCODE_ESCAPE</td>
<td style="text-align:center">ESC键</td>
<td style="text-align:right">111</td>
</tr>
<tr>
<td>KEYCODE_DPAD_CENTER</td>
<td style="text-align:center">导航键 确定键</td>
<td style="text-align:right">23</td>
</tr>
<tr>
<td>KEYCODE_DPAD_UP</td>
<td style="text-align:center">导航键 向上</td>
<td style="text-align:right">19</td>
</tr>
<tr>
<td>KEYCODE_DPAD_DOWN</td>
<td style="text-align:center">导航键 向下</td>
<td style="text-align:right">20</td>
</tr>
<tr>
<td>KEYCODE_DPAD_LEFT</td>
<td style="text-align:center">导航键 向左</td>
<td style="text-align:right">21</td>
</tr>
<tr>
<td>KEYCODE_DPAD_RIGHT</td>
<td style="text-align:center">导航键 向右</td>
<td style="text-align:right">22</td>
</tr>
<tr>
<td>KEYCODE_MOVE_HOME</td>
<td style="text-align:center">光标移动到开始键</td>
<td style="text-align:right">122</td>
</tr>
<tr>
<td>KEYCODE_MOVE_END</td>
<td style="text-align:center">光标移动到末尾键</td>
<td style="text-align:right">123</td>
</tr>
<tr>
<td>KEYCODE_PAGE_UP</td>
<td style="text-align:center">向上翻页键</td>
<td style="text-align:right">92</td>
</tr>
<tr>
<td>KEYCODE_PAGE_DOWN</td>
<td style="text-align:center">向下翻页键</td>
<td style="text-align:right">93</td>
</tr>
<tr>
<td>KEYCODE_DEL</td>
<td style="text-align:center">退格键</td>
<td style="text-align:right">67</td>
</tr>
<tr>
<td>KEYCODE_FORWARD_DEL</td>
<td style="text-align:center">删除键</td>
<td style="text-align:right">112</td>
</tr>
<tr>
<td>KEYCODE_INSERT</td>
<td style="text-align:center">插入键</td>
<td style="text-align:right">124</td>
</tr>
<tr>
<td>KEYCODE_TAB</td>
<td style="text-align:center">Tab键</td>
<td style="text-align:right">61</td>
</tr>
<tr>
<td>KEYCODE_NUM_LOCK</td>
<td style="text-align:center">小键盘锁</td>
<td style="text-align:right">143</td>
</tr>
<tr>
<td>KEYCODE_CAPS_LOCK</td>
<td style="text-align:center">大写锁定键</td>
<td style="text-align:right">115</td>
</tr>
<tr>
<td>KEYCODE_BREAK</td>
<td style="text-align:center">Break/Pause键</td>
<td style="text-align:right">121</td>
</tr>
<tr>
<td>KEYCODE_SCROLL_LOCK</td>
<td style="text-align:center">滚动锁定键</td>
<td style="text-align:right">116</td>
</tr>
<tr>
<td>KEYCODE_ZOOM_IN</td>
<td style="text-align:center">放大键</td>
<td style="text-align:right">168</td>
</tr>
<tr>
<td>KEYCODE_ZOOM_OUT</td>
<td style="text-align:center">缩小键</td>
<td style="text-align:right">169</td>
</tr>
</tbody>
</table>
<h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
<th style="text-align:right">Num</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_0</td>
<td style="text-align:center">按键’0’</td>
<td style="text-align:right">7</td>
</tr>
<tr>
<td>KEYCODE_1</td>
<td style="text-align:center">按键’1’</td>
<td style="text-align:right">8</td>
</tr>
<tr>
<td>KEYCODE_2</td>
<td style="text-align:center">按键’2’</td>
<td style="text-align:right">9</td>
</tr>
<tr>
<td>KEYCODE_3</td>
<td style="text-align:center">按键’3’</td>
<td style="text-align:right">10</td>
</tr>
<tr>
<td>KEYCODE_4</td>
<td style="text-align:center">按键’4’</td>
<td style="text-align:right">11</td>
</tr>
<tr>
<td>KEYCODE_5</td>
<td style="text-align:center">按键’5’</td>
<td style="text-align:right">12</td>
</tr>
<tr>
<td>KEYCODE_6</td>
<td style="text-align:center">按键’6’</td>
<td style="text-align:right">13</td>
</tr>
<tr>
<td>KEYCODE_7</td>
<td style="text-align:center">按键’7’</td>
<td style="text-align:right">14</td>
</tr>
<tr>
<td>KEYCODE_8</td>
<td style="text-align:center">按键’8’</td>
<td style="text-align:right">15</td>
</tr>
<tr>
<td>KEYCODE_9</td>
<td style="text-align:center">按键’9’</td>
<td style="text-align:right">16</td>
</tr>
<tr>
<td>KEYCODE_A</td>
<td style="text-align:center">按键’A’</td>
<td style="text-align:right">29</td>
</tr>
<tr>
<td>KEYCODE_B</td>
<td style="text-align:center">按键’B’</td>
<td style="text-align:right">30</td>
</tr>
<tr>
<td>KEYCODE_C</td>
<td style="text-align:center">按键’C’</td>
<td style="text-align:right">31</td>
</tr>
<tr>
<td>KEYCODE_D</td>
<td style="text-align:center">按键’D’</td>
<td style="text-align:right">32</td>
</tr>
<tr>
<td>KEYCODE_E</td>
<td style="text-align:center">按键’E’</td>
<td style="text-align:right">33</td>
</tr>
<tr>
<td>KEYCODE_F</td>
<td style="text-align:center">按键’F’</td>
<td style="text-align:right">34</td>
</tr>
<tr>
<td>KEYCODE_G</td>
<td style="text-align:center">按键’G’</td>
<td style="text-align:right">35</td>
</tr>
<tr>
<td>KEYCODE_H</td>
<td style="text-align:center">按键’H’</td>
<td style="text-align:right">36</td>
</tr>
<tr>
<td>KEYCODE_I</td>
<td style="text-align:center">按键’I’</td>
<td style="text-align:right">37</td>
</tr>
<tr>
<td>KEYCODE_J</td>
<td style="text-align:center">按键’J’</td>
<td style="text-align:right">38</td>
</tr>
<tr>
<td>KEYCODE_K</td>
<td style="text-align:center">按键’K’</td>
<td style="text-align:right">39</td>
</tr>
<tr>
<td>KEYCODE_L</td>
<td style="text-align:center">按键’L’</td>
<td style="text-align:right">40</td>
</tr>
<tr>
<td>KEYCODE_M</td>
<td style="text-align:center">按键’M’</td>
<td style="text-align:right">41</td>
</tr>
<tr>
<td>KEYCODE_N</td>
<td style="text-align:center">按键’N’</td>
<td style="text-align:right">42</td>
</tr>
<tr>
<td>KEYCODE_O</td>
<td style="text-align:center">按键’O’</td>
<td style="text-align:right">43</td>
</tr>
<tr>
<td>KEYCODE_P</td>
<td style="text-align:center">按键’P’</td>
<td style="text-align:right">44</td>
</tr>
<tr>
<td>KEYCODE_Q</td>
<td style="text-align:center">按键’Q’</td>
<td style="text-align:right">45</td>
</tr>
<tr>
<td>KEYCODE_R</td>
<td style="text-align:center">按键’R’</td>
<td style="text-align:right">46</td>
</tr>
<tr>
<td>KEYCODE_S</td>
<td style="text-align:center">按键’S’</td>
<td style="text-align:right">47</td>
</tr>
<tr>
<td>KEYCODE_T</td>
<td style="text-align:center">按键’T’</td>
<td style="text-align:right">48</td>
</tr>
<tr>
<td>KEYCODE_U</td>
<td style="text-align:center">按键’U’</td>
<td style="text-align:right">49</td>
</tr>
<tr>
<td>KEYCODE_V</td>
<td style="text-align:center">按键’V’</td>
<td style="text-align:right">50</td>
</tr>
<tr>
<td>KEYCODE_W</td>
<td style="text-align:center">按键’W’</td>
<td style="text-align:right">51</td>
</tr>
<tr>
<td>KEYCODE_X</td>
<td style="text-align:center">按键’X’</td>
<td style="text-align:right">52</td>
</tr>
<tr>
<td>KEYCODE_Y</td>
<td style="text-align:center">按键’Y’</td>
<td style="text-align:right">53</td>
</tr>
<tr>
<td>KEYCODE_Z</td>
<td style="text-align:center">按键’Z’</td>
<td style="text-align:right">54</td>
</tr>
</tbody>
</table>
<h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_PLUS</td>
<td style="text-align:center">按键’+’</td>
</tr>
<tr>
<td>KEYCODE_MINUS</td>
<td style="text-align:center">按键’-‘</td>
</tr>
<tr>
<td>KEYCODE_STAR</td>
<td style="text-align:center">按键’*’</td>
</tr>
<tr>
<td>KEYCODE_SLASH</td>
<td style="text-align:center">按键’/‘</td>
</tr>
<tr>
<td>KEYCODE_EQUALS</td>
<td style="text-align:center">按键’=’</td>
</tr>
<tr>
<td>KEYCODE_AT</td>
<td style="text-align:center">按键’@’</td>
</tr>
<tr>
<td>KEYCODE_POUND</td>
<td style="text-align:center">按键’#’</td>
</tr>
<tr>
<td>KEYCODE_APOSTROPHE</td>
<td style="text-align:center">按键’’’ (单引号)</td>
</tr>
<tr>
<td>KEYCODE_BACKSLASH</td>
<td style="text-align:center">按键’\’</td>
</tr>
<tr>
<td>KEYCODE_COMMA</td>
<td style="text-align:center">按键’,’</td>
</tr>
<tr>
<td>KEYCODE_PERIOD</td>
<td style="text-align:center">按键’.’</td>
</tr>
<tr>
<td>KEYCODE_LEFT_BRACKET</td>
<td style="text-align:center">按键’[‘</td>
</tr>
<tr>
<td>KEYCODE_RIGHT_BRACKET</td>
<td style="text-align:center">按键’]’</td>
</tr>
<tr>
<td>KEYCODE_SEMICOLON</td>
<td style="text-align:center">按键’;’</td>
</tr>
<tr>
<td>KEYCODE_GRAVE</td>
<td style="text-align:center">按键’`’</td>
</tr>
<tr>
<td>KEYCODE_SPACE</td>
<td style="text-align:center">空格键</td>
</tr>
</tbody>
</table>
<h4 id="小键盘"><a href="#小键盘" class="headerlink" title="小键盘"></a>小键盘</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_NUMPAD_0</td>
<td style="text-align:center">小键盘按键’0’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_1</td>
<td style="text-align:center">小键盘按键’1’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_2</td>
<td style="text-align:center">小键盘按键’2’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_3</td>
<td style="text-align:center">小键盘按键’3’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_4</td>
<td style="text-align:center">小键盘按键’4’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_5</td>
<td style="text-align:center">小键盘按键’5’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_6</td>
<td style="text-align:center">小键盘按键’6’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_7</td>
<td style="text-align:center">小键盘按键’7’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_8</td>
<td style="text-align:center">小键盘按键’8’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_9</td>
<td style="text-align:center">小键盘按键’9’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_ADD</td>
<td style="text-align:center">小键盘按键’+’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_SUBTRACT</td>
<td style="text-align:center">小键盘按键’-‘</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_MULTIPLY</td>
<td style="text-align:center">小键盘按键’*’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_DIVIDE</td>
<td style="text-align:center">小键盘按键’/‘</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_EQUALS</td>
<td style="text-align:center">小键盘按键’=’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_COMMA</td>
<td style="text-align:center">小键盘按键’,’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_DOT</td>
<td style="text-align:center">小键盘按键’.’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_LEFT_PAREN</td>
<td style="text-align:center">小键盘按键’(‘</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_RIGHT_PAREN</td>
<td style="text-align:center">小键盘按键’)’</td>
</tr>
<tr>
<td>KEYCODE_NUMPAD_ENTER</td>
<td style="text-align:center">小键盘按键回车</td>
</tr>
</tbody>
</table>
<h4 id="功能键"><a href="#功能键" class="headerlink" title="功能键"></a>功能键</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_F1</td>
<td style="text-align:center">按键F1</td>
</tr>
<tr>
<td>KEYCODE_F2</td>
<td style="text-align:center">按键F2</td>
</tr>
<tr>
<td>KEYCODE_F3</td>
<td style="text-align:center">按键F3</td>
</tr>
<tr>
<td>KEYCODE_F4</td>
<td style="text-align:center">按键F4</td>
</tr>
<tr>
<td>KEYCODE_F5</td>
<td style="text-align:center">按键F5</td>
</tr>
<tr>
<td>KEYCODE_F6</td>
<td style="text-align:center">按键F6</td>
</tr>
<tr>
<td>KEYCODE_F7</td>
<td style="text-align:center">按键F7</td>
</tr>
<tr>
<td>KEYCODE_F8</td>
<td style="text-align:center">按键F8</td>
</tr>
<tr>
<td>KEYCODE_F9</td>
<td style="text-align:center">按键F9</td>
</tr>
<tr>
<td>KEYCODE_F10</td>
<td style="text-align:center">按键F10</td>
</tr>
<tr>
<td>KEYCODE_F11</td>
<td style="text-align:center">按键F11</td>
</tr>
<tr>
<td>KEYCODE_F12</td>
<td style="text-align:center">按键F12</td>
</tr>
</tbody>
</table>
<h4 id="多媒体键"><a href="#多媒体键" class="headerlink" title="多媒体键"></a>多媒体键</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_MEDIA_PLAY</td>
<td style="text-align:center">多媒体键 播放</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_STOP</td>
<td style="text-align:center">多媒体键 停止</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_PAUSE</td>
<td style="text-align:center">多媒体键 暂停</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_PLAY_PAUSE</td>
<td style="text-align:center">多媒体键 播放/暂停</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_FAST_FORWARD</td>
<td style="text-align:center">多媒体键 快进</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_REWIND</td>
<td style="text-align:center">多媒体键 快退</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_NEXT</td>
<td style="text-align:center">多媒体键 下一首</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_PREVIOUS</td>
<td style="text-align:center">多媒体键 上一首</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_CLOSE</td>
<td style="text-align:center">多媒体键 关闭</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_EJECT</td>
<td style="text-align:center">多媒体键 弹出</td>
</tr>
<tr>
<td>KEYCODE_MEDIA_RECORD</td>
<td style="text-align:center">多媒体键 录音</td>
</tr>
</tbody>
</table>
<h4 id="手柄按键"><a href="#手柄按键" class="headerlink" title="手柄按键"></a>手柄按键</h4><table>
<thead>
<tr>
<th>KeyCode</th>
<th style="text-align:center">键位名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>KEYCODE_BUTTON_1</td>
<td style="text-align:center">通用游戏手柄按钮#1</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_2</td>
<td style="text-align:center">通用游戏手柄按钮 #2</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_3</td>
<td style="text-align:center">通用游戏手柄按钮 #3</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_4</td>
<td style="text-align:center">通用游戏手柄按钮 #4</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_5</td>
<td style="text-align:center">通用游戏手柄按钮 #5</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_6</td>
<td style="text-align:center">通用游戏手柄按钮 #6</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_7</td>
<td style="text-align:center">通用游戏手柄按钮 #7</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_8</td>
<td style="text-align:center">通用游戏手柄按钮 #8</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_9</td>
<td style="text-align:center">通用游戏手柄按钮 #9</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_10</td>
<td style="text-align:center">通用游戏手柄按钮 #10</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_11</td>
<td style="text-align:center">通用游戏手柄按钮 #11</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_12</td>
<td style="text-align:center">通用游戏手柄按钮 #12</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_13</td>
<td style="text-align:center">通用游戏手柄按钮 #13</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_14</td>
<td style="text-align:center">通用游戏手柄按钮 #14</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_15</td>
<td style="text-align:center">通用游戏手柄按钮 #15</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_16</td>
<td style="text-align:center">通用游戏手柄按钮 #16</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_A</td>
<td style="text-align:center">游戏手柄按钮 A</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_B</td>
<td style="text-align:center">游戏手柄按钮 B</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_C</td>
<td style="text-align:center">游戏手柄按钮 C</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_X</td>
<td style="text-align:center">游戏手柄按钮 X</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_Y</td>
<td style="text-align:center">游戏手柄按钮 Y</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_Z</td>
<td style="text-align:center">游戏手柄按钮 Z</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_L1</td>
<td style="text-align:center">游戏手柄按钮 L1</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_L2</td>
<td style="text-align:center">游戏手柄按钮 L2</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_R1</td>
<td style="text-align:center">游戏手柄按钮 R1</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_R2</td>
<td style="text-align:center">游戏手柄按钮 R2</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_MODE</td>
<td style="text-align:center">游戏手柄按钮 Mode</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_SELECT</td>
<td style="text-align:center">游戏手柄按钮 Select</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_START</td>
<td style="text-align:center">游戏手柄按钮 Start</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_THUMBL</td>
<td style="text-align:center">Left Thumb Button</td>
</tr>
<tr>
<td>KEYCODE_BUTTON_THUMBR</td>
<td style="text-align:center">Right Thumb Button</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> KeyCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中键盘的一些小tip]]></title>
      <url>/2017/05/13/Android%E4%B8%AD%E9%94%AE%E7%9B%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8Ftip/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava 教程第一部分：入门之 关键的类]]></title>
      <url>/2017/04/28/RxJava%20%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E5%85%A5%E9%97%A8%E4%B9%8B%20%E5%85%B3%E9%94%AE%E7%9A%84%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Rx 有两个最基础的类型，和其他一些扩展这两种类型的类。两个核心的类为： Observable 和 Observer。Subject 是同时继承了 Observable 和 Observer。</p>
<p>Rx 是在 Observer 模式之上建立起来的。这种模式很常见，在 Java中有很多地方都使用了该模式，比如 JavaFx 中的 EventHandler。 这些简单的使用方式和 Rx 对比有如下区别：</p>
<ul>
<li>使用 event handler 来处理事件很难组合使用</li>
<li>无法延时处理查询事件</li>
<li>可能会导致内存泄露</li>
<li>没有标准的标示完成的方式</li>
<li>需要手工的来处理并行和多线程</li>
</ul>
<h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>Observable 是第一个核心类。该类包含了 Rx 中的很多实现，以及所有核心的操作函数（operator、或者说 操作符）。在本系列教程中会逐步介绍每个操作函数。现在我们只需要理解 subscribe 函数即可，下面是该函数的一种定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public final Subscription subscribe(Subscriber&lt;? super T&gt; subscriber)</div></pre></td></tr></table></figure></p>
<p>该函数是用来接收 observable 发射的事件的。当事件被发射后，他们就丢给了 subscriber， subscriber 是用来处理事件的实现。这里的 Subscriber 参数实现了 Observer 接口。</p>
<p>一个 Observable 发射 三种类型的事件：</p>
<ul>
<li>Values （数据）</li>
<li>完成状态，告诉 Subscriber 事件（数据） 发射完毕，没有其他数据了</li>
<li>Error， 错误状态，如果在发射数据的过程中出现错误了。会发送该事件。</li>
</ul>
<h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>Subscriber 是 Observer 的一个实现。 Subscriber 实现了其他一些额外的功能，可以作为我们实现 Observer 的基类。现在先看看 Observer 的接口定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">interface Observer&lt;T&gt; &#123; void onCompleted(); void onError(java.lang.Throwable e); void onNext(T t);&#125;</div></pre></td></tr></table></figure></p>
<p>每次 Observable 发射事件的时候就会执行这三个对应的函数。Observer 的 onNext 函数会被调用0次或者多次，然后会调用 onCompleted 或者 onError。在 onCompleted 或者 onError 发生以后就不会再有其他事件发射出来了。</p>
<p>在使用 Rx 开发的过程中，你会看到很多 Observable，但是 Observer 出场的时候很少。但是理解 Observer 的概念是非常重要的，虽然有很多简写方式来帮助更加简洁的使用 Observer。</p>
<h3 id="实现-Observable-和-Observer"><a href="#实现-Observable-和-Observer" class="headerlink" title="实现 Observable 和 Observer"></a>实现 Observable 和 Observer</h3><p>你可以手工的实现 Observer 或者扩展 Observable。 在真实场景中并不需要这样做，Rx 已经提供了很多可以直接使用的工厂方法了。使用 Rx 提供的工具来创建 Observable 和 Observer 比手工实现要更加安全和简洁。</p>
<p>要订阅到一个 Observable，并不需要提供一个 Observer 示例。subscribe 函数有各种重载方法可以使用，你可以只订阅 onNext 事件，有可以只订阅 onError 事件，这样就不用提供 Observer 对象就可以接受事件了。每次只需要提供你关心的函数即可，例如 如果你不关心 error 和完成事件，则只提供 onNext 来接收每次发送的数据即可。</p>
<p>配合 Java 8 的 Lambda 表达式则使用起来代码看起来会更加简洁，所以本系列示例代码会使用 lambda 表达式，如果你不了解的话，可以先看看掌握 Java 8 Lambda 表达式。</p>
<h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Subject 是 Observable 的一个扩展，同时还实现了 Observer 接口。第一眼看上去可能有点奇怪，但是在有些场合下使用 Subject 将会非常便捷。他们可以像 Observer 一样接收事件，同时还可以像 Observable 一样把接收到的事件再发射出去。这种特性非常适合 Rx 中的接入点，当你的事件来至于 Rx 框架之外的代码的时候，你可以把这些数据先放到 Subject 中，然后再把 Subject转换为一个<br>Observable，就可以在 Rx 中使用它们了。你可以把 Subject 当做 Rx 中的 事件管道。</p>
<p>Subject 有两个参数类型：输入参数和输出参数。这样设计是为了抽象而不是应为使用 Subject 是为了转换数据类型。转换数据应该使用转换操作函数来完成，后面我们将介绍各种操作函数。<br>Subject 有各种不同的具体实现。下面将介绍一些非常重要的实现以及他们之间的区别。</p>
<h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p>PublishSubject 是最直接的一个 Subject。当一个数据发射到 PublishSubject 中时，PublishSubject 将立刻把这个数据发射到订阅到该 subject 上的所有 subscriber 中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">   PublishSubject&lt;Integer&gt; subject = PublishSubject.create(); </div><div class="line">   subject.onNext(1);</div><div class="line">   subject.subscribe(System.out::println);  </div><div class="line">   subject.onNext(2);</div><div class="line">   subject.onNext(3);</div><div class="line">   subject.onNext(4);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上面的 System.out::println 是 Lambda 表达式中的函数引用，如果表达式代码块只有一个函数调用，则可以直接使用函数引用来简化代码</p>
</blockquote>
<p>可以看到，数据 1 并没有打印出来，原因是当我们订阅到 subject 的时候，1 已经发射出去了。当订阅到 subject 后就开始接收 发射到 subject 中的数据了。</p>
<p>这是我们初次看到如何使用 subscribe 函数，值得详细研究下是如何用的。 这里我们使用了一个重载的参数只有一个 Function 类型。这个参数 Function 接收一个参数 Integer 并且没有返回值。 没有返回值的 Function 在 Rx 中被称之为 action。 可以使用下面几种方式来提供这个 Function：</p>
<ul>
<li>提供一个 Action1 的实现对象</li>
<li>使用 Lambda 表达式 实现</li>
<li>使用符合该接口定义类型的 Lambda 表达式函数引用。这里 System.out::println 函数可以接受一个 Object 对象，符合 Action 的定义（接受一个参数并没有返回值），所以我们可以把该函数作为函数应用使用。 subscribe 将会使用他收到的值作为 println 函数的参数来调用 println 函数。</li>
</ul>
<h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p>ReplaySubject 可以缓存所有发射给他的数据。当一个新的订阅者订阅的时候，缓存的所有数据都会发射给这个订阅者。 由于使用了缓存，所以每个订阅者都会收到所以的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ReplaySubject&lt;Integer&gt; s = ReplaySubject.create(); </div><div class="line">s.subscribe(v -&gt; System.out.println(&quot;Early:&quot; + v));</div><div class="line">s.onNext(0);</div><div class="line">s.onNext(1);</div><div class="line">s.subscribe(v -&gt; System.out.println(&quot;Late: &quot; + v));</div><div class="line">s.onNext(2);</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Early:0</div><div class="line">Early:1</div><div class="line">Late: 0</div><div class="line">Late: 1</div><div class="line">Early:2</div><div class="line">Late: 2</div></pre></td></tr></table></figure></p>
<p>不管是何时订阅的，每个订阅者都收到了所有的数据。注意后一个订阅者在处理 2 之前就先收到了之前发射的数据 0和1.</p>
<p>缓存所有的数据并不是一个十分理想的情况，如果 Observable 事件流运行很长时间，则缓存所有的数据会消耗很多内存。可以限制缓存数据的数量和时间。 ReplaySubject.createWithSize 限制缓存多少个数据；而 ReplaySubject.createWithTime 限制一个数据可以在缓存中保留多长时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ReplaySubject&lt;Integer&gt; s ReplaySubject.createWithSize(2);</div><div class="line">s.onNext(0);</div><div class="line">s.onNext(1);</div><div class="line">s.onNext(2);</div><div class="line">s.subscribe(v -&gt; System.out.println(&quot;Late: &quot; + v));</div><div class="line">s.onNext(3);</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Late: 1</div><div class="line">Late: 2</div><div class="line">Late: 3</div></pre></td></tr></table></figure></p>
<p>由于指定只缓存两个数据，所以当订阅的时候第一个数据 0 就收不到了。 限制缓存的时间也是一样的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ReplaySubject&lt;Integer&gt; s = ReplaySubject.createWithTime(150, TimeUnit.MILLISECONDS, Schedulers.immediate());</div><div class="line">s.onNext(0);</div><div class="line">Thread.sleep(100);</div><div class="line">s.onNext(1);</div><div class="line">Thread.sleep(100);</div><div class="line">s.onNext(2);</div><div class="line">s.subscribe(v -&gt; System.out.println(&quot;Late: &quot; + v));</div><div class="line">s.onNext(3);</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Late: 1</div><div class="line">Late: 2</div><div class="line">Late: 3</div></pre></td></tr></table></figure></p>
<p>使用时间缓存创建 ReplaySubject 需要指定一个 Scheduler， Scheduler 是 Rx 中保持时间的方式。现在可以假装他不存在，不用关心他。<br>ReplaySubject.createWithTimeAndSize 则可以同时限制时间和个数。</p>
<h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p>BehaviorSubject 只保留最后一个值。 等同于限制 ReplaySubject 的个数为 1 的情况。在创建的时候可以指定一个初始值，这样可以确保党订阅者订阅的时候可以立刻收到一个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BehaviorSubject&lt;Integer&gt; s = BehaviorSubject.create();</div><div class="line">s.onNext(0);</div><div class="line">s.onNext(1);</div><div class="line">s.onNext(2);</div><div class="line">s.subscribe(v -&gt; System.out.println(&quot;Late: &quot; + v));</div><div class="line">s.onNext(3);</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Late: 2</div><div class="line">Late: 3</div></pre></td></tr></table></figure></p>
<p>下面的示例只是打印出 Completed， 由于最后一个事件就是 Completed。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">BehaviorSubject&lt;Integer&gt; s = BehaviorSubject.create();</div><div class="line">s.onNext(0);</div><div class="line">s.onNext(1);</div><div class="line">s.onNext(2);</div><div class="line">s.onCompleted();</div><div class="line">s.subscribe(</div><div class="line">  v -&gt; System.out.println(&quot;Late: &quot; + v), </div><div class="line">  e -&gt; System.out.println(&quot;Error&quot;),</div><div class="line"> () -&gt; System.out.println(&quot;Completed&quot;));</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里使用了 subscribe 函数的另外一种重载形式，接受三个参数。</p>
</blockquote>
<p>下面使用了默认初始化值，如果订阅者的发射数据之前就订阅了，则会收到这个初始化的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BehaviorSubject&lt;Integer&gt; s = BehaviorSubject.create(0);</div><div class="line">s.subscribe(v -&gt; System.out.println(v));</div><div class="line">s.onNext(1);</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>由于 BehaviorSubject 的定义就是总是有可用的数据，所以一般都会使用初始化值来创建 BehaviorSubject 。</p>
<h3 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h3><p>AsyncSubject 也缓存最后一个数据。区别是 AsyncSubject 只有当数据发送完成时（onCompleted 调用的时候）才发射这个缓存的最后一个数据。可以使用 AsyncSubject 发射一个数据并立刻结束。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AsyncSubject&lt;Integer&gt; s = AsyncSubject.create();</div><div class="line">s.subscribe(v -&gt; System.out.println(v));</div><div class="line">s.onNext(0);</div><div class="line">s.onNext(1);</div><div class="line">s.onNext(2);</div><div class="line">s.onCompleted();</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure></p>
<p>如果上面的示例不调用 s.onCompleted(); 则什么结果都不会打印出来。</p>
<h3 id="隐含的规则"><a href="#隐含的规则" class="headerlink" title="隐含的规则"></a>隐含的规则</h3><p>Rx 中有一些隐含的规则在代码中并不太容易看到。一个重要的规则就是当一个事件流结束（onError 或者 onCompleted 都会导致事件流结束）后就不会发射任何数据了。这些 Subject 的实现都遵守这个规则，subscribe 函数也拒绝违反该规则的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Subject&lt;Integer, Integer&gt; s = ReplaySubject.create();</div><div class="line">s.subscribe(v -&gt; System.out.println(v));</div><div class="line">s.onNext(0);</div><div class="line">s.onCompleted();</div><div class="line">s.onNext(1);</div><div class="line">s.onNext(2);</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0</div></pre></td></tr></table></figure></p>
<p>但是在 Rx 实现中并没有完全确保这个规则，所以你在使用 Rx 的过程中要注意遵守该规则，否则会出现意料不到的情况。</p>
<p>本文出自 云在千峰 <a href="http://blog.chengyunfeng.com/?p=948" target="_blank" rel="external">http://blog.chengyunfeng.com/?p=948</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Rxjava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ContentProvider入门]]></title>
      <url>/2017/04/22/ContentProvider%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>1.什么是Content Provider(内容提供器)</p>
<blockquote>
<p>Content Provider主要用于在不同的应用程序之间实现数据共享的功能，它提供了一套完整的机制，允许一个应用程序访问另一个程序中的数据，还能保证被访问数据的安全性。</p>
</blockquote>
<p>2.ContentResolver简介</p>
<blockquote>
<p>Content providers是以类似数据库中表的方式将数据暴露。它提供了一系列方法用于对数据进行CRUD操作，其中insert()方法用于添加数据，delete()方法用于删除数据，update()方法用于更新数据，query()方法用于查询数据。它进行CRUD的时候是以Uri参数进行的。</p>
</blockquote>
<p>3.什么是Uri</p>
<blockquote>
<p>Uri一般由四部分组成。</p>
<ul>
<li>前缀 固定格式为”content://“</li>
<li>标识 为了唯一性，一般使用应用程序的包名来表示</li>
<li>表名 例如”content://com.example.demo/user”</li>
<li>如果Uri中含有某一条记录的id，则可以这样表示”content://com.example.demo/user/1”，代表访问user表中id为1的那一条数据</li>
</ul>
<p>因为内容Uri的格式只有两种，有id和没id，所以我们可以用通配符来匹配这两种格式所有的Uri</p>
<ul>
<li>*：表示匹配任意长度的任意字符。</li>
<li>#： 表示匹配任意长度的数字。<br>所以一个能够匹配任意表内容的Uri就可以写成”content://com.example.demo/*”。<br>所以一个能够匹配sser表任意一条数据的Uri就可以写成”content://com.example.demo/user/#”。</li>
</ul>
</blockquote>
<p>4.什么是UriMatcher</p>
<blockquote>
<p>是一个工具类，专门用来匹配Uri，主要方法有两个</p>
<ul>
<li>addURI<br>这个方法接受3个参数，分别把authority、path和一个自定义代码传进去。<br>authority一般为包名，path为表名。</li>
<li>match<br>这个方法接受Uri作为参数，返回能够匹配这个Uri对象所对应的自定义代码，利用这个代码，我们可以判断调用者希望访问的是哪张表。</li>
</ul>
</blockquote>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>1.创建内容提供器的步骤<br>新建一个ProviderDemo项目和新建一个类，继承自ContentProvider。重写它的子类方法。<br>android studio用户可以直接使用new -&gt; other -&gt; Content Provider实现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">public class MyContentProvider extends ContentProvider &#123;</div><div class="line"></div><div class="line">    public static final int USER_DIR = 0;</div><div class="line">	</div><div class="line">    public static final int USER_ITEM = 1;</div><div class="line"></div><div class="line">    public static final String AUTHORITY = &quot;com.example.changqin.provider&quot;;</div><div class="line"></div><div class="line">    private DbHelper mDbHelper;</div><div class="line"></div><div class="line">    private static UriMatcher uriMatcher;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;user&quot;, USER_DIR);</div><div class="line">        uriMatcher.addURI(AUTHORITY, &quot;user/#&quot;, USER_ITEM);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onCreate() &#123;</div><div class="line">        mDbHelper = new DbHelper(getContext(), &quot;school&quot;, null, 1);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyContentProvider() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getType(Uri uri) &#123;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case USER_DIR:</div><div class="line">                return &quot;vnd.android.cursor.dir/cnd.com.example.changqin.provider.user&quot;;</div><div class="line">            case USER_ITEM:</div><div class="line">                return &quot;vnd.android.cursor.item/cnd.com.example.changqin.provider.user&quot;;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int delete(Uri uri, String selection, String[] selectionArgs) &#123;</div><div class="line">        SQLiteDatabase db = mDbHelper.getWritableDatabase();</div><div class="line">        int result = 0;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case USER_DIR:</div><div class="line">                result = db.delete(&quot;user&quot;, selection, selectionArgs);</div><div class="line">                break;</div><div class="line">            case USER_ITEM:</div><div class="line">                String id = uri.getPathSegments().get(1);</div><div class="line">                result = db.delete(&quot;user&quot;, &quot;id=?&quot;, new String[]&#123;id&#125;);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Uri insert(Uri uri, ContentValues values) &#123;</div><div class="line">        SQLiteDatabase db = mDbHelper.getWritableDatabase();</div><div class="line">        Uri uriReturn = null;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case USER_DIR:</div><div class="line">            case USER_ITEM:</div><div class="line">                long newUserId = db.insert(&quot;user&quot;, null, values);</div><div class="line">                uriReturn = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/user/&quot; + newUserId);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return uriReturn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Cursor query(Uri uri, String[] projection, String selection,</div><div class="line">                        String[] selectionArgs, String sortOrder) &#123;</div><div class="line">        SQLiteDatabase db = mDbHelper.getReadableDatabase();</div><div class="line">        Cursor cursor = null;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case USER_DIR:</div><div class="line">                cursor = db.query(&quot;user&quot;, projection, selection, selectionArgs, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            case USER_ITEM:</div><div class="line">                String userId = uri.getPathSegments().get(1);</div><div class="line">                cursor = db.query(&quot;user&quot;, projection, &quot;id=?&quot;, new String[]&#123;userId&#125;, null, null, sortOrder);</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return cursor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int update(Uri uri, ContentValues values, String selection,</div><div class="line">                      String[] selectionArgs) &#123;</div><div class="line">        SQLiteDatabase db = mDbHelper.getWritableDatabase();</div><div class="line">        int result = 0;</div><div class="line">        switch (uriMatcher.match(uri)) &#123;</div><div class="line">            case USER_DIR:</div><div class="line">                result = db.update(&quot;user&quot;, values, selection, selectionArgs);</div><div class="line">            case USER_ITEM:</div><div class="line">                String id = uri.getPathSegments().get(1);</div><div class="line">                result = db.update(&quot;user&quot;, values, &quot;id=?&quot;, new String[]&#123;id&#125;);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.query方法解释，其他同理<br>因为我们已经创建过数据库了，在query方法中，获取SQLiteDatabase的实例，然后用uriMatcher.match(uri)方法可以进行判断，用户希望访问的是哪一张表，然后按照数据库的方法，进行查询，然后返回Cursor就可以了。</p>
<blockquote>
<p>uri.getPathSegments().get(1)<br>这个方法返回的是一个List<string>，例如我们请求的Uri是”content://com.example.demo/user/1”，这个方法会将最后一个”/“后面的数据进行list存储，所以上面方法get(1)取得的就是<strong>1</strong>这个id。</string></p>
</blockquote>
<p>3.附DbHelper类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class DbHelper extends SQLiteOpenHelper &#123;</div><div class="line">    private static final String CREATE_USER = &quot;create table user (&quot;</div><div class="line">            + &quot;id integer primary key autoincrement ,&quot;</div><div class="line">            + &quot; username text,&quot;</div><div class="line">            + &quot;password text&quot;</div><div class="line">            + &quot;)&quot;;</div><div class="line">    private static String user0 = &quot;insert into user(username,password)values(&apos;wcq&apos;,&apos;qqq&apos;)&quot;;</div><div class="line">    private static String user1 = &quot;insert into user(username,password)values(&apos;wcq123&apos;,&apos;qqq123&apos;)&quot;;</div><div class="line">    private static String user2 = &quot;insert into user(username,password)values(&apos;hyx&apos;,&apos;548&apos;)&quot;;</div><div class="line">    private static String user3 = &quot;insert into user(username,password)values(&apos;xhkda&apos;,&apos;7891&apos;)&quot;;</div><div class="line"></div><div class="line">    public DbHelper(Context context, String name, SQLiteDatabase.CursorFactory factory,</div><div class="line">                    int version) &#123;</div><div class="line">        super(context, name, factory, version);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(SQLiteDatabase db) &#123;</div><div class="line">        db.execSQL(CREATE_USER);</div><div class="line"></div><div class="line">        db.execSQL(user0);</div><div class="line">        db.execSQL(user1);</div><div class="line">        db.execSQL(user2);</div><div class="line">        db.execSQL(user3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.创建ProviderTest项目，编写代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Button quary_data = (Button) findViewById(R.id.btn_query);</div><div class="line">        quary_data.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Uri uri = Uri.parse(&quot;content://com.example.changqin.provider/user/1&quot;);</div><div class="line">                //Cursor cursor = getContentResolver().query(uri, null, &quot;id=?&quot;, new String[]&#123;&quot;1&quot;&#125;, null);</div><div class="line">                Cursor cursor = getContentResolver().query(uri, null, null, null, null);</div><div class="line">                if (cursor != null) &#123;</div><div class="line">                    while (cursor.moveToNext())&#123;</div><div class="line">                        int userId = cursor.getInt(0);</div><div class="line">                        String username = cursor.getString(1);</div><div class="line">                        String password = cursor.getString(2);</div><div class="line"></div><div class="line">                        Log.e(&quot;wcq&quot;,userId+&quot; &quot;+username+&quot; &quot;+password);</div><div class="line">                    &#125;</div><div class="line">                    cursor.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>查看控制台可以看到，我们成功的访问了ProviderDemo中数据库的数据。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2839845-2b5a6af212a66cb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>5.其他的操作和查询差不多，基本入门知识就先讲解到这里。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 四大组件 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
